QDS 3.337:

* [QD-1547] Add buffer overflow as a metric for MARS
* [QD-1571] [dxLink] Add acceptAggregationPeriod property for the dxLink QD connector
* [QD-1572] [dxLink] Add "acceptEventFields" property support for dxLink QD connector
  - The property allows to reduce set of event fields transmitted over the network.
    Event types not included in the property are transmitted with all fields.
  - VM option example: -Dcom.devexperts.qd.dxlink.websocket.acceptEventFields=(Quote[bidPrice,askPrice],Order[price])
  - Address property example: dxlink:wss://demo.dxfeed.com/dxlink-ws[acceptEventFields=(Quote[bidPrice],Order[price])]
* [QD-1577] [dxLink] Enable MarketMaker record in the dxlink.xml scheme
* [QD-1586] New Order source for BlueOcean ATS: ocea
* [QD-1591] New Order source for IG CFDs Gate: IGC

QDS 3.336:

* [QD-1570] [dxFeed API] Add AGGREGATE, COMPOSITE, REGIONAL OrderSource
  - new system property 'dxscheme.unitaryOrderSource=true|false' has been added. It controls whether a single or unitary
    source is used when subscribing to all sources. It is set to 'false' by default. All separate sources, such as
    'COMPOSITE_ASK', 'COMPOSITE_BID', 'REGIONAL_ASK', 'REGIONAL_BID', 'AGGREGATE_ASK' and 'AGGREGATE_BID' have been
    declared deprecated.
* [QD-1569] [dxFeed API] Add MarketMaker event

QDS 3.335:

* [QD-1568] Striping specification breaks QD filters in connection string
* [QD-1567] Exception in logs "Unexpected MBean registration exception"
* [QD-1557] [dxFeed API] Add 'fields' filter to InstrumentProfileComposer
* [QD-1564] [RMI] RMIOperation.valueOf shall support RMIServiceInterface annotation

QDS 3.334:

* [QD-1515] Optimize the performance of striped connections
* [QD-1559] Create TextMessage record

QDS 3.333:

* [QD-1555] Adjust Timing for easier testing
* [QD-1532] [IPF] Allow set Bearer token for authentication
  - The AuthToken class has been moved from qds.jar to dxlib.jar.
* [QD-1463] [Schedule] Fix day end in some schedules
* [QD-1553] New order source CEDX
* [QD-1552] Use log4j v2 for unit tests
* [QD-1551] Flaky test: DXEndpointRestoreTest

QDS 3.332:

* [QD-1542] [dxLink] Provide the ability to override the XML parser for the Android environment
  - lookup for 'javax.xml.parsers.DocumentBuilderFactory' through service-loading facility was added.
* [QD-201] Support custom symbol striping of QD Collectors
  - QDCollector is augmented with SymbolStriper, which can be specified via QDCollector.Builder
  - QDEndpoint.Builder and DXEndpoint.Builder provide means to configure SymbolStriper
  - New option "--stripe <stripe>" can be used to configure symbol striper
    for certain QDS tools like multiplexor and connect
  - New JVM property "dxfeed.stripe" can be used to configure symbol striper for related collectors and endpoints;
    see "help stripers" for it's syntax
  - NOTE: Old system property "com.devexperts.qd.impl.stripe" is deprecated and will be removed later!
    (it uses old syntax for number of hash stripes)

QDS 3.331:

* [QD-1543] Exclude OptionSale record from History conflateFilter by default
* [QD-1491] dxFeed API: Allow set notification batch size for subscription
* [QD-1466] dxFeed API: Allow set aggregation period per DXFeed subscription
* [QD-1519] dxFeed API: Re-design logic of EventProcessor
  - Feed API uses the same logic of the aggregation period as the network connector.

QDS 3.330:

* [QD-1492] Graceful connections close
  - added the JMX 'isAccepting' flag, which describes whether the server can accept new connections
  - added JMX operation: 'stopAcceptor' to immediately disable accepting new connections
  - added JMX operation: 'stopGracefully' to smothly disconnect all connections and shutdown the socket connector for
    a specified period of time
  - added JMX operation: 'closeConnections' to smoothly disconnect specified percent of connections during the specified
    time period with the additional option to disable socket accepting during operation
* [QD-1540] RecordBuffer throws NullPointerException when using replaceAt methods
* [QD-1539] [Build] Fix flaky test FileWriterTest.testStorageLimit
* [QD-1479] RMI requests waiting to send hanging forever after pending requests rebalanced
* [QD-1536] IPF: Add the new type CERTIFICATE to enum InstrumentProfileType
* [QD-1518] QDStats graph is broken for StripedCollector
* [QD-1499] Implement the statistics per stripe
  - JVM parameter "-Dcom.devexperts.qd.logStripedConnectors=false|true" (false by default) can be used
    to turn on showing extended stats for striped connectors
  - JMX bean for endpoint "com.devexperts.qd.monitoring:type=MonitoringEndpoint,..." can be used to
    change the logging/MARS reporting in real time
  - BACKWARD-INCOMPATIBLE CHANGES:
    - Deprecated class com.devexperts.qd.monitoring.QDMonitoring is removed

QDS 3.329:

* [QD-1528] MessageConnector removal support
* [QD-1531] New order source ARCA
* [QD-1527] [EXPERIMENTAL] Common bind address handling for server connectors
* [QD-1517] Add ability to set connector address via JMX
  - setHost and setPort in JMX Bean have been removed - use setAddress
  - setHost and setPort on the connector no longer work - use the setAddress
* [QD-1415] Connector restore: return to normal state after failover to backup
  - added parameter to client socket connector "restoreTime=HH:mm", available for connectOrder "priority" or "ordered"
  - added JMX operations: restoreNow() and restoreGracefully("30s") to restore the connection manually
  - added JVM parameter "com.devexperts.qd.qtp.connectionRestoreTime=HH:mm" - restoreTime applied for all connections
    if not override in connection params, disabled by default
  - added JVM parameter "com.devexperts.qd.qtp.gracefulDelay=5m" - default graceful delay 5m
* [QD-1522] [Tools] qds instruments additional option to write zero result file on disk
  - added boolean JVM option "-Dcom.devexperts.qd.tools.instruments.writeEmptyResults" (default=false)
* [QD-1526] [Build] Speedup slow unit tests: FastDoubleUtilTest & AdditionalUnderlyingsTest

QDS 3.328:

* [QD-1405] IPF: PRICE_INCREMENTS: Increase the supported decimal precision up to 1.0E-18
* [QD-1523] Tools: FileWriter with option "tmpdir" uses different file permissions
* [QD-1501] Fix ClientSocketSource races
* [QD-1516] [dxLink] Provide the ability to run on Android
* [QD-1512] BUG FIX: QDS tape-writing facilities works incorrect with tmpDir param
* [QD-1514] [Webservice] Align dxfeed.properties for JMX parameters

QDS 3.327:

* [QD-1508] [dxLink] Provide the ability to run on Java versions later than 8
* [QD-1482] [dxLink] Enhanced WebSocket connection information reporting
* [QD-1507] [dxLink] Provide client information in the SETUP message
* [QD-1494] [dxLink] Provide User-Agent in WebSocket connection
* [QD-1506] [dxLink] Fix the heartbeat timeout configuration
* [QD-85] Support easy configuration for striping of connections
  - added client connector property "stripe" (empty by default - no striping), that configures
    symbols striper for the connection, e.g. "auto", "byhash4", "byrange-E-L-S-", "by1".
  - value "stripe=auto" uses default system striping defined in "com.devexperts.qd.impl.stripe" property.
  - value "stripe=by1" disables striping (i.e. mono striping).
* [QD-1480] Tools: Create SubscriptionDumpRepeater tool
  - added SubscriptionDumpRepeater tool that can be used as a load generator client based on a subscription profile dump
    and reproduce subscriptions (all symbols, subscription types and contracts) for each agent on a separate connection.
* [QD-617] Tools: Add option for keeping temporary tape files (write in progress) separately from completed
    - New parameter for the tape recording process "tmpDir=.". Set the directory for temporary incomplete tape recording
* [QD-1502] [Schedule] Misprint in trading venue for XBER
* [QD-1503] New Order source for BlueOcean ATS: OCEA
* [QD-1505] [Schedule] Add holidays for 2024

QDS 3.326:

* [QD-1432] [build] Update build scripts to allow incremental builds
  - NOTE: Internal delivery via Maven repository only.
* [QD-1483] [dxLink] Time between reconnection attempts should be increased
* [QD-1481] [dxLink] Error messaging from client to server
* [QD-1493] [Schedule] Access schedule definition
* [QD-1305] QD internal logging cleanup
  - Logging in QD project now conforms to industry common practices:
    - NOTE: Use of default log category "com.devexperts.QD" is changed to individual class names
    - Log levels INFO, WARN, ERROR are used to report status of QD library and DEBUG for developer purposes
    - NOTE: Expect more DEBUG logging from QD in the future - fix logging configuration in projects using QD
    - QDLog.log is deprecated and is subject for future removal - create specific instances of Logging instead
* [QD-1487] [dxLink] dxLink QD connector on some machines the native image often fails to connect
* [QD-1444] [build] qd-samplecert module shall not be bundled in qds-tools.jar

QDS 3.325:

* [QD-1478] Implementation of toString in OtcMarketsOrder does not output the marketMaker field
* [QD-1475] Enable qds-monitoring for GraalVM Native SDK
* [QD-1476] [EXPERIMENTAL] [dxLink] allow to customize max frame payload length
  - JVM parameter "-Dcom.devexperts.qd.dxlink.websocket.maxFramePayloadLength=65536" manages frame payload length.
* [QD-1474] Automate publishing dxlink-websocket to dxFeed public repo
* [QD-1301] Method RecordBuffer.removeAt breaks ongoing iteration
* [QD-1469] [Schedule] Add the schedules for the MICs required for CornerBank

QDS 3.324:

* [QD-1468] QTP parser can allocate an unlimited amount of memory
  - new system property 'com.devexperts.qd.qtp.maxMessageSize' defines the maximum size in bytes of a message
    delivered over QTP connection with default 100000.
* [QD-1454] [EXPERIMENTAL] [dxLink] dxLink QD connector
* [QD-1467] Use dxfeed maven repo for missing dependencies
* [QD-1465] [Schedule] Incorrect 'sds' value for XIST
* [QD-1462] [Schedule] Add missing sds params and correct sd value for tv.XBUD
* [QD-1460] [Schedule] Add schedule for tradegate
* [QD-1455] Add OtcMarketsOrder record to 'feed' filter
  - Records 'OtcMarketsOrder*' has been added to filters 'feed' and 'compfeed'

QDS 3.323:

* [QD-1459] Incorrect QD version in jar manifests
* [QD-1446] Extend bid ask timestamps to millisecond resolution for Quote and MM records
  - new system property 'dxscheme.bat' has been added. It controls precision of BidTime & AskTime fields of Quote record
    and MMBidTime & MMAskTime fields of MarketMaker record. Accepted values: 'seconds' (default) and 'millis'.
* [QD-1457] Field type configuration properties don't work with DXScheme loader
* [QD-1452] [Schedule] Add new markets for EU exchanges

QDS 3.322:

* [QD-1453] [dxfeed-api] Fix 'BondUS()' trading hours
* [QD-1441] [Schedule] Schedule definition accepts invalid time zones
  - new method com.devexperts.util.TimeUtil.getTimeZone is introduced, that throws exception in case of
    invalid time-zone ID. JDK option "-Dcom.devexperts.util.TimeUtil.skipTimeZoneValidation=true" can be used
    to revert that behavior.

QDS 3.321:

* [QD-1451] QD scheme shall support alpha-numeric characters for exchange code
  - new system property dxscheme.exchanges has been added. It defines the range of exchange codes for all regional
    records (except Book). The system property 'com.dxfeed.event.market.impl.<record_name>.exchanges' for a individual
    record is still supported and has a higher priority. The property value must be a valid character class (in regular
    expression terminology). This character class must be a subset of [0-9A-Za-z]. The default value is [A-Z].
* [QD-1447] Create OtcMarketsOrder record
* [QD-1449] Tools: Adjust TDP tool for thread dumps of Java version 11+
  - TDP accepts "-n|--name <regex>" option to limit report to specific thread names (by default report all)
  - Option "-s|--state <regex>" now accepts regex instead of string

QDS 3.320:

* [QD-1445] Adjust striper filters formatting
  - BACKWARD-INCOMPATIBLE CHANGE: RangeStriper and RangeFilter format has changed to use "-" as delimiters.
    see qds tools "stripers" and "filters" help article for more info.
* [QD-1438] [Schedule] Add holidays for XPRA and CHIA
* [QD-1442] Cleanup Maven configuration

QDS 3.319:

* [QD-1439] New price level book sources DEX and BZX
  - new price level book sources were added for existed DEX and BZX order sources
* [QD-1437] [Schedule] Update bond holidays/short days for 20230406, 20230407

QDS 3.318:

* [QD-1424] EVENT_FLAGS are not set when publishing to a tape file via DXPublisher
* [QD-1429] dxFeed webservice: provide a subscription to event Message
* [QD-1375] Logging facility unit tests spoil project tree by temporary files
* [QD-1435] Migrate all tests to JUnit 4
* [QD-1434] Sweeping snapshot in History causes endless TX_PENDING
* [QD-1427] [RMI] Remove stack traces from remote-delivered exceptions
  - By default RMI will remove all stack traces from exceptions delivered over network for security reasons.
    Use "-Dcom.devexperts.rmi.removeStrackTraces=false" to disable the default behavior.
* [QD-1431] Update build to maven 3.9
* [QD-1430] [Schedule] Add new markets for EU exchanges

QDS 3.317:

* [QD-1428] dxFeed-OnDemand: Minor performance improvements
* [QD-1423] [Schedule] Update holidays for 2023

QDS 3.316:

* [QD-1421] [Schedule] Add holidays for 2023
* [QD-1418] Remove deprecated HTTP QD connector
  - BACKWARD-INCOMPATIBLE CHANGE: all HTTP QD connector classes are removed
* [QD-1420] Update log4j dependency to 2.17.2
* [QD-1419] dxFeed API: Remove deprecated News API
  - BACKWARD-INCOMPATIBLE CHANGE: all news related classes are removed
* [QD-1417] dxLib: Deprecate logging implementation based on log4j 1.x
  - Log4jLogging using log4j 1.x is deprecated and will be removed in the future.
  - Migrate to log4j2 or use its bridge to log4j 1.x.
* [QD-1416] dxlib: Change logging initialization order and try to initialize log4j2 first
  - BACKWARD-INCOMPATIBLE CHANGE: use "-Dlog.className=com.devexperts.logging.Log4jLogging"
    parameter to force using log4j 1.x logging (if both Log4j and Log4j2 are present in the classpath)

QDS 3.315:

* [QD-1407] [Schedule] Update Australian & UK holidays / Add Netherlands
* [QD-1395] [Schedule] Add SGX holidays and short days 2022
* [QD-1411] Create OptionSale record
* [QD-1412] LongHashMap.putIfAbsent shall handle null-values according to specification
  - BACKWARD-INCOMPATIBLE CHANGE: previous versions treated a (k,v)-pair with v == null as "present" and didn't put
    a new value. Current implementation will replace a null-value with provided new value.
    New behavior conforms to initially declared specification and consistent with default java.util.Map behavior
    for maps allowing null values.
* [QD-1410] Handle SocketTimeoutException in SocketAcceptor
* [QD-1408] Use TLS v1.3 and v1.2 for unit tests

QDS 3.314:

* [QD-1404] dxFeed API: Add missing fields to Profile event
  - added fields: beta, earningsPerShare, dividendFrequency, exDividendAmount, exDividendDayId, shares, freeFloat
* [QD-1406] Add support for arbitrary URLs to onDemand connector
  - ondemand connector accepts a comma-separated list of endpoint addresses, each represented in a form of full URL
    or a "host[:port]" format. The latter is equivalent to "http://host:port/MarketDataReplay" URL.
* [QD-1390] Create symbol range QD filter
  - added com.devexperts.qd.SymbolStriper class to API (with new filters)
  - see qds tools "stripers" and "filters" help article for more info

QDS 3.313:

* [QD-1398] Allow custom executor on InstrumentProfileCollector
  - allow to workaround API breaking change in [QD-1344]
* [QD-1397] Add types WARRANT & CFD to enum InstrumentProfileType
* [QD-1396] RMI: NegativeArraySizeException in RMI requests exception handling
* [QD-1394] QDS Tools: "help instruments" still mention MO.dat format after QD-1385

QDS 3.312:

* [QD-1382] Add field replacer which can assign value of one field to another
* [QD-1381] Add support for field replacers to all QD connectors
* [QD-1368] [Connector] Create 'delayed' codec
  - Output delay is specified with 'delay' parameter (in millis). Optional buffering limit may be defined by
    'bufferLimit' parameter (in bytes): "delayed[delay=20,bufferLimit=100k]+:7000"
* [QD-1392] [Schedule] Add new USA holiday Juneteenth
* [QD-1391] "Already unlinked" IllegalStateException in com.devexperts.qd.ng.RecordBuffer

QDS 3.311:

* [QD-1389] Deprecate HTTP QD connector (to be removed later)
  - HTTP connector is deprecated and will be removed in the future.
    Please contact dxFeed support if you are still using this functionality.
* [QD-1387] dxFeed webservice: Update jackson library dependency
* [QD-1385] QDS Tools: Remove CMEParser (support for CME MO.dat IPF)
* [QD-1344] InstrumentProfileReader has to check completeness of received profiles
  - NOTE: Instrument Profile Format now expects ##COMPLETE tag at the end of IPF file to check
    for the completeness of data at the application level!
  - InstrumentProfileWriter now adds ##COMPLETE tag at the end when writing IPF
  - InstrumentProfileReader now warns in the log on reading IPF without ##COMPLETE tag
    JVM parameter "-Dcom.dxfeed.ipf.complete=warn" can be used to control missing complete tag:
    * "ignore" - do nothing (for backward compatibility)
    * "warn" - show warning in the log (current default)
    * "error" - throw exception (will be future default)
  - IPF files created by QDS instruments tool will have the ##COMPLETE tag
* [QD-1386] RMI: large payload transfer optimization

QDS 3.310:

* [QD-1383] dxFeed webservice: Allow to set WebSocket send message size in JavaScript client
  - added "dx.feed.maxSendMessageSize" setter method (to be called before connecting)

QDS 3.309:

* [QD-1380] qds-tools: collector option "se" is not working
* [QD-1194] Leakage in InstrumentProfileCollector
* [QD-1376] [build] Class names duplicated in "All Classes" list in javadoc

QDS 3.308:

* [QD-1374] [build] License header checking fails on master branch
* [QD-1373] Update build to maven 3.6+ [fix war bundles]

QDS 3.307:

* [QD-1371] Update build to maven 3.6+
  - the minimum Maven version required for build promoted to 3.6.0
* [QD-1372] JMXEndpoint exposes authentication credentials in the log
* [QD-1370] [build] Git-history based check of copyright headers

QDS 3.306:

* [QD-1336] [Schedule] Add holidays and short days for 2022
* [QD-1325] Add holidays and shortdays for new countries into default "schedule.properties"
* [QD-1369] Update log4j dependency to 2.17.0
  - signal dependent projects using log4j v2+ for logging to update log4j to avoid CVE-2021-45105 vulnerability
* [QD-1326] Add ability to intersect sets of holidays in Schedule syntax.
  - New syntax: "...,*US" or "...,*20210101", like minus ("-") but for intersection.

QDS 3.305:

* [QD-1367] Update log4j dependency to 2.16.0
  - signal dependent projects using log4j v2+ for logging to update log4j to avoid CVE-2021-44228 vulnerability
* [QD-1335] DXFeedConnect sample incorrectly evaluates supported time series event types
* [QD-1334] dxFeedViewer installer missing required dependencies

QDS 3.304:

* [QD-1327] Relax qds-monitoring dependency of jmxtools
  - Important! "com.sun.jdmk:jmxtools" dependency in QD is now "optional" and will not be transitively included by
    default. Add this dependency manually to include it in your deliverable artifacts.
* [QD-1331] dxFeed webservice: Stop printing internal connection address on web page
* [QD-1330] Document licenses for the project dependencies
* [QD-1332] Replace LAF in dxfeed-viewer
  - JTattoo LAF is replaced with FlatLaf LAF
* [QD-1328] [dxScheme] External scheme overlay requires type of updated record's field
* [QD-1322] dxFeed API: Deprecate News API
  - News API (dxfeed-news.jar artifact) is deprecated and will be removed in future versions!
    Please contact dxFeed support if you are still using this API.

QDS 3.303:

* [QD-1316] [Schedule] Adjust NewYorkOTC trading hours
* [QD-1318] minify-maven-plugin errors in dxfeed-webservice module
* [QD-1320] dxlib: Add safe publishing to IndexedSet
* [QD-1276] dxFeed webservice: Service keeps expired sessions which leads to memory leaks
* [QD-1314] dxFeed webservice: Migrate to CometD 5.0.8 and Jetty 9.4.42
* [QD-1214] dxFeed webservice: Limit server message queue for slow reading clients
* [QD-1312] Improve Record filters

QDS 3.302:

* [QD-1277] dxFeed API: Make default Order source to support Full Order Book
* [QD-1313] QDS: Avoid warning logging for successful events
* [QD-1311] dxlib: IndexedMap removeAll/retainAll methods on entrySet/keySet behave inconsistently with remove/contains
* [QD-1310] dxlib: IndexedSet removeAll/retainAll methods behave inconsistently with remove/contains

QDS 3.301:

* [QD-1308] Deadlock between OnDemandConnector and DXEndpointImpl.StateHolder
* [QD-1210] dxlib: Update log4j2 version to 2.14.1

QDS 3.300:

* [QD-1302] New order source for SmallEx exchange: smfe
* [QD-1304] [Schedule] Schedule allows inconsistent session definitions
  - added warning in log for deprecated usage of 2400 instead of +0000 in time spec
* [QD-1303] dxFeed API: TheoPrice javadoc misses price event field description
* [QD-1300] dxFeed API: Add sample for working with live IPF
* [QD-1297] New order source MEMX

QDS 3.299:

* [QD-1293] Migrate from bintray to artifactory
* [QD-1295] RMI: Completed RMI tasks stay in connection' queue on disconnect

QDS 3.298:

* [QD-1291] dxLib: Add parameterized test factory for quarantined test
* [QD-1290] New order source iex
* [QD-1282] WebAPI Test Client
* [QD-1284] dxFeed webservice: skip license check for 3rd party JS libraries
* [QD-1289] Optimize symbol mapping tables on a subscription downsizing

QDS 3.297:

* [QD-1288] InstrumentProfileReader fails on IPF service request with compression
* [QD-1283] RMI requests waiting to send hanging forever on reconnect
* [QD-1268] [Schedule] Add default FRED schedule
* [QD-1286] [Schedule] Remove 20210403 holiday from US-BOND holiday list
* [QD-1285] Support QD public artifacts publication to dxFeed public Artifactory
* [QD-1247] Prototype of QD scheme configuration via machine readable schema file
  - Turned off by default. To turn it on, use "-Dscheme=ext:dxfeed" or other
    "ext:" specification.
* [QD-1281] dxFeed API: use "wide" mode by default
  - dxFeed API now behaves by default as if JVM parameter "-Ddxscheme.wide=true" was set.
    Old default behavior may be restored by running JVM with "-Ddxscheme.wide=false" parameter.
* [QD-1275] Cannot create installer for dxFeedViewer
* [QD-1278] dxFeed webservice: Log error details from REST requests
* [QD-1279] dxFeed webservice: Subscription REST calls should not start a session
* [QD-1273] Update files for year 2021 in copyright

QDS 3.296:

* [QD-1265] [Schedule] Add holidays and short days 2021
* [QD-1224] Schedule API: Trading sessions on holidays should be tied to first following business day
  - added schedule property "hds" to turn on HoliDay Strategy. Now supported only "jntdN" (Join Next Trading Day),
   where N is a single digit number of days to look ahead for trading day. If parameter is absent or N = 0 the default
   strategy is used.
* [QD-1271] dxFeed Viewer shall use wide decimal scheme by default
* [QD-1269] Logging.configureDebugEnabled ignores initially configured logging level
* [QD-1270] Use StringBuilder or direct String concatenation instead of StringBuffer
* [QD-1266] Support compilation with annotation processing in IDEA
* [QD-993] dxfeed-codegen module shall depend on published artifacts

QDS 3.295:

* [QD-1264] dxFeed API: Extend Trade and TradeETH events with new field dayId
* [QD-1225] [Housekeeping] Migrate tabs to spaces, CRLF to LF

QDS 3.294:

* [QD-1262] Handle MARS time synchronization tracker multicast initialization error on MacOS
* [QD-1257] Add connector option to ignore received subscription removal requests
  - added 'subscriptionKeepAlive' parameter accepting '0' (default behavior) and 'inf' (ignores unsubscription) values
* [QD-1261] Unsynchronized usage of WeakHashMap in SerialClassContext

QDS 3.293:

* [QD-1246] LongHashMap key_set,values,entry_set,mod_count fields should not be volatile
* [QD-1252] dxFeed API: Add accessor to flags constants for OrderAction in Order
* [QD-1254] QDS: Improve schema generation code
* [QD-1255] dxFeed API: Make "ExecutedSize" field in Order enabled for Full Order Book

QDS 3.292:

* [QD-1251] New order source for cboe C2 options
* [QD-1241] dxFeed API: Extend Order event for Full Order Book
  - JVM parameter "-Ddxscheme.fob=true" will add Full Order Book fields to Order record
  - List of Order sources that support Full Order Book can be customized by
    "-Dcom.dxfeed.event.market.impl.Order.fob.suffixes" parameter (default value="|#NTV")
* [QD-1244] QDS: Add support for long and timestamp fields in QD schema
  - Added support for long values and time in millis to com.dxfeed.annotation.EventFieldType
    (to enable long use @EventFieldMapping(type = EventFieldType.LONG) annotation)
  - Changed ordering of constants in com.dxfeed.annotation.EventFieldType
* [QD-1235] QD Core: Disable conflation for Order events
  - JVM parameter "-Dcom.devexperts.qd.impl.matrix.History.conflateFilter" manages which records are conflated;
    if "-Ddxscheme.fob=true" is specified, then default value is "!:Order*", else it is "*"

QDS 3.291:

* [QD-1239] New order sources glbx, ntv and xeur

QDS 3.290:

* [QD-1238] Add getZoneId to Timing instances
* [QD-1234] dxFeed API: Extend Underlying and Series events with putVolume and callVolume fields

QDS 3.289:

* [QD-1233] dxFeed API: Extend Trade and Profile events to support additional fields from QD records

QDS 3.288:

* [QD-1227] QD Core: Prevent hash matrix performance degradation in worst cases

QDS 3.287:

* [QD-1232] Keeping data or state in History collector leads to phantom subscription with Long.MAX_VALUE time after rehash

QDS 3.286:

* [QD-1231] HistorySubscriptionFilter performance improvement
* [QD-1228] Add connectOrder property to ClientSocketConnector
  - defines order of considering specified server addresses on connect/reconnect.
    Supported modes: shuffle (default), random, ordered, priority

QDS 3.285:

* [QD-1229] Improve reportCounters JMX operation to provide top stats of specified size
* [QD-1230] Keeping data or state in History collector leads to phantom subscription with Long.MAX_VALUE time in certain cases

QDS 3.284:

* [QD-1109] Sometimes getTimeSeriesPromise returns empty list

QDS 3.283:

* [QD-1219] Add logging of JMX console initialization errors
* [QD-1222] dxFeed webservice: Close session upon web-socket queue overflow
  - "maxQueue" servlet parameter in web.xml or "-Dcom.dxfeed.webservice.comet.DataService.maxQueue=<n>"
  JVM parameter can be used to control the queue size at which to disconnect stale client (default = 100000)
  (servlet parameter has priority over JVM parameter)
* [QD-1215] Add reconnect functionality to endpoints
* [QD-1223] New order source for FairX exchange: FAIR
* [QD-1221] [Tools] Instruments: transforms for lists
* [QD-1220] dxFeed API: Subscription leak when using filter with DXFeedTimeSeriesSubscription
* [QD-1218] dxFeed webservice: Cannot unsubscribe in time series subscription
* [QD-1217] Update year to 2020 in copyright and reformat import statements

QDS 3.282:

* [QD-1213] TimeFormat performance optimization for serial times processing
* [QD-1216] New order source for SmallEx exchange: SMFE
* [QD-1212] New order source for ABE exchange: ABE
* [QD-1211] [Schedule] Add holidays and short days for 2020

QDS 3.281:

* [QD-1209] EventTime is lost when reading tape files with MESSAGE time format
* [QD-1208] TimeSeriesEventModel.close may throw UnsupportedOperationException
* [QD-1203] AIOOBE in DXFeedMarketDepth sample
* [QD-1136] RMIRequest.cancelOrAbort may miss notifying the server
* [QD-1205] Network tests port allocation management

QDS 3.280:

* [QD-1202] dxFeed API: Add AnalyticOrder event
  - com.dxfeed.event.market.AnalyticOrder is introduced.
* [QD-1201] [Schedule] Short days robustness
* [QD-1160] Flaky test: RMIFunctionalityTest.testLargeRequests
* [QD-1172] Flaky test: RMIFunctionalityTest.testLargeResponses
* [QD-1175] Flaky test: RMIFunctionalityTest.testLargeRequestCancellations
* [QD-1195] Publish "shaped" connection codec.
  - Output throughput limit is specified with 'outLimit' parameter (as a bytes-per-second float number):
    "shaped[outLimit=100k]+:7000"
* [QD-1154] Flaky test: SocketRebindTest

QDS 3.279:

* [QD-1182] [Schedule] Add ability to specify schedule for short days
* [QD-1200] dxFeed API: Move OpenInterest field from DailyCandle to Candle
* [QD-1199] dxFeed webservice: Migrate to cometd 4.0.4 and jetty 9.4.18
* [QD-1196] SSLEngineImpl wrap/unwrap deadlock workaround
  - External synchronization is applied for internally used javax.net.ssl.SSLEnginge by default and can be controlled
    by JVM parameter "-Dcom.devexperts.connector.codec.ssl.synchronizeSSLEngine=true|false"
* [QD-1193] Deadlock: Indexer vs IndexerFunction initialization circular dependencies

QDS 3.278:

* [QD-1157] New order source for BATS EU: CEUX

QDS 3.277:

* [QD-1171] Add order record for BITIP top20 book
* [QD-1161] DXEndpoint.closeAndAwaitTermination hangs sporadically
* [QD-1159] [Schedule] Incorrect TR 2019 holidays
* [QD-1124] Change schedule.zip default location
  - new location: http://downloads.dxfeed.com/schedule/schedule.zip
* [QD-1131] MARS fails to join multicast group for synchronization tracker on Mac OS
* [QD-1142] Flaky test: LargeSubscriptionTest
* [QD-1158] Flaky test: JmxRmiTest.testRmiRestart
* [QD-1174] Tools: DebugDumpReader shall understand wide decimal and ignore unknown classes

QDS 3.276:

* [QD-1156] RMI: Memory leak of one-way requests on server side

QDS 3.275:

* [QD-1155] dxFeed API: OrderBookModel memory leak
* [QD-1153] dxFeed webservice: Split large messages into smaller ones in web sockets
  - messages are split into batches of 100, can be configured by JVM parameter
  "-Dcom.dxfeed.webservice.comet.DataService.messageBatchSize=<n>"
* [QD-1147] JMX RMI connection doesn't release used port after stop
* [QD-1152] Flaky test: LockTimeoutTest.testLockTooLongWarning
* [QD-1114] Tools: Tape file reader returns quotes partially when 'start' parameter isn't equal to the beginning of a file
* [QD-1139] dxlib: Marshalled shall not create extra copy of serial byte array during deserialization

QDS 3.274:

* [QD-1140] Flaky test: FileConnectorCorruptedTest
* [QD-1138] Data race in DXEndpoint state processing
* [QD-1135] Support limit on the number of connections per server port
* [QD-1133] Tests optimization

QDS 3.273:

* [QD-1132] Tools.invoke involving a FileConnector always takes at least one second
* [QD-1130] Automatic ServerSocket port allocation support for tests
* [QD-1128] qd-tools: ConnectTest takes too long
* [QD-1126] Add Order Record for ERISX exchange

QDS 3.272:

* [QD-1125] dxFeed webservice: Use session filter for one-time REST requests
  - not a public API: for internal use only

QDS 3.271:

* [QD-1121] dxFeed webservice: Add support for security checks
  - not a public API: for internal use only
* [QD-984] Improve DebugDumpReader to see HistoryBuffer state
  - A bug with wrong History "sub" information due to non-resolved enums is also fixed
* [QD-988] BUG FIX: Monitoring tests sometimes fall because the ports are already in use

QDS 3.270:

* [QD-1123] dxFeed API: Make CandleSymbol attribute classes Serializable
* [QD-1113] QD Core: RecordCursor.toString prints both double and wide decimal presentation of wide decimal fields
* [QD-1044] dxFeed API: Support CandlePriceLevel attribute
* [QD-1062] dxFeed webservice: Migrate to cometd 4.0.2 and jetty 9.4.14
  - Additional migration notes from CometD: https://docs.cometd.org/current/reference/#_migration_31_to_40
  - Additional migration notes from Jetty: https://www.eclipse.org/jetty/documentation/9.4.x/upgrading-jetty.html
* [QD-1116] dxFeed webservice: "Session" parameter is not working in REST API
* [QD-1115] Files are updated for year 2019 in copyright

QDS 3.269:

* [QD-1099] Make DXFeedSubscription and DXEndpoint implement AutoCloseable
* [QD-962] Some tests in AuthorizationTest do not check the declared functionality

QDS 3.268:

* [QD-1107] dxlib: Add util methods to find day ranges for certain number of weeks, months or years with proper alignment
* [QD-1106] BUG FIX: Runtime exception in glob pattern with 2 asterisks on symbol with non-ascii character

QDS 3.267:

* [QD-1105] dxFeed API: Move ImpVolatility field from DailyCandle to Candle
* [QD-1104] Schedule: US exchange closed 5th Dec 2018
* [QD-1103] Add Order Record for NFI exchange
* [QD-1102] RecordCursor.toString should print event flags
* [QD-1101] Fix delegation for IPFFilter
* [QD-1100] RecordBuffer shall compact arrays synchronously
* [QD-1098] BUG FIX: QD Core: History Snapshot protocol sends SNAPSHOT_SNIP flag with virtual time
    when second subscription breaks HistorySubscriptionFilter
* [QD-1097] dxFeed-OnDemand: NullPointerException on quering TnS with custom QD scheme
* [QD-1096] dxFeed webservice: Exception in JMX registration with multiple instances
* [QD-1092] dxlib: secure Java deserialization shall throw different exception and shall pass all arrays

QDS 3.266:

* [QD-1076] Support second asterisk in glob patterns in QD filters
* [QD-1090] Monitoring: JmxConnector couldn't be removed
* [QD-1093] QD Core: Auth session must be closed on connection close
* [QD-1095] dxFeed API: Improve support of WideDecimal
  - Run JVM with "-Ddxscheme.wide=true" to make all appropriate fields WideDecimal in DXFeedScheme
    + properties "-Ddxscheme.price=wide -Ddxscheme.size=wide" also work to fine-tune specific fields
  - DecimalField no longer supports multiplier parameter
  - Profile.Shares field is represented in direct shares in all APIs, including RecordCursor
    + it is no longer necessary to multiply or divide Profile.Shares by 1000 when working with APIs
    + on a wire (QTP binary format) Profile.Shares still use thousands notation in TinyDecimal form
      although it uses direct shares notation in WideDecimal form

QDS 3.265:

* [QD-760] RMI: Provide ability to define custom load-balancers
  - Custom QD RMI load balancer factories (subclasses of RMILoadBalancerFactory) can be configured via service loader.
    When a load balancer is to be created, the factories are consulted in order.
  - To support custom load balancing the advertisement filter is now supported on connection. Specify the
    '[advertise=...]' filter on the address of the agent side. Only the 'all' (all advertisement is distributed),
    or 'none' (no advertisement is distributed) values are supported.
  - Note: for custom load balancing to work on intermediate multiplexors one has to disable service advertisements
    sent to clients via [advertise=none] filter on multiplexor agent address. Otherwise default load balancing will
    kick in on the clients.
* [QD-1002] dxFeed webservice should support dxScript
* [QD-1088] dxFeed-OnDemand: Add support for regional TimeAndSale events

QDS 3.264:

* [QD-1036] dxlib: Add primitive type analogs of new Java 8 methods to LongHash collections
* [QD-1086] IPF: cmeproduct transform statement shall preserve option symbol layout
* [QD-1087] Improve network compatibility between WideDecimal and TinyDecimal instances

QDS 3.263:

* [QD-976] Introduce WideDecimal format
  - Run JVM with "-Ddxscheme.price=wide -Ddxscheme.size=wide" to make all price, size and volume fields WideDecimal

QDS 3.262:

* [QD-1081] Agent can loss data after resubscription
* [QD-1085] Endless reading of corrupted file
* [QD-1084] dxFeed API: CandlePeriod.toString is not parsable
* [QD-1083] dxFeed webservice: Invalid fields in Json serialization
  - Serialization format for XML and Json fixed: removed redundant fields, fields in Json are reordered
  according to XML format, refer to XML Schema (dxfeed-event.xsd) for changes.
* [QD-1074] dxFeed API: Add Time and Index fields to Series event, do not represent Expiration as time field
  - Index field isn't compatible with previous version (saved Series events shall be generated from scratch)
  - Index field contains internal information to distinguish events in series flow
* [QD-1072] dxFeed API: Add Time and Sequence fields to Underlying, TheoPrice events
* [QD-1038] QD shall limit number of historical data by default for missing Indexed and TimeSeries events
  - Introduced system properties in format com.dxfeed.api.impl.HistorySubscriptionFilterImpl.maxRecordCount.+'recordName'
     com.dxfeed.api.impl.HistorySubscriptionFilterImpl.maxRecordCount.Candle=8000
     com.dxfeed.api.impl.HistorySubscriptionFilterImpl.maxRecordCount.TimeAndSale=1000
  - Introduced system properties for event categories:
     com.dxfeed.api.impl.HistorySubscriptionFilterImpl.maxRecordCount.candle=8000
     com.dxfeed.api.impl.HistorySubscriptionFilterImpl.maxRecordCount.timeSeries=1000
     com.dxfeed.api.impl.HistorySubscriptionFilterImpl.maxRecordCount.indexed=Integer.MAX_VALUE
   - 'candle category' - Candle, Trade.*
   - 'timeSeries category' - Underlying, TheoPrice, Greeks, TimeAndSale, TradeHistory
   - 'indexed category' - records with QD time not in candle & timeSeries categories (Order* events, MarketMaker, Series)
  - In order to leave max record count for 'Candle' events back-compatible this record wasn't included in timeSeries category
  - Event max record count will be chosen in the next priority: 'event property' has bigger priority than 'category property',
    'category property' has bigger priority than 'old-fashioned property'
  - Old-fashioned system properties have lowest priority:
     com.dxfeed.api.impl.HistorySubscriptionFilterImpl.candleMaxRecordCount=8000
     com.dxfeed.api.impl.HistorySubscriptionFilterImpl.tradeMaxRecordCount=1000

QDS 3.261:

* [QD-1079] Fix flaky FileWriterTest.testFilesAreReleasedAsTimePasses
* [QD-1078] dxlib: TimeFormat shall format dates outside 0000-9999 year range as long values
* [QD-1077] dxFeed API: Mixed content error in Javadoc
* [QD-1039] [Webservice] Add qds-file.jar into dxfeed-webservice.war
* [QD-1070] Update jackson to 2.9.4
* [QD-1012] dxlib: Unescaped text in @Description annotations
* [QD-1069] dxFeedAPI: Add PrevDayVolume to regional Summary events

QDS 3.260:

* [QD-1065] Remove dependency on timetest library
* [QD-1066] BUG FIX: default negation of custom RecordOnly filters shall produce FastRecordFilter
* [QD-1067] dxFeed API: Use fractional sizes internally for aggregations and checks

QDS 3.259:

* [QD-1063] BUG FIX: TapeConnector stops working prematurely
  - DXEndpoint.Role.STREAM_PUBLISHER role is created to support tape writing at maximum speed
  - ConvertTapeFile sample is provided to demonstrate proper use of dxFeed API for tape conversion
* [QD-1064] dxFeed API: Implement support of fractions to size and volume fields in all events
  - Run JVM with "-Ddxscheme.size=decimal" to make size fields fractional (volume fields are always fractional)

QDS 3.258:

* [QD-1060] Prepare QD 3.258 release
* [QD-1058] Remove IDE-specific files from the repository
* [QD-1055] [Schedule] Add holidays for 2018
* [QD-1056] BUG FIX: RMI: Memory leak on server side during normal RMI operation
* [QD-1057] Files are updated for year 2018 in copyright
* [QD-1053] dxlib: Exception stack trace not logged with log4j2
* [QD-1059] dxFeed API: Add support of fractions to size and volume fields in all events

QDS 3.257:

* [QD-1051] dxlib: NPE on log event formatting
* [QD-1052] Add Order source for CFE (Order#CFE)
* [QD-1050] BUG FIX: only 2 levels of SSL-level authentication are supported

QDS 3.256:

* [QD-1049] Fix RMIChannelTest.cancelChannelTasks
* [QD-1048] QD Core: improve performance of record buffer copying
* [QD-1047] dxlib: Add more convenient methods to URLInputStream
* [QD-1046] Hide credentials in logs, management, monitoring, and display
* [QD-1045] Add Order source for ICE (Order#ICE)
* [QD-1042] dxlib: Default console logging with Log4j2 doesn't work
* [QD-1041] BUG FIX: Closure of channel's client-side(due to some reasons) doesn't lead to closure of inner-tasks
* [QD-1040] BUG FIX: Request closure inside of the channel leads to closure of this channel
* [QD-1034] [dxFeedViewer] Should work correctly with JRE8

QDS 3.255:

* [QD-1032] Add Order records for new sources
* [QD-931] RMIEndpoint shall support monitoring properties
* [QD-1027] BUGFIX: TLS protocols and cipher suites system property are not used in the SSLConnectionFactory
* [QD-1029] Improve performance of data formatting
* [QD-1030] Improve performance of instruments tool exclude operation
* [QD-1022] IPF: Authorisation issue in in and notin expressions
* [QD-1031] Migrate from manual license upgrade to maven license plugin
  - To add or update a copyright, use the command: mvn license:update-file-header
* Files are updated for new template in copyright

QDS 3.254:

* [QD-1020] dxFeed webservice: Migrate to cometd 3.1.1
  - Breaking changes: changed location of JavaScript files:
    + "\js\cometd\org\cometd.js" is moved to "\js\cometd\cometd.js"
    + "\js\cometd\jquery\jquery.cometd.js" is moved to "\js\jquery\jquery.cometd.js" (same with other cometd extensions)
    + "\js\dxfeed\dxfeed.context.js" is deprecated - use it only if you have problems with locating service URL
  - dxFeed JavaSciprt API: added ability to set authToken
  - Additional migration notes from CometD: https://docs.cometd.org/current/reference/#_migration_30_to_31
* [QD-1023] BUG FIX: Schedule: Bad schedule.properties format leads to unrecoverable errors
* [QD-1019] BUGFIX: NullPointerException in NotIPF filter
* [QD-1024] Tools do not accept several ipfs as source of symbols
* [QD-1025] dxFeed API: Add Buyer and Seller optional fields to TimeAndSale events
* [QD-1026] dxFeedAPI: Add regional TimeAndSale events

QDS 3.253:

* [QD-1021] dxlib: Allow Log4j2 as logging implementation
* [QD-1018] BUGFIX: SubscriptionProcessor stops working after exception

QDS 3.252:

* [QD-1005] Investigate enforcing specific version of TLS (TLS 2.1) programmatically in QD RMI
  - tls, ssl codecs and option "isTls' are always working through SSLConnectionFactory
  - New property "protocols" for tls codec is introduce in address string.
  - New property "cipherSuites" for tls codec is introduce in address string.
  - Now address line may look like:
    tls[protocols=TLSv1.2,cipher=SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA;TLS_EMPTY_RENEGOTIATION_INFO_SCSV]+:7777
* [QD-1015] [dxFeedViewer] Change default ipf-address protocol from http to https
* [QD-1013] dxlib: Add toString() to TypedMap and TypedKey
* [QD-1014] BUG FIX: JDK1.8.0_121 does't support script javascript in documentation comment
* [QD-1016] BUG FIX: Incorrect translation of close price from OnDemand to Summary record
* [QD-1017] BUG FIX: Spurious ULP formatting in IPF

QDS 3.251:

* [QD-1011] History does not use subscription filter which is specified as service
* [QD-1008] Schedule: Update Turkey holidays for 2017-2019 to schedule.properties
* [QD-1007] Improve CPU usage of idle SocketReader

QDS 3.250:

* [QD-995] Prepare QD for delivering to GitHub
* [QD-998] Add FreeFloat field to Profile record
* [QD-999] dxlib: Add specific factory methods to IndexedSet
* [QD-1001] QD unable to recover after I/O error
* [QD-1004] OnDemand stops replaying events at data block boundary

QDS 3.249:

* [QD-994] FileWriter writes invalid eventTime for "long" and "text" time formats
* [QD-997] QDHistory does not properly store nor transmit event time sequences

QDS 3.248:

* [QD-894] Update time-test to version 1.1
* [QD-987] DXPublisherTest sporadically fails
* [QD-990] Optimize QTP composer for "spurious return" of data/sub provider
* [QD-991] BUG FIX: RMIMessageAdapter does not honor contract for time-based aggregation which leads to data loss/delay

QDS 3.247:

* [QD-985] History transaction sporadically hangs in TX_PENDING state
  - Fixed bug with tracking of pending record count during processing in History. In rare cases when HistoryBuffer
    sweep crossed subscription time of the agents, the count was improperly tracked.
* Method getSessionVariables() on AuthSession rename to variables()

QDS 3.246:

* [QD-921] Add MDD's TimeReplacer functionality into FileConnector
  - New property "fieldReplacer" is introduced in FileConnector to configure field replacing strategies
    while reading data. Either single field replacer specification or list of specification,
    where each specification is enclosed in square [...] or round (...) brackets, can be used as
    "fieldReplacer" property value.
  - TimeFieldReplacer is introduced to provide an ability to replace SerialFieldType.TIME fields fields
    according to specified strategy. Specification of this field replacer should be in the following format:
    "time:<record_filter>:<configuration>", where "record_filter" is a RecordOnlyFilter and "configuration"
    is a configuration of replacing strategy.
  - Supported replacing strategies:
    + "current" - replaces time with current
    + "<time>"  - replaces time with specified
    + "+<time>" - increases time on specified delta
    + "-<time>" - decreases time on specified delta
* [QD-179] Connect tool: make it possible to specify few (more then one) subscription sources
* [QD-977] dxlib: QD Core: add methods and classes to allow faster sorting of RecordBuffer
* [QD-978] Increase default cache size in Schedule and Timing to 25000
* [QD-980] RMI: Fix RMIEndpoint.setAttachedMessageAdapterFactory to support legacy factories
* [QD-981] BUG FIX: dxFeed API: Parsing events from file sporadically fails
* [QD-974]  RMIChannelTest.testIntermediateResultChannel is not stable
* [QD-982] RMIChannelTest.testProgressDisconnect fails sporadically
* [QD-983] SymbolSetFilter.valueOf should return dynamic filter in case of given dynamic ipf-filter
  - Add dynamic delegate support to SymbolSetFilter
* Added setSubject(Object subject) method on AuthSession

QDS 3.245:

* [QD-127] dxFeed API: Custom user-defined events
  - New package com.dxfeed.annotation is introduced with annotations to mark classes for their mapping to QD.
    + Use @EventTypeMapping to mark event type (must directly or indirectly implement EventType interface)
    + Use @EventFieldMapping on getXXX methods to customize types or field names
    + Use @ClassValueMapping to define serializations of enums and other value types
  - Module "dxfeed-codegen" is now published to Maven and represents and annotation processor to generate the
    corresponding mapping during compilation phase. Add dependency on this module on "compile" scope where needed.
* [QD-915] QD RMI: RMIServiceMethod annotation with support for proxy-based OneWay invocations
* [QD-833] RMI Invoke tool shall supported targeted requests
  - Use <name>@<id> when specifying invocation target, where "<name>@<id>" of the service can be found
    using "Services" tool, for example.
  - Type recognition for Invoke tool is also fixed. Java array type names like "int[]" can now be specified
    in argument or result types or par with internal Java class names like "[I".
* [QD-963] BUG FIX: Broken support for 4 letters order sources
  - See QD-898. It was broken in QDS 3.244.
* [QD-954] RMIChannelTest is highly timing dependent
* [QD-955] Split RMICommonTest into two test suite
* [QD-966] Use parametrized tests in all RMI-xxx tests for regular and channel-testing variants
* [QD-970] ParallelWriter should exit correctly when its thread is interrupted
* [QD-973] BUG FIX: IPFFilter update check does not authenticate properly
* [QD-972] BUG FIX: MessageDescriptor should contain actual message type id after parsing

QDS 3.244:

* [QD-385] dxFeed API: Introduce getEventTime
  - EventType.get/setEventTime methods are introduced and are implemented by all events
  - DXEndpoint.DXENDPOINT_EVENT_TIME_PROPERTY="dxendpoint.eventTime" is introduced to turn on event-time support
  - Event time is supported when using OnDemandService and when reading/writing from/to files
  - Note, that time is 0 when not enabled on DXEndpoint level or when receiving data over network
* [QD-386] Configure DXFeedScheme to include or exclude optional fields
  - All optional fields in DXFeedScheme are controllable via system properties or when building DXEndpoint with Builder
  - Note, that when DXEndpoint.Build has any property that controls scheme, then it will create its own custom
    data scheme based on that configuration, instead of using a default data scheme
  - DXEndpoint.DXSCHEME_ENABLED_PROPERTY_PREFIX="dxscheme.enabled." property prefix is introduced
  - The general format of those properties is:
    dxscheme.enabled.<property_name>=<event_name_mask_glob>
  - For example, Quote.BidTime and Quote.AskTime are optional properties (on by default). They can be both
    turned off (if not needed, to save network traffic) by setting two properties
    + dxscheme.enabled.BidTime=
    + dxscheme.enabled.AskTime=
  - Note, that "EventTime" property is special. It cannot be turned on/off this way. It is addressed in QD-385
  - Default scheme (DXFeedScheme.INSTANCE) is configured by "dxscheme.*" SystemProperties
* [QD-847] dxFeed API: Introduce nanoTime in key market events
  - Events with business time (getTime method) now also have get/setTimeNanoPart methods, this applied to:
    Quote, TimeAndSale, Trade, TradeETH, Order, and SpreadOrder
  - Quote event also features getTime method now, which is defined as max(getBidTime(), getAskTime())
  - Quote and Trade events also have get/setSequence now
  - DXEndpoint.DXSCHEME_NANO_TIME_PROPERTY="dxscheme.nanoTime" property is introduced.
    Setting this property to "true" is a shortcut for:
    + dxscheme.enabled.Sequence=*
    + dxscheme.enabled.TimeNanoPart=*
* [QD-674] QD Core API shall provide QDCollector.Builder interface to define extensible list of collector attributes
  on creation
  - This provides future-extensible set of options that can be specified during creation of QDCollector via
    QDCollector.Builder.withXXX methods
* [QD-675] QD Core shall have ability to store and transmit event time stamps
  - QDCollector.Builder.withEventTimeSequence is introduced
* [QD-677] Tools shall support collectors with eventTime
  - All tools with -c|--collector option support additional [ts] attribute in collector specification that turns on
    QD-675 support of eventTime in collectors and its transfer over the network connections
  - Syntax for all collector options values in update, so a stream with "storeEverything" mode is now specified
    as "stream[se]", while a legacy "stream-se" is still supported for backwards compatibility
* [QD-839] dxFeed API for "storeEverything" mode
  - DXEndpoint.DXENDPOINT_STORE_EVERYTHING_PROPERTY="dxendpoint.storeEverything" property is introduced.
    Setting it to "true" turns off "storeEverything" mode in all applicable collectors
* [QD-840] QDS "tape" connector
  - It supports "tape:<file>[<options>]" connector address and it is a part of "qds-file.jar" module
  - It is designed to be used with DXFeed API in order to enable writing events to files
  - DXEndpoint.awaitProcessed method is introduced to wait until all data is written to file (if needed)
  - See com.dxfeed.sample._simple_.WriteTapeFile sample file
* [QD-863] DXFeed API for OnDemand: Shall provide eventTime
* [QD-952] dxlib: Remove class from TypedKey constructor
  - TypeMap.set method is also changed to void method according to the established pattern and consistent with
    its use so far.
* [QD-959] dxlib: Introduce TraceLogging as a unified approach for finding concurrency bugs during tests
  - Trace logging infrastructure is designed in such a way that it does not consume CPU time when it is not
    needed. It is turned on when assertions are turned on.
  - Tests can be run with TraceRunner, so that a detailed in-memory trace log is dumped if test does not
    complete successfully. Use "@RunWith(TraceRunner.class)" before JUnit4 tests.
  - Run JVM with "-DTraceRunner.DumpAlways" to print trace log even when test completes successfully.
    This is useful during investigation of tests that fail only periodically to compare failing
    trace with a trace on a successfully passing test.
* [QD-942] Fix infinite loops in RMI Tests and resource allocations
* [QD-944] When the Multiplexor is closed, some threads are not closed
* [QD-945] SSLConnectionFactory creates ServiceExecutor which never shuts down
  - LoggedThreadPoolExecutor and ExecutorProvider are introduced in dxlib (com.devexperts.util package)
* [QD-960] BUG FIX: RMI sends advertisement messages before protocol descriptor
  - It causes routing failures, as advertisements get ignored (as coming from anonymous connection).
  - This bug was introduced in 3.243.
* [QD-947] BUG FIX: RMI: NPE in MessageProcessor
* [QD-948] BUG FIX: AuthManager does not always cancel authentication request on close
* [QD-949] BUG FIX: Multiple RMI Channel executions may block RMI execution pool
  - The RMI channel scheduling logic is fixed. Channel task executions are scheduled for execution into the
    pool on when previous execution completes, so that they all sequential and do not necessarily block
    execution threads
  - As an additional change, ONE_WAY RMI tasks do not automatically become complete when their RMIService.processTask
    method completes. They may suspend and resume their execution just a other RMI tasks do. This also simplifies
    the logic that is needed to forward requests of all types (no special handling for ONE_WAY requests is needed).
    See com.devexperts.rmi.impl.ForwardService
* [QD-957] Tools: Connect doesn't work with subscription-mirroring and Stream collector
* [QD-958] BUG FIX: QD Core: distribution of very large data sources via History fails
  - The bug happened when more than 8191 records for single symbol and different times are distributed in a single
     batch. Distribution actually stops after 8191 records leaving the rest of incoming batch undistributed.
     It was introduced by QD-720 in version 3.203.

QDS 3.243:

* [QD-938] qd-auth: migrate to Promise
* [QD-937] Move promise package into a separate module
* [QD-940] Move core auth classes to com.devexperts.auth package
  - This affects AuthToken and AuthSession classes. They also move to a separate internal module called "auth",
     which is still a part of "qds.jar", though.
* [QD-929] BUG FIX: LoginManager invokes QDLoginHandler.login() more often than necessary
* [QD-930] BUG FIX: MessageComposer completes the request with the wrong type of timeout
* [QD-926] BUG FIX: ConsoleLoginHandler asks to enter login/password for each connection without the need
* [QD-925] BUG FIX: Striped QD collector does not work
* [QD-920] Proxy invocation handler must log requests which complete exceptionally
* [QD-917] BUG FIX: QD RMI Leaks closed RMITaskImpl instances in certain cases
  - This happens on server side when RMI execution task is closed/canceled before it had
    started execution and for all OneWay requests.
  - This bug was introduced in 3.236
* [QD-916] BUG FIX: Potential NPE in AgentAdapter.prepareProtocolDescriptor
* [QD-918] BUG FIX: Legacy custom authentication Sample code is broken
  - Because "auth" is not a standard supported property, Sample adjusted to use "customAuth"
* [QD-932] BUG FIX: RMI: Potential delay of QD messages due to lost "more messages flag"
  - This bug was introduced in QDS 3.230
  - Unit test to reproduce this problem is created
  - Migrated to JUnit 4.12 as part of this change
  - To aid in problem reproduction, there's a new connection property called "initialHeartbeatPeriod" (default is 0.5s) that sets
    the initial time between subsequent heartbeats, which later exponentially grows up to "heartbeatPeriod" (default is 10s)
  - All "xxxPeriod" connection properties (initialHeartbeatPeriod, heartbeatPeriod, and heartbeatTimeout) are now configurable as
    having "time period" type, thus they are specified in seconds by default and accept ISO units
* [QD-935] BUG FIX: RMICommonTest.testWithTLSAndCustomTrustManager does not work on Linux
  - Sample certificates regenerated
* [QD-936] BUG FIX: ServerSocketConnector does not notify listeners on its CONNECTED state when it starts accepting connections
* [QD-919] Improve speed of tests with RMI
* [QD-933] BUG FIX: RMICommontTest.connect should not burn 100% CPU while waiting for "CONNECTED" status on server socket
* [QD-939] Change default NIO select timeout to 100ms
* Add NewYorkETH() default schedule
* Add NewYorkOTC() default schedule

QDS 3.242:

* [QD-860] Support authorization in QDS connectors
  - New classes in com.devexperts.qd.qtp.auth package are introduced. MessageAdapter supports basic and custom authorization,
    so that any QTP connection can be secured to require authorization. In addition to that, AgentAdapter supports channel
    configuration that is specific to each user.
  - Authentication framework building blocks are
    + accessToken - user + password, bearer token and other user information on the client side. Represented by "AuthToken" class.
    + Permissions - unique data access permissions (can be configured per client).
    + Session - per-user entity on the server side, which determines user permissions. Represented by "AuthSession" class.
      NOTE: session data should never be sent to a client.
  - Extensibility point for authentication is a pair of QDAuthRealmFactory and QDAuthRealm interface implementations.
    + QDAuthRealmFactory - creates QDAuthRealm based on the auth string, if the auth string is recognized by this factory.
      Auth string could be specified in the address. For example: <host>:<port>[auth=<authString>].
      (Typical auth string starts with some scheme prefix based on which factory checks if the auth string is recognized)
    + QDAuthRealm - performs authentication based on the access token. After authentication is finished,
      passes created user session or failure reason to the callback.
    + ChannelShapersFactory - is used by AgentAdapter and creates the corresponding ChannelShapers based on the AuthSession provided
      by the corresponding QDAuthRealm.
    Several “QDAuthRealm” and “ChannelShapersFactory” instances could be used on the server side at the same time.
    Generally QDAuthRealm puts some special parameters to the created session based on which ChannelShapersFactory detects
    if it should process a given session.
  - Built-in implementation of authorization framework
    + BasicAuthRealm - receives authString, which is a set of parenthesis-separated <user>:<password>[:<channels>] descriptors or a
      file name that must have ".config" prefix and contains <user>:<password>[:<channels>] descriptor lines, using "#" to comment lines
      if needed. Here <channels> are recognized only by AgentAdapter (e.g., second address of qds multiplexor tool) and follow the
      same syntax as "channels" agent adapter property (see QD-655).
  - Examples
    + To create a basic password-protected multiplexor use:
        qds multiplexor <uplink>:<private-port> :<public-port>[auth=<user>:<password>]
    + To create a multiplexor that gives all access to admin user, but only restricted access (say only ticker with 1 sec
      update interval) use:
        qds multiplexor <uplink>:<private-port> :<public-port>[auth=(admin:secret)(user:password:ticker@1s)]
    + To put the above configuration into a file create "myauth.config" file with "admin:secret" and "user:password@1s" lines and use:
        qds multiplexor <uplink>:<private-port> :<public-port>[auth=myauth.config]
* [QD-876] Support custom login handlers in QDS connectors
  - New classes in com.devexperts.qd.qtp.auth package are introduced. MessageAdapter supports basic and custom login protocols.
    Custom login protocol may be multi-factor and challenge-based to any degree of complexity using RMI requests to transfer
    credentials to the server side and receive access token.
  - Extensibility point is a pair of QDLoginHandlerFactory and QDLoginHandler interface implementations.
    + QDLoginHandlerFactory - creates QDLoginHandler based on the login string, if the login string is recognized by this factory.
      Login string could be specified in the address. For example: <host>:<port>[login=<loginString>].
      (Typical login string starts with some scheme prefix based on which factory checks if the login string is recognized)
    + QDLoginHandler - performs the login procedure and transmits auth token to server side.
  - Built-in implementations of login handlers
    + BasicLoginHandler (default) - uses basic authorization based on <user>:<password> pair
    + ConsoleLoginHandler - uses console or System.in() to login and password
  - Examples
    + To use basic user and password login the old-style configuration is still supported
        qds connect <host>:<port>[user=<user>,password=<password>]
    + The above can be also written using a new "login" property
        qds connect <host>:<port>[login=<user>:<password>]
    + To avoid exposing credential on the command line, the console login may be requested
        qds connect <host>:<port>[login=console]
* [QD-548] Tools: Provide API for multiplexor tool to install user-defined authentication handler
* [QD-913] dxlib: Make TypedMap thread-safe
* [QD-906] Tools: Implement dxFeed Plotter Tool

QDS 3.241:

* [QD-908] BUG FIX: RMI-subject is not forwarded through intermediate nodes
* [QD-872] RecordBuffer shall reset cursors on clear/compact for better safety
* [QD-878] dxlib: Services shall understand hash-comments in services files
* [QD-881] QD Core: improve performance of stream contract
* [QD-882] QD Core: improve performance on signalling socket writing thread
* [QD-885] QD Core: make striping consistent for cipher and symbol
* [QD-887] QD Core: Safe flushing during examine does not always work as expected.
* [QD-883] dxlib: Do not pool ObjectInputStream instances of large size
  - This avoid "memory leaks" (too much retained memory) when deserializing very large objects.
    Buffers are pooled only for deserializing object less than 16K.
* [QD-884] BUG FIX: Leaked instances of DXFeedImpl via ThreadLocal
* [QD-897] BUG FIX: DXEndpoint.awaitNotConnected/closeAndAwaitTermination does not always guarantee that all data was processed
  - The fix changes behavior of DXEndpoint.awaitNotConnected method so that is waits until all pending state change notifications
    (that are scheduled during invocation of connect) get processed in addition to the state becoming not connected.
* [QD-888] BUG FIX: QTP binary parser fails to parse binary data with event time fields unless explicitly configured to
  - Now all fields with names starting with "Event" string that are described in DESCRIBE_RECORDS message at the beginning
    of the record are considered to be built-in "event fields". For compatibility with future protocol extensions
    they are always transmitted as a part of the QD_XXX_DATA messages even in events marked with REMOVE_EVENT flag,
    which have custom data serialization format (only long time is transmitted).
* [QD-890] BUG FIX: QD Core: connection filters are not properly transmitted to other side.
  - This bug was introduced a few years ago and caused increased (not neccessary) traffic over the network.
* [QD-880] BUF FIX: dxFeed JS API: Access to Greeks event does not work
* [QD-892] BUG FIX: Removal of events from history using SNAPSHOT_XXX flags does not update "storage" stats properly
* [QD-893] BUF FIX: QD History fails on assertion when loading data with storeEverything mode without subscription
* [QD-896] BUG FIX: QD History enters into invalid "TX_PENDING" state in storeEverything mode
* [QD-895] Turn on history snapshot mode on any event with new SNAPSHOT_MODE flag to facilitate snapshot data upload with qds post
  - The new SNAPSHOT_MODE flag is never sent by multiplexors to downstream data subscribers. It is explicitly reserved for data uploads
    from files with "qds post" or for data servers that use QD History in "storeEverything" mode as their primary data storage engine.
  - The recommended pattern for incremental data uploads to this kind of data storage engine is:
     1. Send event with time=Long.MAX_VALUE (or larger that any valid time) and flags=REMOVE_EVENT,SNAPSHOT_MODE to
        turn on snapshot mode in History without dropping any data that might have been already there from previous upload batch.
     2. Send data events (in order of decreasing time for better efficiency).
     3. Send event with time=0 (or lower than any valid time) and flags=REMOVE_EVENT,SNAPSHOT_SNIP to indicate that
        the data that was send should be considered to constitute a consistent snapshot for any subscriber (with any time of subscription).
  - Care should be taken not to upload data concurrently from multiple data sources with the above SNAPSHOT_MODE approach, or else
    data subscribers might see inconsistent snapshot or data (with only partial data set).
  - Note, that if QD History is populated with data is legacy mode first and then snapshot mode is enabled (either with SNAPSHOT_BEGIN or
    with SNAPSHOT_MODE) then all existing data subscribers (agents) will receive snapshot from scratch starting from SNAPSHOT_BEGIN event.
    There is no optimization to forward SNAPSHOT_MODE event downstream (it is never sent by QD History itself).
* [QD-879] Misc QD filter performance optimizations
  - Optimize "!<smth>" filter expressions by embedding negation code ("boolean negated") directly into various filter implementations.
     + QDFilter.negate() method is introduced.
     + NotFilter removes double-negation.
     + And/OrFilters implement De Morgan's laws.
     + SymbolSetFilter, PatternFilter, ProductSymbolFilter, and ForexSymbolFilter implement built-in support for negation (for performance reasons).
  - QDFilter.getSyntaxPrecedence() is introduced to stream-line automated QDFilter.toString() implementation with proper parenthesis.
  - Optimize very-small symbol set filters (one-two symbols) to avoid computing hash codes.
  - Optimize pattern filters with symbol-set kind even when they are not part of OR/AND expression (a-la optimization of fast record filters)
  - Optimize pattern filter impl by replacing boolean[][] with int[] (one array with bit sets)
  - Fixed a bug related to parsing of quoted pattern filters like "[A]or[B]" ("or" should not be treated as keyword here)
* [QD-889] Switch to Java 8 source code level
  - IndexedSet is updated to better support Java 8 lambdas: New functional interfaces are introduced:
    IndexerFunction, IndexerFunction.IntKey, and IndexerFunction.LongKey. There are public static
    create(...) methods in classes IndexedSet, SynchronizedIndexedSet, and IndexedMap. These create methods
    take functional interfaces as parameters and can be used for one-line creation of an appropriately typed instances.
    For example:
     + IndexedSet<Class<?>, Object> objectsByClass = IndexedSet.create(Object::getClass);
     + IndexedSet<Integer, Color> colorsByRGB = IndexedSet.create(Color::getRGB);
     + IndexedSet<Long, Instrument> instrumentsById = IndexedSet.create(Instrument::getId);
  - All dxfeed-samples are cleaned up for Java 8 source level (using closures and diamonds as needed)
  - com.dxfeed.promise javadoc is updated with lambdas in the sample code.
* [QD-903] Fix javadoc style for Java 8 javadoc tool
* [QD-902] Fix javadoc link problems
* [QD-898] dxFeed API: OrderSource now can use up to 4 alphanumeric characters.
  - There are changes that break compatibility of code that relied on order source limitations or on order index format.
* [QD-900] dxFeed API: Normalize Flags and EventFlags representation.
* [QD-834] BUG FIX: Tools: FileWriter is not working after failure
* [QD-911] BUG FIX: Striped QD collector does not correctly implement agent's snapshot provider
* [QD-905] dxFeed API: Add tick direction to Trade and TradeETH events
* [QD-907] dxFeed API: Create accessor to flags constants and normalize flags operations
* [QD-909] dxFeed API: Add DayTurnover to Trade and TradeETH events
* [QD-864] dxFeed API: Improve support for custom record mappings
* [QD-910] dxFeed API: Add Sequence to Trade and TradeETH events
* [QD-912] Undeprecate DataRecord.getMapping() method

QDS 3.240:

* [QD-874] ExecutionManager must be removed from HashMap, when the RMIChannel is closed
* [QD-856] RecordBuffer may contain non-zero values beyond limit
* [QD-875] dxFeed API: add method DXEndpoint.disconnectAndClear
* LostSubscriptionTest made stable to thread timing issues

QDS 3.239:

* [QD-866] Logged agent must log subscription going through addSubscriptionPart
* [QD-867] TextQTPParser shall understand date-only time specification history subscription
* [QD-868] BUG FIX: Agent aggregation period does not work properly with socket connectors
* [QD-869] BUG FIX: NoSuchElementException in ClientSocketSource.getLocalAddresses(), local-address priority fails silently
* Minor performance improvements in History collector impl -- avoid unnecessary notifyAll() calls that skew profiling results
* [QD-870] BUG FIX: dxFeed API: IPF: Error reading empty lines in some cases.
* [QD-871] dxFeedScheme: MarketMaker shall contain counts of individual orders
* [QD-862] BUG FIX: DXFeed API Ignores exceptions thrown from DXFeedEventListener.eventsReceived

QDS 3.238:

* [QD-861] Deadlock between QDEndpoint$Lock in RMIEndpointImpl.getRMILoadBalancerFactory and
  ClientSideServices lock in RMIClientImpl.removeConnection
* [QD-832] QD RMI Shall have ability to limit default Java Serialization to a white-list of classes
* [QD-857] dxFeedScheme: OpenInterest field in Fundamental record shall be limited to composite only
* Files are updated for year 2016 in copyright

QDS 3.237:

* [QD-843] BUG FIX: ConcurrentModificationException in MARSScheduler.cancel
* [QD-848] dxFeed API: Add and update rounding methods in PriceIncrements
* [QD-849] Tools: Instrument tool performance option shall work for read option.
* [QD-850] Schedule: add system property to control cache limit
  - -Dcom.dxfeed.schedule.cache=1000 as default
* [QD-851] BUG FIX: current message shall be properly aborted upon error or session reset
* [QD-852] dxFeed API: Summary shall contain PrevDayVolume (composite only) and OpenInterest shall be limited to composite only.
* [QD-825] {PATCHED} dxFeed API shall support integer Candle Count fields in scheme
  - fixed bug for CandleMapping.getCountDecimal (this method was not used before, so a bug had no effect)
* [QD-853] BUG FIX: RMI: Deadlock between ClientSideServices and QDEndpoint$Lock
  - as an additional bonus, an additional problem was fixed, where auto-created Executor could have been lost
    (not shutdown) when custom Executor was set after the auto-created was was already used.
* [QD-854] dxFeed API: Order shall contain count of individual orders

QDS 3.236:

* [QD-842] Schedule: update holidays and short days
* [QD-838] dxFeed API: OrderBookModel incorrectly processes change of lot size
* [QD-825] dxFeed API shall support integer Candle Count fields in scheme
* [QD-836] Redundant libs in dxfeed-samples-assembly.zip and dxfeed-webservice.war
* [QD-605] RMI Channels
    - There is a concept of RMI channel this is opened between client and server in both direction on each request and task respectively.
    - Channel opens automatically when sending requests (except ONE_WAY request).
    - Inside the channel can send requests in both directions.
    - Processing of internal requests carried out by means of handlers (instances of RMIService).
    - Internal requests are processed sequentially for each channel.
* [QD-828] dxFeed API: IPF: Improve performance of reading IPF from file.
* [QD-771] Tools: FileWriter shall release completed files as time passes
  - Use the following system property to set a maximum open factor for tape files,
    i.e. if tape file is opened during equal to or more than splitTime * FACTOR then it will be closed.
    + com.devexperts.qd.qtp.file.maxOpenFactor (default value is "2")
* [QD-535] BUG FIX: FileConnector repeatedly tries to read a file that is already deleted or corrupted
* [QD-811] dxFeedViewer: Refactor and commit latest changes in dxfeed-viewer

QDS 3.235:

* [QD-809] Dgen: move to DXLIB project group
* [QD-823] BUG FIX: IPF: InstrumentProfileConnection does not read instruments from old services.
* [QD-824] dxFeed API: Make Greeks a TimeSeriesEvent with Time and Sequence.
merged from 3.207 hs branch:
* [QD-820] BUG FIX: QD Connectors shall throw exception when ')' is missing in address
* [QD-804] BUG FIX: Dynamic IPF filter: ipf changes were not applied
  - The bug was reproducing when new connection is established after update of the filter.
    Filter was not updating in the captured channels configuration
* [QD-822] BUG FIX: dxFeed API: Symbol attributes mishandled for regional symbols.

QDS 3.234:

* [QD-816] BUG FIX: Event flags are not sent over the network connection
  - The merge of "hs" and "rmi" branches in 3.230 broke history snapshots functionality
* [QD-817] DXFeed API: make all executor threads "daemon"

QDS 3.233:

* [QD-815] Schedule: update holidays and short days
merged from 3.206 hs branch:
* [QD-812] BUG FIX: Post tool does not wait for protocol descriptors (event flags are not sent immediately after connection establishment)
  - Was the real culprit behind [QD-808] BUG FIX: Event flags are not sent immediately after connection establishment
* [QD-813] BUG FIX: Writing objects to BYTE_ARRAY fields fails
  - Was introduced by [QD-387] Use record description from receiving data distributor
* [QD-814] BUG FIX: Some dxFeed samples are failing when trying to addEventListener
  - Was introduced by [QD-791] dxFeed API: Throw IllegalStateException when trying to addEventListener

QDS 3.232:

* [QD-807] Redirect tests output to separate files on maven build
* [QD-779] Javac plugin for automated generation of Description annotations from Javadocs
merged from 3.174 rmi branch:
* [QD-796] A one-way RMIRequest fails when sending
* [QD-803] RMIEndpoint does not release the resources after RMIEndpoint.close()
merged from 3.204,3.205 hs branch:
* [QD-801] QDS API: Introduce RecordCursor.Owner.setAs(RecordCursor) method
* [QD-802] QDS Message connectors shall report "connectors_closed" rate to MARS
* [QD-808] BUG FIX: Event flags are not sent immediately after connection establishment (random effect)
* [QD-776] dxFeed REST API shall log "events" requests and responses
* [QD-775] BUG FIX: dxFeed REST API: Memory leak on timed-out events resource request
* [QD-788] dxFeed API: Introduce DXFeed.getXXXIfSubscribed methods
* [QD-787] dxFeed REST API: Support requests with timeout=0
* [QD-789] BUG FIX: dxFeed API: Subscription change notification for publisher should
           not be conflated on fast subscription remove/add
* [QD-791] dxFeed API: Throw IllegalStateException when trying to addEventListener
    on non-empty and attached DXFeedSubscription
* [QD-792] BUG FIX: NPE and connection reset when subscriber use older QD (same scheme)
* [QD-794] Use while-guarded LockSupport.park in HistorySnapshotMTStressTest
* [QD-664] BUG FIX: dxFeed API: ConcurrentModificationException during DXEndpoint.close().
* [QD-709] NIO Connector: Better internal statistics

QDS 3.231:

* [QD-782] BUG FIX: Minor memory leak in OrderBookModel

QDS 3.230:

* initial merge of rmi & hs branches onto trunk

--- hs branch ---

QDS 3.207:

* [QD-820] BUG FIX: QD Connectors shall throw exception when ')' is missing in address
* [QD-804] BUG FIX: Dynamic IPF filter: ipf changes were not applied
  - The bug was reproducing when new connection is established after update of the filter.
    Filter was not updating in the captured channels configuration
* [QD-822] BUG FIX: dxFeed API: Symbol attributes mishandled for regional symbols.

QDS 3.206:

* [QD-812] BUG FIX: Post tool does not wait for protocol descriptors (event flags are not sent immediately after connection establishment)
  - Was the real culprit behind [QD-808] BUG FIX: Event flags are not sent immediately after connection establishment
* [QD-813] BUG FIX: Writing objects to BYTE_ARRAY fields fails
  - Was introduced by [QD-387] Use record description from receiving data distributor
* [QD-814] BUG FIX: Some dxFeed samples are failing when trying to addEventListener
  - Was introduced by [QD-791] dxFeed API: Throw IllegalStateException when trying to addEventListener

QDS 3.205:

* [QD-801] QDS API: Introduce RecordCursor.Owner.setAs(RecordCursor) method
* [QD-802] QDS Message connectors shall report "connectors_closed" rate to MARS
* [QD-808] BUG FIX: Event flags are not sent immediately after connection establishment (random effect)

QDS 3.204:

* [QD-776] dxFeed REST API shall log "events" requests and responses
* [QD-775] BUG FIX: dxFeed REST API: Memory leak on timed-out events resource request
* [QD-788] dxFeed API: Introduce DXFeed.getXXXIfSubscribed methods
* [QD-787] dxFeed REST API: Support requests with timeout=0
* [QD-789] BUG FIX: dxFeed API: Subscription change notification for publisher should
           not be conflated on fast subscription remove/add
  - New protected method DXFeedSubscription.shallNotifyOnSymbolUpdate is introduced. It can be overriden to
    change the behavior of DXFeedSubscription with respect to the repeated calls to addSymbols with the
    same symbols (whether to notify installed ObservableSubscriptionChangeListener instances or not).
  - The ObservableSubscription implementation that is returned by DXPublisher.getSubscription now generated
    repeated symbolAdded notification to make sure that data provider has a chance to publish an event when
    subscription disappears, cached data is lost, and subscription reappears again.
* [QD-791] dxFeed API: Throw IllegalStateException when trying to addEventListener
    on non-empty and attached DXFeedSubscription
  - This protects from hard-to-catch bugs with potentially missed events
* [QD-792] BUG FIX: NPE and connection reset when subscriber use older QD (same scheme)
* [QD-794] Use while-guarded LockSupport.park in HistorySnapshotMTStressTest
* [QD-664] BUG FIX: dxFeed API: ConcurrentModificationException during DXEndpoint.close().
* [QD-709] NIO Connector: Better internal statistics
  - "readerPool" and "writerPool" MARS nodes now have the following sub-nodes:
     - "size" - the size of the thread pool
     - "active" - the number of active threads in the pool. Larger numbers indicate larger load.
     - "sockets_registered" - the number of sockets registered (waiting) in selector for the corresponding operation
        For readerPool this should be typically equal to the number of connections.
        For writerPool this should be zero, unless some outgoing sockets are overloaded and cannot accept by outgoing bytes.
     - "sockets_selected" - the average number of sockets selected. Larger numbers indicate larger load.
     - "time_app" - the distribution of time (in ns) spent in application protocol code to retrieve/process bytes.
     - "time_busy" - the distribution of time (in ns) selector thread is busy with selected sockets.
     - "time_wakeup" - the distribution of time (in ns) to wakeup the selector.
  - Each "time_xxx" distribution has "avg", "count", "lower", "max", "median", "min" and "upper" nodes.
    See com.devexperts.util.TimeDistribution class for details. Distributions are published to MARS as a delta during
    the MARS reporting period (typically 10s). So, for example, "readerPool.time_busy.count" is the number of select
    operations returning in the last 10 seconds for read.
  - reader/writerPoolCounters properties are also available via JMX of NioServerConnector. They represent the total
    counters collected. There is also "resetCounters" operation in JMX.
  - NIO reader and writer threads now perform a select operation with a timeout of 1 second. This facilities faster
    clean up of of selector's cancelled-keys sets and may work around (mask) bugs in selector wakeup logic (if any).
  - Bean-monitoring micro-framework that consist of "Monitored" annotation was moved to dxlib. The annotation now
    resides in com.devexperts.monitoring.Monitored. It was needed to annotate TimeDistribution from dxlib for Monitoring.
  - Utility class for bean-monitoring micro-framework was introduced in MARS under the name of
    com.devexperts.mars.common.MARSMonitoredBean. It facilitates MARS monitor for beans with @Monitored properties.

QDS 3.203:

* [QD-720] History Snapshot protocol shall include SNAPSHOT_SNIP flag for compatibility with HistorySubscriptionFilter
  - Multi-threaded stress test for history snapshot and transaction protocol consistency in introduced
  - Mark events that are delivered to agents outside their subscription time to end transaction or set snapshot
    snip flag with REMOVE_EVENT flag. This way the agent code does not have to validate events against its
    subscription time to get a consistent view.
  - Lot of bugs in QD-549 History Snapshot implementation fixed.
* [QD-749] OrderBookModel shall work correctly with tape files without SNAPSHOT_END flags
* [QD-764] Synchronize iterations on the results of System.getProperties
* [QD-767] BUG FIX: dxFeed REST API eventSource fails to create session sometimes
* [QD-769] Tools: Instruments tool shall fill TRADING_HOURS field for created products.
* [QD-765] BUG FIX: Cannot receive data when connecting using 3rd party scheme to dxFeed scheme

QDS 3.202:

* [QD-759] Schedule: add last modification date to default properties
* [QD-755] IPF: Add COMPLETED state to InstrumentProfileConnection
* [QD-751] dxFeed API: Introduce OrderBookModel.addListener, clean up flags, and improve JavaDoc
* [QD-752] dxFeed API: Add HighLimitPrice and LowLimitPrice to Profile event and record.
* [QD-748] IPF: Support IPF files in in and notin expressions.
* [QD-741] IPF: Support multiple labels in switch statement.
* [QD-740] Tools: Sending data via pipe to post tool fails.
* [QD-737] BUF FIX: dxFeedAPI OrderBookModel hang/NPE in CheckedTreeList
* [QD-735] dxFeed REST API shall support Server-Sent Events EventSource
  - dxfeed-webservice.war now provides new resource at "/rest/eventSource[.<format>]" (format is "json" or "xml")
    It is similar to "/rest/events[.<format>]" and supports the following query parameters:
    event, symbol, fromTime, source, indent (note that there is no toTime, nor timeout).
  - This resource subscribes to events and provides them via Server-Sent Events (mime type of "text/event-stream").
  - Sample application for REST API at "/rest-demo.jsp" has a checkbox to test this new feature.
  - The regular "/rest/events[.<format>]" resource implementation is refactored via async servlets,
    so that it does not block a thread while waiting for events, thus increasing the number of requests that
    can be handled in case of timeouts.
  - Use media type mapping to parse ".xml" and ".json" extensions, so that RESTful "Accept: application/<format>"
    content type specification also works. All resources can now be used without extension and there is
    a corresponding "Default" format choice on the "rest-demo.jsp" page.
* [QD-746] dxFeed REST API shall have option to create a session and change its subscription
  - "/rest/eventSource[.<format>]" has an additional "&session" option to create a HTTP session (will set cookie)
    + "/rest/addSubscription[.<format>]" to add subscription to the created session
    + "/rest/removeSubscription[.<format>]" to add subscription to the created session
    Here, format refers to the response of this add/remove action only, which can be either OK
    (with HTTP status code of 200) or SESSION_NOT_FOUND (with HTTP status code of 412).
  - REST demo page is updated with support for session creation and add/remove subscription.
  - Session can be recovered with subscription. Session is serializable and (theoretically) can be replicated in a
    cluster and recovered on a different instance of container in a cluster.
  - REST API supports both GET and POST methods. Long requests can be posted as "text/x-www-form-urlencoded",
    standard (jQuery and the like) approach to encoding of arrays via []-named parameters is also supported.
  - REST demo page contains a selector to test both GET and POST methods.
  - Ditch Jersey (web service is reimplemented directly on top of asynchronous servlets).
* [QD-679] dxFeed REST API shall have auto-generated human-readable documentation
  - "/rest/help" resource HTML documentation on all available resources and their parameters.
  - "/rest/" URL (without any resource name) also shows this help page.
  - Help is included in the "rest-demo.jsp" page.
  - dxFeed API javadoc is embedded into the dxfeed-webservice war file.
  - The short event description is listed directly on a help page with a link to full javadoc.
  - com.dxfeed.event.Description annotation is introduced in dxFeed API to provide human-readable event
    documentation at run time.
* [QD-756] dxFeed API CandleSymbol shall include documentation on its string representation
* [QD-732] dxFeed webservice: Migrate to CometD 3.0.4, works with Servlet 3.0+JSR 356 containers (Jetty 9, Tomcat 8)
  - Removed Jetty gzip filter from web.xml, because it is not compatible with Tomcat
* [QD-738] dxFeed REST API shall support comma-separated as well as repeated query parameters
  - This works for event[s], symbol[s], and source[s] query parameters. Whenever multiple parameters need to
    be specified, it can be done either by repeating a singular one, like "?event=Quote&event=Trade", or
    by using a comma-separated list with a plural one, like "?events=Quote,Trade".
* [QD-681] dxFeed REST service demo shall provide links to event documentation
* [QD-731] Support ":" character in qd symbol patterns without additional escaping
* [QD-753] Support wildcard pattern in any place of symbol filter
* [QD-750] BUG FIX: Dynamic IPF filters: memory leak
* [QD-734] IPF: New transform functions to quickly check symbol category.
* [QD-733] Tools: Collector option in tools shall support storeEverything mode for history contract.
* [QD-727] BUG FIX: IllegalArgumentException in CheckedTreeSimpleTest
* [QD-725] Add methods to transform single InstrumentProfile
* [QD-724] Tools: Instruments tool shall support transheader command in scripts
* [QD-726] Tools: Instruments tool shall support multi-line transforms command in scripts
* [QD-729] Tools: Instruments tool shall support transform performance option.
* [QD-721] BUG FIX: QDS Post Tool does not support event flags
* [QD-387] Use record description from receiving data distributor to send only fields that are present in the scheme
  on the receiving side
  - After this change, the default record description that is being sent to the remove side uses field "propertyName"
    (see QD-416). This is backwards-compatible, since old data providers don't care what fields are sent by data
    consumer's DESCRIBE_RECORDS messages. At the same time, old data consumers request legacy (binary) field names
    in the DESCRIBE_RECORDS and after this change this request is now honored -- the data will be described and set
    using exactly the same names (and types) that data consumer side had requested.
  - Note, that recognition of "propertyName" in QTP binary formats is supported since QDS 3.125, so tape files written
    by this new release are parseable on any QDS 3.125+ version.
  - Void fields do not appear in DESCRIBE_RECORDS messages anymore and DESCRIBE_RECORDS includes only fields that
    both sides (data provider and consumer) know about.
  - If the requested record description from the other side did not list any fields, then it
    is a signal to send all fields known in the scheme (when the receiver on the other side is schema-less)
  - After this change, FileWriter (as well as all binary composers) to not support legacy DataVisitor methods anymore.
    They can be only used with RecordSink.append method.
* [QD-730] BUG FIX: RecordBuffer maxObFields tracking optimization is broken
  - This is a non-functional problem (affects performance optimization heuristic only)
* [QD-758] BUG FIX: RecordBuffer.compact does not always properly cleans up
* [QD-742] Introduce RecordSource.VOID constant
* [QD-757] CollectorMXBean shall print eventFlags in reportData, introduce reportSubscription, and support wildcard
  - eventFlags are printed by reportData method when used on History.
  - reportData has an additional "boundsOnly" parameters that provides a control on whether only bound (first and last)
    rows are reported or all rows are reported.
  - reportSubscription is introduced to quickly examine the total subscription.
  - Both reportData and reportSubscription support "*" as symbol and/or recordName, thus providing ability to
    perform wildcard examination. However, there's a built-in limit of 10000 rows per collector  to avoid out of memory
    errors if accidentally used on a very large data or subscription set.
* Fixed project files for jspc-maven-plugin, so that is builds on a clean machine.
* Project files are updated for IDEA 14.1.1
* Files are updated for year 2015 in copyright (mostly pom.xml plus few with missed update)

QDS 3.201:

* [QD-718] BUG FIX: NullPointerException in AbstractIndexedEventModel
* [QD-716] Support specifying time when subscription is set with dxfeed.qd.subscribe.history
  - Now *.qd.subscribe.* properties support the same <records> <symbols> [<date-time>] syntax as Connect tool,
    the only missing feature (yet) is the support for subscription mirroring from other connection. Dynamic
    symbol lists (from live ipf file sources) are not supported (yet), too.
* [QD-714] History snapshot mode is not activated when initial data was without snapshot begin flag
* [QD-713] dxlib: update gzip mime type and move utility classes to public package
* [QD-717] Transforms shall warn on use of undeclared variables

QDS 3.200:

* [QD-712] History snapshot flags do not pass through when using striping
* [QD-711] dxlib: enable sync flush for ZIP compression
* [QD-710] dxFeed REST API JSON serialization must be similar to results of dxFeed JS API
  - A list of events is represented as a map of event types to the map of symbols to the events
    (or arrays of events, for indexed events). This way, JavaScript code that is using REST API can
    easily navigate the results of the call.
* [QD-678] dxFeed API shall have consistent properties documentation for all event types
* [QD-708] dxFeed API: Undeprecate Promise.whenDoneAsync method
* [QD-707] BUG FIX: NullPointerException in OrderBookModel
  - OrderBookModel and IndexedEventModel classes were totally broken.
  - New unit-test exposed all kinds of bad stuff.
* [QD-687] dxFeed API: Default doubles values in event objects shall be Double.NaN
* [QD-680] dxFeed API shall use enum types in Order and TimeAndSale events
  - XML and JSON serialization for dxFeed WebService is updated to use enum types
* [QD-706] DXFeed API: Optimize DXFeedSubscription.addSymbols for a case of one symbol that is already in subscription set
* [QD-705] DXFeed API: Optimize QDCore usage when DXFeedSubscription.addSymbols is used with new string reference
  - It should not go into QDCore at all (should not notify DXFeedImpl), but consider subscription completely unchanged
    when one instance of String in subscription is replaced with another instance.
  - com.dxfeed.api.osub.FilteredSubscriptionSymbol marker interface is introduced to specifically mark subscription
    symbol instances that do not use this optimization (whose change is always notified to DXFeedImpl).
* [QD-704] dxViewer: Application stops updating after any exception
* [QD-701] dxFeed API: OrderBookModel sort order
  - LEVEL_ORDER are sorted in FIFO order (by time)
  - Mixed mode orders prioritize level first
* [QD-694] Tools: Dump doesn't support filtering anymore
* [QD-699] dxFeed API: Expose Short Sale Restriction flag in Profile
* [QD-703] QD Core: Add sequence to Order records and events
  - Broken Order record serial compatibility with previous QD versions
  - Broken TimeAndSale event serial compatibility with previous QD versions
* [QD-702] NullPointerException in AgentChannel/AgentAdapter
  - This exception happens when ChannelShaper is used with null collector either initially or via setCollector(null)
* Project files are updated for IDEA 14.0.3
* Boilerplate is updated for year 2015
* BUILD: Release works only under Maven 3.0.5

QDS 3.199:

* [QD-685] Introduce OrderSource for DirectEdge BATS One Market Depth Feed
* [QD-671] BUG FIX: String representation of built-in filters like "feed" should not be expanded to a list of records
* [QD-690] BUG FIX: Writing data with restricted event flags breaks data format.
* [QD-691] BUG FIX: History collector shall ignore incoming records which has no time.
* [QD-695] BUG FIX: NullPointerException at AgentQueue.retrieveSnapshotForHistory.
* [QD-696] BUG FIX: NullPointerException in FeedFileHandler.writeFile
* [QD-697] BUG FIX: stats overflow

QDS 3.198:

* [QD-663] dxFeed API: Support subscription and publishing of indexed events from a specific source
  - com.dxfeed.event.IndexedEventSource interface is introduced.
  - com.dxfeed.event.market.OrderSource class is introduced.
  - IndexedEvent.getSource() method is now used to identify source of the indexed event.
  - com.dxfeed.api.osub.IndexedEventSubscriptionSymbol class is introduced to represent subscription for
    a specific source of indexed events.
  - Order and SpreadOrder classes with a specific source (like OrderSource.ISE and OrderSource.NTV) can now
    be published via dxFeed API.
  - OrderSource.DEFAULT is defined, so that custom order books can be published to generic "Order" and "SpreadOrder"
    records by end-customer without defining new source in the dxFeed API codebase.
  - IndexedEventSource.DEFAULT is defined for all other event types (that do not have other event sources).
* [QD-666] dxFeed API: Deprecate Promise.whenDoneAsync method
  - Promise class can be extended to move handleDone processing into a separate thread when needed.
* [QD-667] dxFeed API: Optimize Promise for a case of a single PromiseHandler
* [QD-665] dxFeed API: Support getIndexedEventsPromise and getTimeSeriesPromise with snapshots
  - All DXFeed.getXXXPromise methods now perform notifications using DXEndpoint executor and can be safely used
    in GUI applications when an appropriate UI thread executor is set without any extra effort.
* [QD-668] dxFeed REST API for time series and indexed events
  - RESTful front-end service for access to all types of events is implemented as Jackson JAX-RS application.
  - Application is deployed at "/rest" path relative to dxfeed-webservice context root
  - WADL file with service documentation is available at "/rest/application.wadl"
  - XSD schema file for dxFeed events is "/xsd/dxfeed-event.xsd"
  - XSD scheme file for rest service answer format is "/xsd/dxfeed-service.xsd"
  - The general service usage is:
    "/rest/events.{format}?event={event}&symbol={symbol}
       [&fromTime={fromTime}][&toTime={toTime}[&source={source}][&indent=true][&timeout={timeout}]
  - Supported formats are "xml" and "json".
  - Symbol, event, and source parameters can be repeated for a batch request.
  - The HTTP OPTIONS request to either "/rest/events.xml" or "/rest/events.json" returns WADL file, too
* [QD-669] dxlib: TimeFormatTest shall support parsing and formatting of full ISO6801 (like in XML)
  - TimeFormat.asFullIso() method is introduced that provides yyyy-MM-dd'T'HH:mm:ss.SSSX format as used
    in XML (see xsd:dateTime type). Time-zone in this format is [+-]HH or [+-]HH:MM and parsing of this kind
    of time-zone specification is supported, too.
* [QD-670] dxFeed API: Provide DailyCandle event with impVolatility and openInterest

QDS 3.197:

* [QD-642] dxFeed API: IndexedEventModel should not extend List, but provide getEventsList method
* [QD-643] QD History shall set transaction flags in examineData() method
  - This way, when data that is saved from QD History to file with event flags and is restored from file, then
    snapshot state of the history buffers is completely restored.
* [QD-611] QD Core: Examine Data from History shall avoid holding global lock while flushing data to disk.
  - RecordSink.flush method is introduce to signal a safe (lock-free) point for writing data to disk.
  - QDCollector.examineData method in Ticker and History periodically (every 10000 records) invokes flush.
  - OutputStreamCompose is reimplemented. It buffers bytes in the internal ChunkedOutput and flushed them
    to the underlying OutputStream only when it is safe to do so.
* [QD-476] Support storeEverything mode in History.
* [QD-644] QD Core: Update QDCollector.remove method and support it in History
  - The "remove" method moves to QDCollector interface.
  - It removes all records specified by subscription without checking data contents both for history and ticker.
  - For history, the whole history buffer is removed.
  - The "remove" method now facilitates convenient and safe use of "storeEverything" mode in ticker and history.
* [QD-645] Tools: Multiplexor shall write DESCRIBE_PROTOCOL header to its snapshot file and support flags

QDS 3.196:

* [QD-549] History snapshots and cleanups
  - QD History core supports history snapshot with transactional consistency using four event flags:
    TX_PENDING, REMOVE_EVENT, BEGIN_SNAPSHOT, END_SNAPSHOT
  - com.devexperts.qd.ng.EventType enum is introduced to represent event flags.
  - QD endpoint that supports new protocol advertises this ability with "opt=hs" (mnemonic for HISTORY_SNAPSHOT)
    property in protocol descriptor.
  - com.devexperts.qd.qtp.ProtocolOption enum is introduced to represent this option and new optional features
    of the protocol in the future.
  - QDDistribution figure out history snapshot support automatically on per-symbol basis. Whenever an incoming event
    for a symbol has SNAPSHOT_BEGIN flags, the history buffer for this symbol is marked a supporting history snapshot
    and outgoing messages include SNAPSHOT_BEGIN flag on the first even after a change of subscription.
  - However, QDAgent, by default, works in legacy mode and does not report any flags (they are zero).
  - Support for history snapshot is turned on using QDAgent.Builder.withHistorySnapshot method.
  - In history snapshot mode, after a change a subscription on receive of snapshot-aware data from the upstream
    distributor, the first event that is delivered to the agent is marked with SNAPSHOT_BEGIN and the additional
    SNAPSHOT_END event is generated at subscription time (marked with REMOVE_EVENT flag if the was no actual
    event from upstream on this time). Note, that an additional snapshot end is not generated in legacy mode.
  - TX_PENDING flags are used to group related updates at different times. Each group of changes (a transaction)
    is marked with TX_PENDING flag in all the events, but the last one.
  - SNAPSHOT_END is not used by the QD itself. It determines the end of the snapshot purely on the basis of time,
    by keeping track of "snapshotTime" internally. SNAPSHOT_END is set for convenience of QD API users.
  - SymbolCodec interface is changed in a backward-incompatible way to support reading/writing of option flags in
    conjunction with symbol. It affect only one knows use of a custom SymbolCodec implementation. Custom SymbolCodec
    implementations are now DEPRECATED. There is a new constant of PentaCodec.INSTANCE defined. It shall be
    used whenever an instance of SymbolCodec is needed as the only approved and future-proof implementation of
    SymbolCodec interface.
* [QD-625] dxFeed API: support for snapshots and transactions on indexed events and time series events
  - IndexedEvent interface has get/setEventFlags and getSource methods to support transactions. Four
    constants (TX_PENDING, REMOVE_EVENT, SNAPSHOT_BEGIN, and SNAPSHOT_END) are defined for bits of
    event flags.
  - TimeSeriesEvent is changed to extend IndexedEvent. TimeSeriesEvent.getEventId is now deprecated. It returns
    the same value as TimeSeriesEvent.getIndex (that is inherited from IndexedEvent).
  - TimeSeriesEvent inherits all the transaction support logic of IndexedEvent.
  - JS API and dxFeed WebService return and use "index" property only (instead of "eventId")
* [QD-335] dxFeed API: Implement IndexedEventModel and TimeSeriesEventModel
  - AbstractIndexedEventModel provides base functionality with ability use a custom wrapper entry class for
    events and received notifications with override of modelChanged method. This class fully encapsulated all
    snapshot and transaction processing, so that no other classes need to implement this logic.
  - setSizeLimit method (optionally) limit the number of (most recent) events to keep in the model.
  - IndexedEventModel implements ObservableListModel for indexed events.
  - TimeSeriesEventModel extends IndexedEventModel with setFromTime method.
  - All models have attach/detach methods and the same pair of methods is added to DXFeedSubscription class
    for consistency.
  - OrderBookModel is using AbstractIndexedEventModel to handle snapshots and transactions. Additional performance
    optimizations include reuse of internal nodes, that extend AbstractIndexedEventModel entries.
  - Swing UI dxFeed samples (DXFeedTimeAndSales, DXFeedCandleChart, and DXFeedMarketDepth) are fully
    implemented using the features of these models.
* [QD-320] dxFeed API: Add support for Complex Orders (e.g. ISE Spread Book / Complex Order feed)
  - com.dxfeed.event.market.SpreadOrder is introduced.
  - SpreadOrder#<source-id> record name pattern is used. Currently, only "SpreadOrder#ISE" is defined.
    They carry books for an underlying. Subscribe by an underlying symbol.
  - Order#<source-id> record name pattern is used for Order records. They carry spread-specific books.
    Subscribe by spread symbol to get them.
  - The list of generated source ids in the scheme may be overriden via the following properties:
    + com.dxfeed.event.market.impl.SpreadOrder.suffixes (with a default of "#ISE")
    + com.dxfeed.event.market.impl.Order.suffixes (with a default of "|#NTV|#ISE")
  - Extra exchange letters are dropped for Book record from scheme (only "Book&I" is left for backwards compatibility)
  - As an additional feature, a list of exchange codes for every regional record can be overriden via system properties

--- rmi branch ---

QDS 3.174:

* [QD-796] A one-way RMIRequest fails when sending
* [QD-803] RMIEndpoint does not release the resources after RMIEndpoint.close()

QDS 3.173:

* [QD-784] RMI_CANCEL messages are lost when sending, if the visitor is full
* [QD-785] Used methods/fields/constructors have been removed

QDS 3.172:

* [QD-781] BUG FIX: RMIEndpoint does not contains methods for adding and removing a RMIEndpointListener
* [QD-783] BUG FIX: Wrong name for primary method in RMILoadBalancer

QDS 3.171:

* [QD-383] RMI: Support basic request routing
  - QD RMI now provides full-blown service-bus functionality with ability to transparently route RMI requests
    from one endpoint to another, load-balance requests among multiple implementations of the same service
    using consistent hashing and find the shortest route to the chosen implementation.
  - RMIService.getDescriptors/add/removeServiceDescriptorsListener are introduced to learn and track information about
    service implementations that are available.
  - RMIServiceDescriptor describes one service implementation and provides its unique id via RMIServiceId class that,
    in turn, uses a unique EndpointId that was also introduced as a part of this change.
  - RMIClient.getService method no accepts a comma-separated list of service names and supports '*' wildcard
    character in names. This way an RMIService instance that encompasses multiple services can be retrieved.
  - Messages that are logged to the console on connection establishment now include remote endpoint name and a
    few letters of its unique endpoint id.
  - The route information is transferred via RMI_ADVERTISE_SERVICES messages.
  - Full backwards-compatibility is maintained with RMI clients and servers running older versions.
* [QD-616] Tools: Multiplexor shall support RMI request routing
  - Multiplexor supports "-R|--route" option (old "-R|--drop" option is changed to "-P|--drop"). When this option is
    turned on, multiplexor acts as an RMI client on its uplink (distributor) address. This way, a multiplexor with this
    option becomes an instant service aggregator with an auto-routing and a manual routing override using
    a legacy "-F|--forward" option whenever needed.
* [QD-768] QDS Tools: Introduce "Services" tool to display information about advertises service instances
* Project files are updated for IDEA 14.1.1

QDS 3.170:

* [QD-722] dxFeed API: Introduce CandleType.PRICE_MOMENTUM and CandleType.PRICE_RENKO
* [QD-702] BUG FIX: NullPointerException in AgentChannel/AgentAdapter
  - This exception happens when ChannelShaper is used with null collector either initially or via setCollector(null)
* [QD-723] BUG FIX: NioServerConnector.stopAndWait hangs
* Project files are updated for IDEA 14.0.3

QDS 3.169:

* [QD-693] Schedule: add new holiday calendar for TR
* [QD-684] Use JSR-305 annotations for nullability, GuardedBy, etc
* [QD-640] RMI: Introduce BasicSubject with user+password and use it when there is no explicitly set subject
* BUILD: now works under Maven 3.2.3, project files are updated for IDEA 14.0.2

QDS 3.168:

* [QD-612] QD Core: Support dynamic filters on agent (data provider) side without connection reset
  - A warning is added on a Distributor when using dynamic filter, because it is still requires connection reset
  - When distributor connection is reset due to dynamic filter change, there is a code to make sure that client
    connection is reestablished immediately in this case (without any wait).
  - An old bug was found and fixed while testing this feature. Dynamic filters were improperly combined with
    symbol-list filter like in "(A,B)&ipf[some.ipf&update=xxx]".
  - When using dynamic IPF filters with local files, the handles to those files were leaking on each update check.
  - Usability of agent-side filters was improved. Now, if the filter is the same on all supported contracts,
    then it is sent it DESCRIBE_PROTOCOL just once, so that it show in logs on the other side.
  - Usability of logs is improved when using ipf filters. Dot '.' characters in filter string are replaced with
    underscores '_' when building default connector name, so that it is not trimmed when used a logging category.
* [QD-595] IPF filter: ability to specify user/pass and escape special symbols in URL
  - Special symbols in URL (like comma and unbalanced parenthesis) can be escaped with backslash.
  - HTTP user and password can be specified in URL using a standard syntax like, for example:
    "ipf[http://user:password@host:port/path/file.ipf]"
  - user and password properties are also supported and they take precedence. For example:
    "ipf[http://host:port/path/file.ipf,user=user,password=password]"
  - the latter approach can be used with just a host:port (short) way of specifying IPF source:
    "ipf[host:port,user=user,password=password]"
* [QD-648] Marshalled, which supports Null Object incorrectly deserialized
* [QD-649] dxlib: Introduce explicit Marshalled.NULL constant with the result of Marshalled.forObject(null)
  - It is also a guaranteed result of Marshalled.forBytes(null) and servers the null object for Marshalled,
    thus helping avoid code pollution with null checks.
* [QD-651] RMI: Improve memory footprint of some RMI client-side and server-side data structures
* [QD-650] Improve user-perceived latency of QD History snapshot retrieval
   - During implementation of QD-408 load-balancing of snapshot and updates in QD History and Ticker had been
     implemented in batches of 100 records. 100 snapshot records are followed by 100 update records, etc.
     However, the history also moves a symbol to the end of snapshot queue after sending 100 records for it.
     It has the following unintended consequence: when end-user open, for example, a lot of charts with 1000 bars
     on each, all the chart will be populated by 100 bars first, then with 100 bars more, etc, and all the charts
     will be loaded only at the end, so the average perceived latency of "chart has been loaded" event the time
     to load the all.
   - This logic is changed to move symbol to the back of the history snapshot queue only when 10000 records has
     been loaded for it. In the above example, it means that charts with less than 10000 bars will be loaded one-by-one
     (each one loading completely) and only the ones with more than 10000 bar will be put to the back of the
     snapshot loading queue without having been loaded completely.
   - There is a system property to change this magic constant: com.devexperts.qd.impl.matrix.History.snapshotBatchSize
* [QD-654] Common configuration framework for application protocols and agent adapters
  - com.devexperts.connector.proto.ConfigurableObject is introduced as a common subclass for
    ApplicationConnectionFactory and for newly introduced MessageAdapter.ConfigurableFactory
  - It contains reflection-based implementation that considerably simplifies implementation of existing application
    connectors and codecs (notable SSL codec's factory code is much simpler now). It relies on a newly introduced
    com.devexperts.connector.proto.Configurable annotation.
  - com.devexperts.qtp.ConfigurableMessageAdapterFactory interface is deprecated.
  - com.devexperts.util.ConfigUtil is introduced with a single convertStringToObject method (which was moved from
    QDConfig utility class) with logic to convert string configuration parameters into common target types.
* [QD-655] QD AgentAdapter shall support channels configuration properties
  - The following properties are supported in all agent adapter (for example, in second address to multiplexor tool):
   + "aggregationPeriod" - defines data aggregation period (zero by default)
   + "subscriptionThreads" - when set to non-zero value, defines the size of a separate thread-pool to handle
     subscription tasks. It is recommended when using "nio:" server connector to handle lots of client connections.
     The recommended value is 3 (one thread per collector) because of QD-630 optimizations.
   + "channels" - channels configuration string is a parenthesis-separated string of channel definition
     of the following form: [<filter>'&']<contract>['@'<aggregationPeriod>]['['<key>'='<value>','...']'].
     Filter is assumed to include anything by default, and default aggregation period is set with "aggregationPeriod"
     property. For example, the string "(opt&ticker@1s)(!opt&ticker@.1s)(stream[weight=7])(history)" defines four
     channels, with stream having weight 7 of total weight 10 (default weight of each channel is 1).
* [QD-657] BUG FIX: RMI: When task is cancelled before it has started execution error type is TASK_CANCEL_LISTENER_NOT_SET
  - The error type in this case must be CANCELLED_BEFORE_EXECUTION, CANCELLED_DURING_EXECUTION, or
    CANCELLED_AFTER_EXECUTION depending on the actual state of the execution task.
* [QD-652] RMI: Support remote interface methods with Promise<T> as their declared return type
  - RMIOperation for each such method extracts concrete type T
  - RMI client side proxy shall make a non-blocking invocation on such a method.
  - RMI server side puts the RMITask in a suspended state on such a method
  - The RMITask<T> can be synchronized with the Promise<T> using RMITask.completePromise method.
  - Promise class introduces Promise.completed(T result) method to create, complete, and return complete promise
    on the same line
* [QD-659] RMI: RMIServiceInterface annotation
* [QD-620] RMI: Tests are highly unreliable, time-depended, and fail randomly
* [QD-656] RMI: More mechanisms to fail-fast when client code is using suspend/resume improperly
* [QD-647] BUG FIX: Tools: Compare does not work (IllegalArgumentException) again
  - There is a unit-test to test all 3 variants of compare tool (with other address, with other collector,
    and with other record).
* [QD-660] Tools: "-s|--stat" shall be specified for each tool when running multiple tools using "+" option
  - Previously, it was a technicality that prevented a proper use of separate stat option for each tool when
    running multiple tools with "+". It is not the case any more, so now stat behave just like any other normal
    option and it shall be specified separately for each tool as needed.
  - This change allows appropriate unit-testing of tools and was actually implemented as a part of QD-647 bug fix.
* [QD-530] BUG FIX: Tools: Connect and compare "-f|--fields" option does not understand property names (new field names)
  - As a part of this fix, tools throw exception when "-f|--fields" option value does not match any fields,
* [QD-661] Do not use DXEndpoint.close() in sample code to make it fool-proof
  - Sample code that uses DXFeed.getInstance() shall not close it, but shall use System.exit to terminate JVM
    when the sample's done working.
* [QD-662] BUG FIX: dxFeed API methods shall operate silently without exception on closed endpoint
  - DXFeed.getTimeSeriesPromise was crashing when used on a closed DXEndpoint with qds-monitoring.jar in classpath

QDS 3.166:

* [QD-635] dxFeed API: Enable safe and convenient use of xxxModel classes in multi-threaded backend application
           via setExecutor
  - Both DXFeedSubscription and OrderBookModel classes now have setExecutor methods that can be used install
    custom. This is a critical feature for backend applications, like servlets, that need to poll for the
    actual events and update model periodically or at same later moment of time in a well-defined thread.
* [QD-637] TDP: Analyze and show true stack trace trees in thread dump parser
  - True trees are now analyzed and printed in both "top 30 methods with <this> in 'xxx' state and reverse call stacks"
    section and in "All methods with submethods and forward call stacks" section.
  - The "All methods with submethods and forward call stacks" section now starts with ====...==== tear line for
    easier search of its beginning. It is now fully ordered in reverse by total count and out method's name
    starts with "+ <method-name>", so that it can be found in file even without regex support.
  - Tree are expanded to the maximal depth of 50 (by default) and stop when contribution to the outer method
    falls below 5% (by default). In the latter case, it prints how many tree children were skipped.
  - The section with forward call stock ignores recursive calls. Only the innermost occurrence of a method
    in each stack track is counted and reported.
  - A new -s|--state <id> option to limit the whole report just to specific state. Use "-s R" to get information
    only about runnable threads, for example.
* [QD-638] Agent channels shall buffer subscription requests in chunks filled up to buffer capacity
  - This is an improvement for QD-360 subscription filtering logic in QDS 3.163, which ensures that in a regular
    course of operation under very high load (lots of subscription add/remove requests) the RecordBuffer instances
    in the queue do not grow without bound and cause memory reallocation, but are limited up to their capacity,
    so that they can be returned to the pool again.
* [QD-513] RMI: Support request continuations (suspend/resume) for convenient asynchronous calls that do not consume
           executor thread
* [QD-629] RMI: Shall log local request processing errors of all type (with the only exception of checked application
           exceptions)
* [QD-627] RMI: A race in abort of incoming request on close of RMIEndpoint that may lead to non-aborted requests
           on a closed connection

QDS 3.165:

* [QD-615] BUG FIX: Different monitored QD endpoints in the same JVM are in conflict when publishing their stats under
           the same MARS node
  - This is fixed. There are several side effects on this fix:
    + All QD tools now post their QD stats under "qd-<name>" MARS node instead of just "qd", there <name> is a
      name of the tool by default, but it can be changed with -n|--name option that each tool accepts.
      Previously, there was a conflict when multiple tools were launched in the same JVM with "+" option.
    + RMI endpoints now post their QD stats under "qd-rmi" MARS node instead of just "qd" (next instance will
      be "qd-rmi-1", etc), unless the name was explicitly specified using withName method. Previously, there
      was a conflict when multiple RMI endpoints were used in the same JVM or RMI endpoint was used together
      with a ConnectorsMonitoringTask.
    + DX endpoints now post their QD stats under "qd-monitoring" ("qd-monitoring-1", etc) unless name is explicitly
      specified. It had similar conflict before.
  - The name of connectors that are give by default when using DXEndpoint/RMIEndpoint is also fixed. It was
    recently broken as a part of QD-626 fix.
  - Monitoring of RMIEndpoint/DXEndpoint into MARS is actually turned on now even when "monitoring.stat" property is
    not explicitly set. The value of "mars.delay" is used in this case (with a default of 10 seconds) for periodic
    logging to MARS. However, logging of stats still requires explicit "monitoring.stat" property.
* [QD-636] BUF FIX: MARS Connectors log with "ERROR" level
  - Log level for normal messages is changed to INFO

QDS 3.164:

* [QD-634] NullPointerException at AgentAdapter.prepareProtocolDescriptor

QDS 3.163:

* [QD-630] Agent channels shall filter subscription before submitting it to QD core to increase throughput
  - QDFilter class has new method "isFast", which returns "false" in a default implementation and "true" in
    all standard build-in filters. This way, any custom project-specific filter that is not a combination of
    standard filters will be labelled as "slow" by default. There is an attempt to move processing of slow
    filters outside of global lock.
  - Agent channels now support several internal modes of subscription filtering:
    + SUB_NO_FILTER when no filters are set or received from peer (simple, nothing to explain here)
    + SUB_FILTER_AGENT is used for fast filters when ChannelShaper.subscriptionExecutor is not set. This is
      a default mode that is used inside a typical multiplexor. In this mode, as before the change, the
      filter is processed inside agent implementation under a global lock.
    + SUB_FILTER_EXECUTOR is used for slow filters when ChannelShaper.subscriptionExecutor is set. In this mode,
      as before the change, the filter is processed in a separate thread (via provided executor) outside of
      agent and its global lock. Moreover, the actual subscription change is submitted as a separate task
      to the executor after slow filter has been processed.
    + SUB_FILTER_PROCESS is used for other cases. In this mode the filter is processed right in the processing (reader)
      thread. So, when filter is fast and ChannelShaper.subscriptionExecutor is set, this safes extra context switch
      by prefiltering subscription in processing thread and avoiding switch to new thread when result is empty.
      When filter is slow, but ChannelShaper.subscriptionExecutor is not set, this saves time under global lock, by
      prefiltering subscription outside of global lock.
  - Lock-bound tasks that are offloaded to a separate thread via ChannelShaper.subscriptionExecutor are coordinated
    so that at most one task for a given collector is executed. This mechanism is facilitated by a new method
    QDCollector.executeLockBoundTask, which keeps an internal queue of lock-bound tasks.
  - Coordination among tasks that require big changes to subscription is fully fair in asynchronous case (with
    subscriptionExecutor) just like in synchronous case (without subscription executor). This is facilitated by
    new methods on QDAgent: add/remove/setSubscriptionPart and closePart that expose an internal feature of
    the corresponding "full" methods (without Part suffix) to split operation into parts and release global
    lock between parts.
  - StripedCollector does not current support any of the lock-bound task coordination features. Its implementation
    is using multiple collector and, thus, has multiple global lock, and the corresponding integration of
    with agent channels is outside of the scope of this change.
* [QD-631] QD Core shall support REMOVE_SYMBOL event flag in addSubscription invocation to combine add/remove sub under one lock
  - This flag is set by QTPParser classes when processing "removeSubscription" messages.
  - AbstractQTPParser.setMixedSubscription method turns on a mode that internally uses "FLAGGED_DATA" record buffers
    for subscription and converts all incoming xxx_REMOVE_SUBSCRIPTION messages into xxx_ADD_SUBSCRIPTION messages
    and merges them.
  - MessageAdapter.supportsMixedSubscription returns true whenever message adapter understands this flag.
  - All QDAgent.addSubscription implementations support mixed subscription (remove sub with REMOVE_SYMBOL flag),
    thus AgentAdapter returns true from its supportsMixedSubscription method.
  - When ChannelShaper.subscriptionExecutor is set, subscription is appended to the last not-yet-take in the
    queue. In combination with mixed subscription this ensure that there is at most one pending subscription
    change task for each channel in the queue.
* [QD-632] NIOConnector shall have better configuration and monitoring of reader/writer thread pools
  - New "readerThreads" and "writerThreads" properties are available for explicit configuration of thread pool
    size when "nio::<port>" connector is used.
  - The legacy system property "com.devexperts.qd.qtp.nio.ThreadCount" is still supported as a global default
    for both thread pool sizes. The default's default is the number of available CPU cores plus one.
  - Defaults for readerThreads and writerThreads can be separately changed with a common pattern for all connectors:
     -Dcom.devexperts.qd.qtp.nio.NioServerConnector.readerThread=xxx to set the number of reader threads
     -Dcom.devexperts.qd.qtp.nio.NioServerConnector.writerThread=xxx to set the number of writer threads
  - The configured number of threads in each pool and the number of ACTIVE threads in each pool is available via
    JMX (reader/writerThreads, ActiveReader/WriterThreads) and MARS (reader/writerPool.size/active)
* [QD-598] dxFeed API and RMI: Default executors shall log unhandled exceptions
  - Common com.devexperts.util.LoggedThreadPoolExecutor is introduced in dxlib-qd-sandbox to handle
    logging of uncaught exceptions
  - Thread pool size policies for RMI and DX pools are aligned (availableProcessors threads by default)

QDS 3.162:

* [QD-622] BUG FIX: ThreadDumpParser does not recognize "eliminated" locks in stack trace
* [QD-623] ThreadDumpParser shall print consistent percents (vs number of dumps) and sort depth by the
           number of occurrences (descending)
* [QD-624] ThreadDumpParser shall not count recursive methods multiple times
  - Each method and each pair of methods is counted at most once per dump of a thread
* [QD-621] RMI: Task that is cancelled before it had a chance to run in executor throws IllegalStateException
* [QD-626] BUG FIX: AddressSyntaxException when trying to use filter with DXEndpoint

QDS 3.161:

* [QD-613] BUG FIX: ArrayIndexOutOfBoundsException in TransformContext
* [QD-618] BUG FIX: IndexOutOfBoundsException in History
* [QD-619] BUG FIX: Copying data between RecordBuffers in different modes does not correctly transfer extra stuff
* [QD-606] RMI: RMIRequest shall be an abstract class that is extended by RMIRequestImpl
* [QD-610] Improve speed of RMI tests

QDS 3.160:

* [QD-609] BUG FIX: QD Core: IllegalStateException when using Ticker.examineData, OnDemand in DXFeed API does not work
* [QD-594] QD Core: Support linking of records in RecordBuffer
* [QD-408] QD Core: Retrieve first incoming data record on subscription separately as snapshot,
           prioritize its processing and network transfer
  - Snapshot data now have more priority on highly loaded connection. DXFeed.getLastEventPromise works faster.
  - dxfeed.aggregationPeriod property now always provides snapshot data without delay.
  - ChannelShaper.setAggregationPeriod now always provides snapshot data without delay.
* [QD-596] MessageConnectors shall support special characters in password and other properties
* [QD-599] dxlib: Provide additional utility methods in SystemProperties class for use in
           class-local static magic constants
* Additional test case for dxFeed API Candle add/set/remove/clear/detach subscription processing
* [QD-510] Schedule: update RussellTick
* [QD-600] Timing: Add US holidays for 2015-2023 to Timing.
* [QD-79] RMI: Local toString handling in RMIInvocationHandler when toString is not explicitly declared in
          remote interface
* [QD-88] RMI: Explicit class-loader support
* [QD-250] RMI: Should not require ExecutorService implementation, should work with Executor
* [QD-313] RMI: Support basic forwarding of requests from one endpoint to another
* [QD-481] RMI: Extract immutable marshalled RMIxxxMessage classes
  - com.devexperts.rmi.message package is introduced
* [QD-506] RMI: Asynchronous server-side task API
  - com.devexperts.rmi.task package is introduced
* [QD-511] RMI: Expose RMIServiceImplementation class and simplify a set of RMIServer.export methods
* [QD-523] RMI: add getPromise methods to RMIRequest
* [QD-524] RMI: Provide client-side executor for notification
* [QD-533] RMI: Introduce RMIEndpoint.Side enum
* [QD-603] RMI: Shall do nothing when connect is called with the same address
* [QD-604] RMI: Provide public QD-level API integrate arbitrary QDCollectors with RMI
* [QD-473] RMI: Provide separate RMIClient and RMIServer for RMIEndpoint
* [QD-475] RMI: Support internally-marshalled representation of RMIOperation
* [QD-521] RMI: Make sure that the order of calls to RMIRequest.send and RMIRequest.setListener does not matter
* [QD-541] RMI: Should work when connect method is invoked on an attached DXEndpoint
* [QD-552] RMI: Proxy invocation handler shall have a local cache of operations
* [QD-597] RMI: Ensure that RMIRequest is fully thread-safe
* [QD-388] Tools: Multiplexor shall support RMI request forwarding
  - Multiplexor has -F|--forward <service-names> <address> option for RMI forwarding
* [QD-512] Tools: Forward: RMI request forwarding tool
* [QD-525] BUG FIX: RMI: Non-public exported class does not work
* [QD-608] BUG FIX: RMI: Race condition can get RMIRequest stuck queued on closed connection
* [QD-592] dxFeed API: Integrate news API via RMI
* [QD-607] BUG FIX: DXFeed API: User and password set via DXEndpoint methods are not sent with SSL

QDS 3.154:

* [QD-593] BUG FIX: dxFeed API: getLastEventPromise(..).cancel() does not work

QDS 3.153:

* [QD-588] BUG FIX: dxFeed API: Live Instrument Profile connections report EOF with various exceptions on server side
* [QD-587] BUG FIX: QD: TradeETH record shall be added to built-in QD filters feed, compfeed and regfeed.
* [QD-589] BUG FIX: dxFeed API: DXFeedSubscription notification on Order events happens from multiple threads
* [QD-565] QD Core: Introduce ability to attach arbitrary objects to subscriptions
* [QD-559] dxFeed API: Improve performance of multiple getLastEventPromise invocations
* [QD-529] dxFeed API: add to DXFeed convenient method to retrieve bulk snapshots
* [QD-590] Tools: Instruments shall print QDS version on start

QDS 3.152:

* [QD-584] BUG FIX: dxlib: TimeFormat formatting timezone breaks (switches zone)
    after parsing string with a non-default timezone
* [QD-585] BUG FIX: dxFeed API: InstrumentProfileCollector does not process "REMOVED" instrument type properly
    w.r.t. to update time
* [QD-586] BUG FIX: RMICommonTest hangs from time to time in testRMIException
* [QD-582] Modularity: Move SSL support to qds.jar from qds-tools.jar
* [QD-583] Tools: Multiplexor shall support "multiplexor.qd.subscribe.*" JVM properties for permanent subscription
* [QD-578] dxFeed API: Hide implementation-specific properties from event classes
  - The following properties are hidden (made package-private):
    + TimeAndSale.Flags
    + Summary.Flags
    + Configuration.MarshalledAttachment
    + Message.MarshalledAttachment
* [QD-579] dxFeed API: Introduce TradeETH event
* [QD-551] dxFeed API: Introduce Underlying and Series events for calculated option-related values

QDS 3.151:

* [QD-498] Migrate to Java 7
  - Check that only Java 7 APIs are used during compilation (from rt.jar + jce.jar)
      (allow com.sun.net.httpserver, com.sun.management, and sun.misc.Unsafe)
  - String.isEmpty() usage (mass search and replace)
  - StandardCharsets.UTF_8 is used instead of "UTF-8" string (mass search and replace)
  - ArrayUtil uses Arrays.copyOf
* [QD-497] dxlib: Include com.devexperts.management utilities
* [QD-501] MARS: JMX JVMSelfMonitoring.makeThreadDumps operation
  - Use com.devexperts.mars:type=JVMSelfMonitoring bean to make period thread dumps to stdout of file.
  - Supports a specified number of dumps, with a specified period, and (optionally) scheduled to start at a
    specified time.
  - Can be configured to start at JVM start with the following system options:
    -Dcom.devexperts.mars.jvm.JVMSelfMonitoring.threadDumpsCount=<number-of-dumps-to-make>
    -Dcom.devexperts.mars.jvm.JVMSelfMonitoring.threadDumpsFile=<file-name> (leave empty for stdout)
    -Dcom.devexperts.mars.jvm.JVMSelfMonitoring.threadDumpsPeriod=<period> (leave empty for 1s period)
    -Dcom.devexperts.mars.jvm.JVMSelfMonitoring.threadDumpsScheduledAt=<iso-date-time> (leave empty to start immediately)
* [QD-159] dxlib: Include com.devexperts.io.Chunked*
  - com.devexperts.io.Chunked* moved to "dxlib" module.
  - BufferedOutput.totalPosition() method is introduced to track the total number of written bytes, which
    is important for StreamOutput and ChunkedOutput.
  - Get rid of Compare-And-Set owner updates and well as from other broken attempts to provide concurrency.
    Chunks and ChunkLists are NOT THREAD-SAFE. Owner tracking is "fail-fast" way to detect errors. It works correctly
    in single-thread, and only does best-effort when somebody tries to work with chunks concurrently.
  - writeFromInputStream, writeFromDataInput, and writeFromByteBuffer utility methods are promoted into BufferedOutput.
  - writeFromChunk and writeAllFromChunkList are introduced in BufferedOutput.
  - There is a special implementation of writeFromChunk in ChunkedOutput that balances the need to have fewer chunks
    by copying small chunks (less that 256 by default) into a single chunk, with a need to avoid copying large chunks
    of data by appending big chunks from the same pool to the list of chunk without actually copying any bytes.
  - readToOutputStream, readToDataOutput, and readToByteBuffer utility methods are promoted into BufferedInput.
  - Default constructor for ChunkedOutput is introduced.
  - getPool() methods are introduced in Chunk and ChunkList.
  - Debug toString() are introduced in Chunk, ChunkList, ChunkPool, ChunkedInput and ChunkedOutput.
* [QD-486] dxlib: Improve mark/reset support in io.BufferedInput
  - mark(int/long) is be deprecated, because the actual value is irrelevant for all implementations of BufferedInput.
  - mark() and unmark() methods without parameters are be introduced.
* [QD-470] Get rid of "plugins as modules" in project structure, so that "mvn clean" correctly works
  - jspc-compiler-plugin is no longer a child module. It is a separately deployed project with a fixed version 1.0
  - dxfeed-codegen is no longer a plugin
  - Switch to maven-enforcer-plugin v1.2 to get rid of extra logging (see MENFORCER-135)
* [QD-461] More speed improvements for reading/writing
  - FileWriter defers file opening until first block is to be flushed and does it in parallel thread, too
  - All QTP-related buffer sizes are moved into a separate QTPConstants class
  - AbstractByteArrayComposer/Parser classes are renamed to AbstractQTPComposer/Parser with the
    corresponding name updates for their descendant classes. ByteArrayComposer/Parser classes are
    deprecated.
  - QTP parsers are now reading bytes from an arbitrary BufferedInput (which would be typically StreamInput,
    ChunkedOutput, or ByteArrayInput) that is set with setInput method. There are no more getProcessed, getBytes,
    removeBytes methods.
  - ByteArrayParser is deprecated. It still parser from ByteArrayInput for backwards compatibility and has all
    the legacy methods (getProcessed, getBytes, removeBytes, etc).
  - InputStreamParser class is introduced as a counterpart to OutputStreamComposer that provides a facade to
    parser a single file with binary QTP data (like a snapshot) that is created with OutputStreamComposer.
  - QTP composers are now writing bytes to an arbitrary BufferedOutput (which would be typically StreamOutput or
    ChunkedOutput) that is set with setOutput method. There are no more getProcessed, getBytes, removeBytes methods.
  - ByteArrayComposer is deprecated. It still writes to ByteArrayOutput for backwards compatibility and has all
    the legacy methods (getProcessed, getBytes, removeBytes).
  - Default QTP composer implementations for Binary/Tesxt/Blob formats limit only the message size in their
    "hasCapacity" method to avoid big data and subscription messages. However, ByteArrayComposer and
    ConnectionQTPComposer override hasCapacity to limit the overall number of bytes buffered while composing message
    to avoid reallocation of byte array (in case of ByteArrayComposer) and to limit the latency
    (in case of ConnectionQTPComposer).
  - MessageConsumer.processOtherMessage(...) method with byte[] data is deprecated,
    MessageConsumerAdapter.processOtherMessage(...) method with BufferedInput data is used instead
  - BufferedInput.hasAvailable() is introduced as a faster way to check if available() > 0
  - BufferedInput.hasAvailable(bytes) is introduced as a faster way to check if available() >= bytes
  - Error dumps now include offset from the beginning of file/stream.
  - BufferedInputPart.totalPosition() is changed to return position from the start of the parent input and
    the contracts of BufferedInputPart class are documented.
  - Error dumps now include bytes following parsed position (when available) for quick visual identification
    on what kind of invalid bytes are there in the file
  - Protected ByteArrayInput.readData(int) is reintroduced as a deprecated method to restore compatibility
    with a legacy code.
  - Default chunk size is 8k (for socket operation, etc)
  - FileConnector uses its own chunk pool with chunks of 64k. The size of the chunk for a file reading/writing
    can be changed with a system property:
    -Dcom.devexperts.qd.qtp.file.chunkSize=65536
* [QD-464] FileAnalysis Tool: Support ".gz" files
  - FileAnalysis now reads files via FileReader, which gives it support for container (gzip), file format detection,
    and split files. However, it works only for binary formats.
* [QD-465] FileAnalysis Tool: Improve reports
  - FileAnalysis tool print number of times each item was encountered and its average size
  - Symbols are categorized with respect to built-in filters (fx, fut, ind, spread, fut_op, bs_opt, other)
  - Percentages in reports are always displayed with respect to the complete file size
  - Distribution of data message body bytes by record category is also printed separately for each symbol category
* [QD-462] FileConnector option to parse messages without record descriptions using a specified scheme
  - Use [schemeKnown] option to file reader to enable this behavior
  - FileAnalysis also parses additional file options.
* [QD-463] BUG FIX: FileConnector shall understand full file paths on windows
  - "file:C:\Projects\my-data-file.data" now works
  - It is also fixed in -Dscheme=... (full jar file path can be specified) and in logging configuration
* [QD-485] RMI shall log request details (who and what) for server-side request-processing errors
* [QD-487] dxFeed API: Disable WildcardSymbol subscription by default and give stronger language in JavaDoc
  - If you need to enable wildcards, you have to contract data provider for configuration and include the
    following option in "dxfeed.properties": dxfeed.wildcard.enable=true
* [QD-508] BUG FIX: dxFeed JS API: dxfeed-webservice leaks memory when undeployed
* [QD-509] Do not track per-record stats for anonymous agents and distributors (reduces memory consumption)
* [QD-514] Support reading of partial/broken collectors debug dumps and symbol+record analysis
* [QD-516] Misc improvements in debug dump reader and collector debug infrastructure
  - Support full data dumps (ticker and history storage is dumped)
  - Support time in subscription dumps (both total and agent subscription is dumped)
  - Support queue analysis (including known time, sub time, queue status)
  - Filter any data, subscription, queue or symbol reference analysis by symbol and/or record
  - Support multiple, "+" separated, commands on a single line
  - Write everything to stdout in DebugDumpReader
  - Verification checks consistency of total subscription in addition to symbol counters
* [QD-517] FileConnector support for tcpdump-captured streams with "resyncOn" option
  - Binary TCP streams captured with tcpdump can be decoded. There is a built-in login to resync onto the
    potential beginning of the message in the stream with "resyncOn" option that takes an expected message type.
  - For example, to parse a file that is expected to contain history data, use the following command:
    qds dump file:<path-to-dump>[resyncOn=history_data,schemeKnown,speed=max]
  - Note, that scheme library/class can be provided with -Dscheme=<path-to-scheme-jar-or-class-name> option
  - By default, the byte stream is scanned for a message with a specified type and at most 8100 bytes long.
  - To change this threshold use -Dcom.devexperts.qd.qtp.file.BinaryFileQTPParser.maxResyncMessageLength=xxx
* [QD-538] Add method readUTFBody to BufferedInput and IOUtil.
* [QD-537] Improve subscription filter performance for en-cipher-ed symbols.
* [QD-543] Tools: ConnectionHandler (connect and compare tools) stops working (looses notification) on unexpected
  runtime exceptions
  - QD Collector implementations (Ticker, Stream, and History) are changed to make sure that if the RecordSink to
    which data is retrieved throws exception, then the record that caused the exception is already marked as
    processed and the next invocation of retrieve method skips it.
* [QD-544] dxFeed JS API Chart Demo does not work for symbols with attributes (like forex)
* [QD-546] dxFeed API: Explain limitations of getTimeSeriesPromise in JavaDoc
* [QD-545] Tools: Old tapes (without protocol descriptor) converted with "dump" tool give
  "NOT COMPATIBLE" warning on read
* [QD-547] Tools: Connect shows non user-friendly "Closing Thread[...]" message before exit
  - Internal class ConnectionHandler is renamed to ConnectionProcessor to better explain what it does
* [QD-550] FileConnector: Shall report 1 connection when reading file
* [QD-151] dxlib: Support custom Marshallers for Marshalled objects
  - Marshaller class is introduced
  - Marshalled class instance has a reference to Marshaller
  - Marshaller.Typed is a replacement for IOUtil.bytesToObjects/objectsToBytes, the later are removed
  - Marshalled.ensureBytes() method is introduced to convert object to bytes internally without necessarily
    requiring a byte array representation (that might change in the future).
  - ByteArrayOutput's min buffer size is reduced to 64 bytes
  - ByteArrayOutput.write method is optimized for Marshaller's use-case of converting object to a byte array
    without allocation of extra temporary arrays
  - ByteArrayOutput.needSpace method is final
* [QD-502] dxlib: Support reading/writing Marshalled objects to/from BufferedOutput/Input
  - BufferedOutput.writeMarshalled and BufferedInput.readMarshalled methods are introduced
* [QD-520] dxlib: Marshalled object shall be thread-safe and perform conversion under synchronization
* [QD-553] dxFeed API: Sample for application with permanent subscription retrieving last events
* [QD-557] dxlib: TimeFormatTest failed sometimes
* [QD-570] dxlib: Introduce com.devexperts.io.StreamCompression for transparent gzip/zip support
  - gzip supports sync flush and can be for compression/decompression of live data streams
* [QD-554] FileConnector/Tape: Rename "container" to "compression" and support zip
* [QD-575] dxlib: Static helper methods in URLInputStream to openConnection and checkConnectionResponseCode
* [QD-560] dxFeed API: Introduce Promise.awaitWithoutException convenience method
* [QD-561] dxlib: Introduce ThreadLocalPool and convenience constructors that enable override of pool sizes via
  JVM system properties
  - Also introduced LockFreePool convenience constructor that enables override of pool size via JVM system property
  - Default ChunkPool now uses ThreadLocalPool and property names to change pool sizes have changed:
    + com.devexperts.io.Chunk.threadLocalCapacity - the capacity of thread-local pool of chunks (3 by default)
    + com.devexperts.io.Chunk.poolCapacity - the capacity of global pool of chunks (4096 by default)
    + com.devexperts.io.ChunkList.threadLocalCapacity - the capacity of thread-local pool of chunk lists (3 by default)
    + com.devexperts.io.ChunkList.poolCapacity - the capacity of global pool of chunk lists (1024 by default)
    Other properties for this pool (have not changed):
    + com.devexperts.io.chunkSize - the size of the chunk (8192 by default)
    + com.devexperts.io.recyclableChunkListCapacity - the maximum size of pooled chunk list (1024 by default)
  - Compression/decompression and object serialization/deserialization pools can be sized with:
    + com.devexperts.io.ObjectSerializer.poolCapacity - the capacity of object serializer pool (16 by default)
    + com.devexperts.io.ObjectDeserializer.poolCapacity - the capacity of object deserializer pool (16 by default)
    + com.devexperts.io.Deflater.poolCapacity - the capacity of deflater pool (16 by default)
    + com.devexperts.io.Inflater.poolCapacity - the capacity of inflater pool (16 by default)
  - RecordBuffer now uses ThreadLocalPool and property names to change pool sizes have changed:
    + com.devexperts.qd.ng.RecordBuffer.threadLocalCapacity - the capacity of thread-local pool of bufs (3 by default)
    + com.devexperts.qd.ng.RecordBuffer.poolCapacity - the capacity of global pool of bufs (1024 by default)
  - QD implementation system properties to change pool sizes have changed:
    + com.devexperts.qd.impl.matrix.Distribution.poolCapacity - the capacity of distribution objects pool (2*CPUs by default)
    + com.devexperts.qd.impl.matrix.Notification.poolCapacity - the capacity of notification objects pool (2*CPUs by default)
  - QD RMI implementation system properties to change pool sizes have changed:
    + com.devexperts.rmi.Message.poolCapacity - the capacity of RMI ComposedMessage objects pool (1024 by default)
    + com.devexperts.rmi.Chunk.threadLocalCapacity - the capacity of thread-local pool of chunks (3 by default)
    + com.devexperts.rmi.Chunk.poolCapacity - the capacity of global pool of chunks (4096 by default)
    + com.devexperts.rmi.ChunkList.threadLocalCapacity - the capacity of thread-local pool of chunk lists (3 by default)
    + com.devexperts.rmi.ChunkList.poolCapacity - the capacity of global pool of chunk lists (1024 by default)
  - QDS file ChunkPool now uses ThreadLocalPool and property names to change pool sizes have changed:
    + com.devexperts.qd.qtp.file.Chunk.threadLocalCapacity - the capacity of thread-local pool of chunks (3 by default)
    + com.devexperts.qd.qtp.file.Chunk.poolCapacity - the capacity of global pool of chunks (512 by default)
    + com.devexperts.qd.qtp.file.threadLocalCapacity - the capacity of thread-local pool of chunk lists (3 by default)
    + com.devexperts.qd.qtp.file.poolCapacity - the capacity of global pool of chunk lists (128 by default)
    Other properties for this pool (have not changed):
    + com.devexperts.qd.qtp.file.chunkSize - the size of the chunk (65536 by default)
    + com.devexperts.qd.qtp.file.recyclableChunkListCapacity - the maximum size of pooled chunk list (1024 by default)
* [QD-563] QD Core: API infrastructure to define an extensible list of parameters when creating agents and distributors
  - QDAgent.Build and QDDistributor.Builder interface are introduced.
  - The recommended way of creating an agent in collector is now collector.agentBuilder().build()
  - The recommended way of creating a distributor in collector is now collector.distributorBuilder().build()
* [QD-566] dxFeed API: Update behavior of Promises.allOf to actually wait for completion of all promises
  - It is be better suited to retrieving multiple promise and should not cancel other promises when one of the
    promises completes exceptionally.
* [QD-567] dxFeed API: Improve getLastEventPromise JavaDoc to explain retrieval of multiple events
* [QD-154] dxFeed API: Authorization
  - DXEndpoint.user(...) and password(...) methods are introduced.
  - "dxfeed.user" and "dxfeed.password" properties are supported.
  - demo/demo becomes default user/password for all samples and all free demo services.
* [QD-124] dxFeed API: Access to historical onDemand data
  - com.dxfeed.ondemand.OnDemandService is introduced in "dxfeed-api" module.
  - Methods to control on-demand historical tick data replay are introduced.
  - Available control methods: replay, pause, setSpeed, stopAndResume, stopAndClear.
  - Available state query methods: isReplaySupported, isReplay, isClear, getTime, getSpeed.
  - add/removePropertyChangeListener to track state changes.
  - "dxfeed-ondemand" module provides implementation on OnDemandService.
  - "dxfeed-samples" modules provides "ondemand" console sample and
    "ui_quotetable_ondemand" Swing UI sample with simple replay controls.
  - Old "replay.jar" from MDS is integrated into "dxfeed-ondemand" module:
     + com.devexperts.mds.replay package becomes com.dxfeed.ondemand.impl
     + com.devexperts.mds.replay.impl package also moves to com.dxfeed.ondemand.impl
     + com.devexperts.mds.replay.impl.event package becomes com.dxfeed.ondemand.impl.event with
       all classes from this package acquiring "MDR" prefix (Event becomes MDREvent,
       MarketMaker becomes MDRMarketMaker, etc).
  - BUG FIX: MarketDataReplay becomes compatible with fresh version of dxlib. Loading
    of stored "mdrcache" file now works properly.
  - MarketDataReplay becomes compatible with modern dxFeed data scheme. It now support both
    legacy Fundamental and TradeHistory records as well as modern Summary and TimeAndSale records.
  - MarketDataReplay uses unique temp file names when writing cache.
  - OnDemandConnector is implemented. It supports "ondemand:<address>" scheme. This connector is
    used by OnDemandService implementation and must be present in the address string to make
    replay service available. This connector can be used with all qds tools like connect, dump,
    etc. Use "Help" tool to get help on "ondemand" topic to see what properties this connector supports.
  - DXEndpoint.Role.ON_DEMAND_FEED is introduced for "on-demand only" use. It does not connect to its
    until OnDemandService.replay is called and cannot be connected to an ordinary data feed at all
    (non-on-demand connectors are ignored in its connection string)
* [QD-352] BUG FIX: dxlib: TimeFormat fails to parse ISO 8601 data with "Z" for GMT
* [QD-356] BUG FIX: dxFeed API: DXFeed.detachSubscription does not work.
* [QD-359] dxFeed API: Introduce DXFeed.detachSubscriptionAndClear method
* [QD-340] dxFeed JS API: onDemand integration
  - Multiple MarketDataReplay instances with the same configuration share a single cache instance.
  - dx.feed JS object includes onDemand control methods: replay, pause, setSpeed, stopAndResume, stopAndClear.
  - dx.feed.state object provides state properties: connected, replaySupported, replay, clear, time, speed.
  - dx.feed.state.onChange can be assigned to track dx.feed.state changes.
  - JS API "Debug console" sample includes onDemand controls similar to DXFeedQuoteTableOnDemand sample.
* [QD-568] dxFeed API: Support Instrument Profile connections with live streaming updates
  - com.dxfeed.ipf.live package is introduced for clients.
  - InstrumentProfileCollector class to keep a live set of instrument profiles.
  - InstrumentProfileConnector class to connect to a live stream of instrument profile updates. It identifies
    itself with "X-Live: yes" header in the requests it makes. It can also periodically check regular files
    and regular http servers for updates with HEAD requests.
  - InstrumentProfileReader works as before, but identifies itself with "X-Live: no" header in the requests it makes.
  - com.dxfeed.ipf.services package is updated for servers.
  - InstrumentProfileServer is introduced to support live instrument profiles protocol. It correctly responds
    to HTTP HEAD requests and reports last modification time. It primarily detects the required protocol (live
    vs snapshot) via "X-Live" header, but it also support "?live" request parameter for testing purposes mainly.
  - InstrumentProfileService is deprecated and is reimplemented on top of InstrumentProfileServer, so that
    a drop-in replacement provides additional features for instrument profile providers that are currently implemented
    on top of InstrumentProfileService. Live stream is not supported, but last modification time is tracked
    and supported, which gives much better overall performance both with InstrumentProfileConnector and with
    dynamic ipf filters (that also rely on HEAD requests and last modification times).
  - Instruments tool can work in a server mode when --write :<port> option is specified.
* [QD-576] dxFeed API: Improve javadocs style
  - Added stylesheet.css
  - Fixed javadoc problems in dxlib and in dxfeed-api modules.
  - Consistent "Provides ..." wording in package.htmls
* [QD-573] FileConnector should continue to the next file on detection of corrupted file
  - Also fixed a bug with handling of broken binary files that was introduced by QD-457 parsing aggregation.
    Now, if a broken message in binary QTP format follows a set of correct messages of the same type,
    the parse processes messages from the correct message and ignore everything in the broken one.
    There is a unit-test to expose this case.
* [QD-574] Tools: connect and dump tape shall flush file even when data stops coming
  - Use the following system property to adjust the maximal time data can be kept in memory before being flushed
     + com.devexperts.qd.qtp.file.maxBufferTime (default value is "1s")

QDS 3.141:

* [QD-539] dxlib: Logging shall not install its logging configuration when it was manually configured in advance

QDS 3.140:

* [QD-534] BUG FIX: Binary incompatible change in QuickSort.sort signature

QDS 3.139:

* [QD-531] BUG FIX: Socket connector leaks threads when SSL session fails to establish
* [QD-532] dxlib: Generify QuickSort (garbage-free sorting) utility class
 - Unit test for QuickSort method is added, too.
* [QD-527] BUG FIX: dxlib: QuickSort fails with exception when sorting live data
 - Unit test for non consistent order of sorted elements
 - This definitely fixes both Timing and Schedule classes (see QD-504)
* [QD-528] BUF FIX: LocalLock erroneously reports lock wait problems.
* [QD-526] Exception while transforming in parallel with having RetailFeildsStatement.

QDS 3.138:

* [QD-518] BUG FIX: New history subscribers are starved under load of data updates
  - History retrieval logic is changed to balance retrievals from agent buffer (updated records) and
    from the global history buffer (snapshot) according to their order in the queue. Items at the head of the queue
    are moved to the tail of the queue once they've been retrieved if they are still not complete to avoid a case where
    head item in the queue constantly updates or receive more snapshot data, thus stays at the head of queue and
    starves everything else.
* [QD-515] QD Core: Expose error conditions (buffer overflows and exceptions) via JMX
  - Buffer overflows are counted and reported in "DIST" section of collector counters.
  - Exceptions (like OutOfMemoryError) that can fatally corrupt QD core invariants are caught and exposed via
    "FatalError" management attribute in collectors management JMX beans.
* [QD-522] BUG FIX: IO Read/Write lags and rtts are shown as unavailable arrays in JMX stats
  - They are no tracked per record and should not be displayed as arrays.

QDS 3.137:

* [QD-504] Timing crashes on Java 7 with IllegalArgumentException: Comparison method violates its general contract!
* [QD-507] BUG FIX: Tools: NetTest does not work (IllegalMonitorStateException)

QDS 3.136:

* [QD-500] SSL Shall use default keyStore/trustStore when URL is not explicitly specified
* [QD-490] TimeSyncTracker: Avoid garbage during routine monitoring.
* [QD-492] Provide garbage-free formatting method to Decimal.
* [QD-496] Improve InstrumentProfileTransform to allow parallel transformation in separate threads.
* [QD-503] dxFeed scheme: add phantom records and fields required for data conversion.

QDS 3.135:

* [QD-495] CompositeRecords.forRecords cannot be used in CompositeRecords.makeOr

QDS 3.134:

* [QD-489] IPF symbol filter shall accept wildcard but shall not contain it.
* [QD-491] Tools: Wildcard subscription is generated when ipf+stream are used
* [QD-493] Symbols with spaces and braces cannot be used in tools, shall support quoting for them
  - Quoting of spaces with [...] is not supported.
  - Quoting of any special character with \ is now supported, including quoting of braces.
  - Block quoting in regex-like way with \Q...\E is now supported.
* [QD-494] Composite filters based on symbol sets are improperly wrapped in parenthesis when converted to string

QDS 3.133:

* [QD-483] qds-monitoring: Option to log collectors counters
  - The following JVM options turn on logging of collector counters for each collector in QDEndpoint in
    addition to regular connectors statistics and using the same configured logging period:
      -Dcom.devexperts.qd.monitoring.MonitoredQDEndpoint.logCollectorCounters
  - This code is located in "qds-monitoring" module.
  - "reportCounters" JMX operation provides report for each collector in the group of collector that is covered
    by the corresponding MBean, "resetCounter" resets counters for all collectors in the group
    (without affecting periodical logging)

QDS 3.132:

* [QD-482] Dynamic IPF filter does not detect that filter content did not change

QDS 3.131:

* [QD-467] BUG FIX: Tools: Compare does not work (IllegalArgumentException)
* [QD-468] BUG FIX: Tools: Compare does not print statistics

QDS 3.130:

* [QD-460] BUG FIX: Collector counters are wrong in DIST section and in TOP_RPS_IN
  - Distribution counters fixed
  - As part of this fix, Ticker interleave is limited to 4. Classes that implement 5 and 6 interleave are dropped
    (they are not used in production anyway, since there is no practical benefit in interleave above 4).

QDS 3.129:

* [QD-459] FileConnector shall play from the specified files when "start" if set even without data at that time
  - FileConnector with an explicit set "start" property shall start playback at this specified file.
    It shall not scan for a first event.

QDS 3.128:

* [QD-453] Agent shall not buffer/queue data when listener is VOID, take 2
  - Data shall not be buffered on addSub when listener is VOID, too
* [QD-454] Rewrite TimeDistribution using log2 intervals to minimize storage requirements for a given precision
  - HIGH precision provides at least 1% precision for measurements up to 10 minutes and occupies around 18Kb of memory
  - LOW precision provides at least 7% precision for measurements up to 10 seconds and occupies around 2Kb of memory
  - Class is moved to com.devexperts.util package in dxlib-qd-sandbox along with AtomicArrays
* [QD-456] BUG FIX: Tools: Dump shall preserve RAW_DATA messages
* [QD-455] Improve speed of conversion with dump tool
  - GZip container now supports compression level specification. For example, to compress with level 1 when
    using --tape option for tools, use the following option
      --tape data-file.qds.gz[container=gzip[level=1]]
  - Level 1 compression is significantly faster (>30%) and produces approximately 15% larger tape files
  - Reusable buffers are implemented in FileWriter, data is physically flushed at least once every second
  - Writing/compression is moved into a separate thread, which nicely combines with level=1 compression for
    up to x2 dump conversion speed improvement
* [QD-457] Aggregate parsed messages into larger ones in a mix of different incoming message types
  - Now a mix of incoming small ticker, stream, and history data messages is buffered into 3 buffers by
    a parser and processed in a larger batches
  - It shall significantly improve multiplexor throughput
* [QD-458] dxFeed API: Misc improvements to Promise, take 2

QDS 3.127:

* [QD-450] BUG FIX: ArrayIndexOutOfBoundsException when agent listener is VOID
* [QD-451] Tweak TimeDistribution precision
  - HIGH precision provides at least 5% precision for measurements above 10us and occupies around 29Kb of memory
    per instance of TimeDistribution
  - LOW precision provides at least 17% precision for measurements above 3us and occupies around 2.7Kb of memory
    per instance of TimeDistribution
* [QD-452] dxFeed API: Misc improvements to Promise
  - Fail-fast check for NullPointerException and try{...}catch for external handlers in all cases
  - Promises.allOf(...) method variation that takes varargs
  - Promises.anyOf is introduced in two variations in addition to Promises.allOf
  - Defensive copy in Promises.xxxOf methods

QDS 3.126:

* [QD-432] Measure end-to-end data lag in microseconds.
  - Average data lag is measured and is periodically reported to an outgoing connection via heartbeat message
    (heartbeat is generated every 10s or 32Kb, whichever happens first)
  - Data lag includes processing lag inside QDS core and connection round-trip-time
  - Lag and rtt are reported to MARS and to the console:
     + Read lag includes rtt of the connection on which it was read (=lag right after data was read)
     + Write lag does not include rtt of the connection (=lag right before data is about to be written)
     + Difference between write lag and read lag is equal to processing delay
  - Average data record rps (records per second) and subscription rps are reported separately
  - Reported lag is averaged across all connections, averaging is weighted by the number of data records transferred
  - Reported rtt is averaged across all connections, averaging is weighted by the number of all records transferred
  - Previous LatencyMonitor framework (QD-187) is superseded by this change and is removed
  - API changes in QD include RecordMode.MARKED_DATA with RecordCursor.has/get/setTimeMark methods
  - Using this API, data providers can provide their marks to compute processing delay and data consumers can
    figure out what is the lag of data they are receiving if needed
  - Data providers that are running this version of QDS but do not use API to report their processing lag
    send to data consumers only "composing" lag that is measured while messages are being composed into
    byte arrays, and on the receiving side connection rtt is added to it
  - Data providers that are running older version of QDS do not report lag. On the receiving side
    their lag is reported as being equal to connection rtt if it can be measured, or nothing at all
    if they run pre-3.125 QDS version and do not support rtt measurement
* [QD-429] dxFeed API: UI sample with a Candle chart.
* [QD-430] Get rid of .form files in UI samples.
* [QD-431] DataExtractor servlet: Support TomCat deployment
* [QD-224] dxFeed API: Convenient API to download a range of historical data without subscription
  - Method DXFeed.getTimeSeriesPromise(eventType, symbol, fromTime, toTime) is introduced.
  - Sample FetchDailyCandles is introduced.
  - All simple samples are moved into a separate folder and a "simple" batch file for them is introduced.
  - Use "simple FetchDailyCandles IBM" to try fetching daily candles with the new sample.
* [QD-437] BUG FIX: dxFeed API: Closing not-connected endpoint throws NullPointerException.
* [QD-434] BUG FIX: Help for "file" does not list all options.
* [QD-433] BUG FIX: FileConnector shall not allow "~" to be replaced by anything short of full date time.
  - Any kludgy usage of "~" is no longer possible
  - Manually generate files that has a non-complete timestamp (missing timezone, for example), are not supported, too
* [QD-439] BUG FIX: Tools: Shall correctly post a list of contracts/collectors to log
  - QDEndpoint.Builder not accepts a list of "QDCollector.Factory" instance in its "withCollectors" method that
    supersedes "withContracts" methods as "QDContract" implements "QDCollector.Factory" interface.
  - Tools "OptionCollector" is rewritten via "withCollectors" which completes migration to QDEndpoint.Builder and
    QDEndpoint.addCollector and QDEndpoint.addCollectors are now deprecated.
* [QD-405] dxFeed API: Predefined (permanent) subscription configuration option
  - "dxfeed.qd.subscribe.<collector>" property with a value of "<records> <symbols>" can be defined in
    "dxfeed.properties" file to define a permanent subscription for Role.FEED endpoint.
  - dxfeed-webservice comes preconfigured with dxfeed.qd.subscribe.ticker=
      Quote,Trade,Summary,Profile http://dxfeed.s3.amazonaws.com/masterdata/ipf/demo/mux-demo.ipf.zip
  - dxfeed-ipf-filter module is moved into "qds.jar" from "qds-tools.jar"
  - This feature is enabled by a QDEndpoint.withSubscribeSupport prefix which should be explicitly called
    if needed and is used by DXFeed implementation
* [QD-448] QD Agent shall not buffer/queue data when listener is VOID
  - Recommended pattern for QDAgent that is subscription-only (does not need data) is to invoke
    agent.setRecordListener(RecordListener.VOID) immediately after agent is created. This usage
    is now optimized (data is not queued, nor buffered).
* [QD-435] QD Tools: dump shall support filters
  - Use dump tool to parse file and select only records that match a specified filter
  - Use dump tool to retrieve subscription from remote host that matches a specified filter
* [QD-442] RecordBuffer shall fail-fast on reuse/release of released buffer.
* [QD-443] BUG FIX: dxFeed JS API: dxfeed-webservice leaks memory when deployed/undeployed
* [QD-445] QD shall not register JMXStats for anonymous agents and distributors
  - Also fixed race condition with concurrent close of endpoint and establishing a connection that
    resulted in IllegalStateException while trying to create QDStats for connection
* [QD-444] Misc improvements in QD core management counters and utility methods
  - The GLOCK section (for global lock) includes a computed "% 1cpu" for "wait" or "lock" that show the percentage
    CPU utilization (for a single CPU) of waiting and inside the lock of the corresponding operation
  - "reportData" operation has an additional "String format" option and supports CSV output in addition to
    (default) HTML
  - Support "reportData" for "Any" collector
  - The new "reportCounters(String format)" management operation returns HTML or CSV representation of counters with
    GLOCK and TOP RPS sections represented as a table for ease of visual analysis
  - Precision of TimeDistribution is increased
     + measurements under 1 microsecond are averaged precisely
     + LOW precision mode instance has more counters (low precision instance now occupies 1.8KB)
* [QD-446] QDFilterFactory context for security and modularity reasons
  - Context includes RECORD_ONLY and SYMBOL_SET contexts (e.g. in the connect tools arguments) to improve modularity
    of the corresponding code
  - Builtin filters like "opt", "cs", and "fx" are recognized as symbols-only in the symbols context and can be
    use to narrow down a list of symbol from an IPF file, for example
  - REMOTE context is used when parsing remote filter and IPF filters are not supported in this context for
    security reasons
* [QD-447] BUG FIX: QD Monitoring occasionally reports negative buffer size
  - The problem is fixed by a change in "size" computation in QDStats. First, "removed" counter is volatile read,
    then "added" counter is read, then different is computed. There is no volatile assignment in the write path,
    so technically negative sizes can still be seen, albeit not on x86 architecture.
  - All reads for reporting are now volatile to decrease chances of word tearing on 32-bit JVMs.
  - Also, AtomicArrays utility class is moved into com.devexperts.qd.util package.
* [QD-449] BUG FIX: Management does not process annotations for operations with primitive type arguments
* [QD-440] Tools: Post shall warn when connected to the wrong port
* [QD-436] FileConnector shall not repeatedly complain about unknown records

QDS 3.125:

* [QD-375] Schedule: add new holiday calendar, uptodate ICE-EU holiday calendar
* [QD-376] Add Order record to feed filters.
* [QD-370] Schedule: Add USA, Canada and Japan holidays for 2012-2023 to schedule.properties.
* [QD-364] Schedule: Schedule creates time holes when holiday intersects with weekdays definitions.
* [QD-343] dxFeed API: OrderBookModel does not show sole composite quote when size is 0
* [QD-351] Tools: Performance and memory usage optimizations for InstrumentProfile loading and transform
  - InstrumentProfileReader can be subclassed to implement intern() for string caching
* [QD-353] BUG FIX: JMXStat.createRoot hangs on attempt to create root with duplicate name
* [QD-354] QD Monitoring shall reuse monitoring core objects when creating multiple endpoints with
  the same monitoring properties.
  - com.devexperts.qd.monitoring.MonitoringEndpoint class is introduced. It is shared between QDEndpoint instances
    that have the same monitoring parameters and name.
  - com.devexperts.qd.monitoring.JMXEndpoint class is introduced. It is shared between QDEndpoint instances
    that have JMX parameters (like "jmx.html.port). These parameters are typically specified as JVM properties,
    so typically there is one per-JVM instance of JMXEndpoint.
  - MARSEndpoint is shared between MonitoringEndpoint instances with the same MARS properties
    (mars.root and mars.address)
* [QD-360] QD Monitoring shall aggregate stats for connectors with the same name.
  - Connectors with the same name are aggregated in log stats and use the same MARS node.
  - Number of connectors in a group is indicated by *<n> appended to name (when <n> more than one).
  - Only first in a group of connectors with same name is registered in JMX.
  - This way, multiple (per-user) ondemand connectors in JS API Web container do not lead to pollution
    of logs and MARS nodes.
  - Algorithm to assign unique default names is implemented in the code that parses connection strings instead.
  - As an additional feature total number of connections for all connectors in reported to MARS along with
    a total number of bytes read and written.
  - TOP read/write report format in log is slightly changed.
  - TOPs are now available to all ConnectorsMonitoringTask users who provide a list of connectors to it.
    They do not rely anymore on the information in the root stats.
* [QD-369] QDS Tools: Ability to specify QD endpoint name in all tools with -n|--name option
  - Is supported in multiplexor, feed, connect, compare, post, and dump tools.
  - Compare tool accepts two names separated by '/' (this option was formerly named -a|--alias)
* [QD-371] QD Connectors: Send name and mars.root (if present) in protocol descriptor
  - When qds-monitoring.jar is not available, then only local endpoint name is sent in "name" property.
  - With qds-monitoring.jar, additional "mars.root" property is sent.
  - Endpoint's "monitoring.name" property is renamed to "name" for consistency and simplicity.
  - All endpoint classes in API (QDEndpoint, RMIEndpoint, MonitoringEndpoint, DXEndpoint) support user-specified
    "name" property to distinguish multiple endpoints in the same JVM. This property can be specified using
    "withName" method on the endpoint builder class or in properties file. The distinguishing feature of the
    name in DXEndpoint is that it is not taken from JVM system properties by default, but can be only explicitly
    specified in code or in properties file.
  - NOTE: It is recommended to assign short and meaningful endpoint names when multiple endpoints are used in the
    same JVM. The name of the endpoint shall describe its role in the particular application.
  - Endpoint name is used when logging endpoint properties during its creation.
* [QD-373] FileConnector and --tape should automatically detect .time.gz pair to .data.gz file.
  - When writing --tape to <name>.data.gz file then <name>.time.gz file will be automatically created.
    Use [time=none] option to avoid this behavior and write tape without timestamps.
  - When reading from file:<name>.data.gz file then <name>.time.gz will be automatically read.
    Use [time=none] option to avoid this behavior and read tape without timestamps.
* [QD-358] QD Core: Introduce new convenience methods to retrieve data from ticker and history storage.
  - QDCollector.examineDataBySubscription
  - QDTicker.getDataIfAvailable
* [QD-389] dxFeed API: Retrieve last event without subscription.
  - com.dxfeed.promise.Promise utility class is introduces to represent promised futures results of long-running
    computations for use in synchronous and asynchronous manner.
  - com.dxfeed.promise.Promises provides static helper methods. Promises.allOf is a helper method to work
    with multiple promises waiting for all of them to complete.
  - DXFeed.getLastEventPromise is introduced.
  - DXFeedOptionChain sample uses DXFeed.getLastEventPromise to retrieve underlying last price and option prices.
* [QD-414] dxFeed REST web service to get last events snapshot
  - Use it with <context>/leastEvents(.json|.xml)?events=<list>&symbols=<list>[&indent]
  - Demo page for the service is included
* [QD-347] dxFeed API: TheoPrice Dividend and Interest scheme fields must be optional.
* [QD-345] BUG FIX: NioConnector writer thread hangs in select.
* [QD-363] BUG FIX: FileConnector shall not wait for more data files when running with [stop] property.
  - Never get into "Data file is over. Waiting for more data..." state when running
    with a single file, in cycle more, or with [stop=xxx] attribute.
* [QD-374] BUF FIX: FileConnector [stop=xxx] property shall work based on file name only with [ignoreTime] or [time=none]
  - Also, [ignoreTime] or [time=none] shall be compatible with [start=xxx].
    Process data from all parsed files when both are set. This way, [ignoreTime,start=<t1>,stop=<t2>] can be used
    to fully parse a range of files based on their file name only.
* [QD-380] FileConnector shall support [speed=xxx] property
  - Speed is measured vs real time. Default is speed=1 for real time replay.
  - [ignoreTime] option is deprecated. Use [speed=max] to replay data from file as fast as possible.
  - Never get into "Data file is over. Waiting for more data..." state when running
    with a defined speed != 1. The waiting mode is basically reserved for real time delayed replay.
* [QD-361] dxFeed API: DXEndpoint change notifications must be serial.
* [QD-365] BUG FIX: dxFeed API: Deadlock during connector state updates.
  - Make sure that DXEndpoint.closeAndAwaitTermination and awaitNotConnected work when called from
    inside of property change event handlers.
* [QD-362] Introduce RecordBuffer mode of operation to replace SubscriptionBuffer, deprecate the latter
  - com.devexperts.qd.ng.RecordMode enum is introduced with the following values:
    + DATA (default mode) to store all field values as RecordMode worked before.
    + HISTORY_SUBSCRIPTION to store record, symbol and time.
    + SUBSCRIPTION to store just record and symbol.
  - RecordBuffer and RecordCursor have mode that can be queried via getMode() method.
  - RecordBuffer's mode can be specified in constructor, in getInstance() call or via setMode() method.
  - RecordBuffer's mode can be changed with setMode() only when buffer is empty.
  - RecordBuffer's mode is retained when clear() method is called.
  - RecordBuffer implements SubscriptionProvider, SubscriptionConsumer, SubscriptionIterator, SubscriptionVisitor.
  - All QD and dxFeed API code is migrated to use RecordBuffer instead of SubscriptionBuffer (with exception of tests).
  - xxxVisitor, xxxIterator, xxxConsumer, and xxxListener (where xxx is Data or Subscription) all have VOID
    static constant to facilitate transition of xxxBuffer classes.
  - SubscriptionBuffer class is deprecated (DataBuffer was already deprecated for quite a while).
  - SubscriptionBuffer and DataBuffer classes show deprecation warning in log when loaded.
  - A number of non-used deprecated methods from QD API are dropped.
  - MessageType.getRecordMode is introduce to facilitate parsing of QTP message into RecordBuffers.
  - ByteArrayParser uses a single RecordBuffer for all its needs.
  - com.devexperts.qd.sample.TestThroughput takes full advantage of RecordBuffer
    (it does not have custom implementations of legacy interfaces anymore).
* [QD-367] QD Core: Stronger deprecation of custom implementations of legacy xxxVisitor and xxxIterator interface
  implementations.
  - Native support for RecordSource in History.processData.
  - DataVisitor.VOID and SubscriptionVisitor.VOID implement RecordSink interface.
  - Warning is shown in the log the first time when custom implementation of DataIterator interface
    (not a RecordBuffer) is passed into any Collector.processData method. Use RecordBuffer instead.
  - Warning is shown in the log the first time when custom implementation of DataVisitor interface
    (not a RecordSink) is passed into any Agent.retrieveData method. Use DataSink or RecordBuffer.
  - HistoryBuffer keeps data in RecordCursor-compatible format and natively retrieves/examines into RecordSink.
  - Warning is shown in the log the first time when custom implementation of DataVisitor interface
    (not a RecordSink) is passed into any History.examineData method. Use DataSink or RecordBuffer.
  - com.devexperts.qd.ng.DataSink is deprecated. Class AbstractRecordSink in the same package takes is place
    as a bridge between legacy xxxVisitor interface and com.devexperts.qd.ng.RecordSink interface.
  - com.devexperts.qd.logger does not rely on legacy xxxVisitor and xxxIterator interface implementations.
  - All QTP composers implement RecordSink via implementation in AbstractByteArrayComposer.
  - RecordSource and RecordSink extend Data/SubscriptionIterator and Data/SubscriptionVisitor interfaces
    correspondingly marking all methods of those legacy interfaces as deprecated. This way in any class that
    has two methods with the same one where one accepts the legacy interface and the other com.devexperts.qd.ng
    interface, the method with ng interface will be considered as "more specific" during compilation.
  - MessageConsumerAdapter.processRecordSource method is introduced. It calls overriding processData or
    processSubscription depending on the message type.
  - RecordSource supports slicing with newSource methods.
  - RecordSource introduces current and getLimit methods from RecordBuffer.
* [QD-366] Improve built-in RecordBuffer pool, introduce capacity-limited buffering capabilities
  - RecordBuffer has setCapacityLimited method that enables capacity tracking of hasCapacity method
    (that otherwise always returns true)
  - DataProcessor and SubscriptionProcessor classes use capacity-limited buffers, thus dxFeed API enjoys
    ability to processes data and subscription in a well-sized chunks.
  - RecordBuffer's thread-local pool keeps up to 3 buffers per thread.
* [QD-377] BUG FIX: dxlib: null messages in LogFormatter shall be supported
* [QD-378] Introduce NG interface RecordProvider to replace DataProvider and SubscriptionProvider
  - com.devexperts.qd.ng.RecordProvider and RecordListener interfaces are introduced.
  - RecordProvider extends Data/SubscriptionProvider interfaces marking all methods of those legacy interfaces as
    deprecated. This way in any class that has two methods with the same one where one accepts the legacy interface
    and the other com.devexperts.qd.ng.RecordProvider interface, the method with ng interface will be considered
    as "more specific" during compilation.
  - Class AbstractRecordProvider is a bridge that provides implementation for legacy xxxProvider interface methods
    while requiring to implement only ng RecordProvider methods.
  - Legacy xxxProvider interface are not deprecated yet, but their javadoc includes "legacy interface" section.
  - com.devexperts.qd.util.LegacyAdapter class provides static methods to convert xxxVisitor instance to RecordSink,
    xxxProvider to RecordProvider, and xxxListener to RecordListener. It shows warning in the log the first time it
    sees a legacy interface instance that cannot be just casted to its NG counterpart but works by providing an
    adaptation layer.
  - QDAgent is now a RecordProvider, while QDDistributor has getAdded/RemovedRecordProvider method. Old methods
    that returned SubscriptionProvider instances are deprecated.
  - com.devexperts.qd.util.DataProcessor is deprecated. Its new name is RecordProcessor. SubscriptionProcessor is
    reworked into NG interfaces, but continues to be relevant until add/remove subscription can be represented in
    a single buffer.
* [QD-390] Deprecate DataConsumer and SubscriptionConsumer interfaces and introduce RecordConsumer
  - com.devexperts.ng.RecordConsumer interface is introduced as a replacement.
  - QDDistributor implements RecordConsumer.
  - QDAgent methods getXXXSubscriptionConsumer methods are also deprecated.
  - RecordBuffer.add and addAll are deprecated are replaced by process to be compatible with RecordConsumer.
  - AbstractDistributor.processData copies data into intermediate RecordBuffer (if needed) and invokes process.
    Legacy warning is show in the log the first time it occurs.
  - All cut-and-paste code for processDataIterator and processRecordSource is removed from collector implementations.
    Only processRecordSource remains.
* [QD-306] Support optional EventTime storage in RecordBuffer
  - RecordMode.TIMESTAMPED_DATA is introduced to associate additional long "EventTimeSequence" with every data record.
  - RecordCursor.hasEventTimeSequence/getEventTimeSequence/setEventTimeSequence are introduced to manipulate event time.
  - TimeSequenceUtil helper class to convert from regular long time millis to time sequence that is composed, by
    established QD convention, from integer seconds time and an integer sequence that has remaining
    millis in its top 10 bits.
* [QD-308] Introduce ability to write EventTime in FileReader/FileWriter from/into the same file as data
  - Virtual "EventTime" field is supported in both text and binary formats. When reading files without ".time"
    file, the presence of "EventTime" field is autodetected.
  - Text representation of "EventTime" time is compatible with ondemand data extractor text files. Thus, ondemand
    text files can be read by file connector with a proper preservation of timestamps from them.
  - Binary format's representation of "EventTime" is less efficient than all other ways to represent timestamp
    information, so it is not recommended for general use. It is reserved for interoperability between potential
    future extensions of the actual data records with event time field. In binary "EventTime" is encoded in
    "EventTime" and "EventSequence" fields similarly to TimeAndSale's "Time" and "Sequence" fields.
  - Use [time=none] option to ignore time is all its forms.
  - Use [time=field] option to force reading of "EventTime" from files (not recommended).
  - Files in binary format are written with timestamps in the payload of heartbeat message by default.
    This is the most efficient and recommended way to represent timestamps in binary tape files.
    This format corresponds to [time=message] option.
  - [time=message] can also forced for text files, but it is less convenient as every time message occupies
    a separate line like "== time=<timestamp>".
  - Old-style ".time" or ".time.gz" files can be forced using [time=text] or [time=long] option.
  - Files in text and csv formats are written with [time=field] format by default. This format is similar to
    the format used by ondemand data extractor.
  - Dump tool can be used to convert between all possible timestamp representations. Use the following approach:
      qds dump file:<file-to-read> --tape <file-to-write>[format=<format>,time=<time>]
    where <format> is "binary", "text", or "csv" ("blob" does not support event times in any way)
      and <time> is "text", "field", or "message" ("long" is legacy and "none" to get rid of timestamps)
    + You can split file during conversion with [split=xxx] while preserving original source timestamps.
    + Use [time=none] option on <file-to-read> to ignore original times and replace them with current time in output.
    + A comprehensive unit test for conversions between various formats by dump tool.
  - -S|--stamp option to "dump" and "connect" tools that was introduced in QD-196 as a dirty hack is rewritten based
    on the new mechanism. It prepends the original time (derived from either messages, event time fields, or time file)
    to all lines on the screen with the exception of the "==" message type designators.
  - When -S|--stamp option to "dump" tool is not specified, then timestamps both from ".time" files and from heartbeat
    payload messages will be represented by "== time=<timestamp>", because dump's tool default mode of
    operation is designed for a faithful representation of the source data in text format.
  - When -S|--stamp option to "connect" tool is not specified, then no timestamps will be shown, because timestamps
    are not part of the data record and do not travel through QD core.
  - When reading files in autodetected timestamp format (when [time=xxx] option is not specified), event time field
    takes precedence on the time derived from the payload of heartbeat messages. Use [time=message] option to
    file to ignore event times and used timestamps from heartbeat messages.
  - Text formats ([format=text] and [format=csv]) honor platform-specific line.separator when writing file.
  - The following QD API changes are introduced to support the above features:
    + HeartbeatPayload class is introduced to represent a payload of QTP HEARTBEAT message.
    + MessageVisitor.visitHeartbeat and MessageConsumer.processHeartbeat are introduced to transfer heartbeat messages
      with payload throughout APIs, so that timestamps can be represented in all text and binary formats for all
      types of content (both data and subscription).
    + AbstractByteArrayComposer.setWriteHeartbeat is introduced to turn on writing of heartbeat payloads.
    + AbstractByteArrayComposer.setWriteEventTimeSequence is introduced to write "EventTime" field in text and
      EventTime/EventSequence in binary composer implementations. Note, that last event time that is delivered to
      composer via visitHeartbeat methods is stored internally and is used when setWriteEventTimeSequence(true) is set.
      That is how conversion between conceptually different timestamp representations happen (between per-event time
      in time=field timestamp formats and per-block time in time=text,long,message timestamp formats).
    + AbstractByteArrayParser.setReadEventTimeSequence is introduced to enable reading of virtual "EventTime" fields.
      Heartbeat message payloads are always parsed if present.
* [QD-417] FileConnector format autodetection shall work separately for each subsequent file
  - This change facilitates update of the formats for tape files without the need to convert old files to the new format.
  - "container" (unless explicitly specified or implied from ".gz" extension) is autodetected separately for each file
    by its first bytes.
  - "format" (unless explicitly specified) is autodetected separately for each file by its first bytes.
  - "time" (unless explicitly specified) is autodetected separately for each file. First, if ".time" file is present,
    then timestamps are read from it (time=text detected), otherwise if time is found in heartbeats then it is used
    (time=message detected), otherwise if time is found in "EventTime" data field then it is used (time=field detected).
* [QD-418] FileConnector shall skip broken file and continue to the next one
  - If file is broken (this is especially likely with gzip container when writing of the file was terminated abnormally),
    then FileConnector logs exception and continues to the next file if possible.
* [QD-251] Better logging when QD-filter can't be created/loaded
  - Failures to initialize tool due to invalid format of arguments are logged with full stack trace first,
    then a short summary of error is printed on the console.
  - Various error messages are unified using the following guidelines:
    + All literal strings that are mentioned in error message are quoted with "..."
    + All literal characters are quoted with '...'
    + Character ':' is exclusively used to separate nested messages as in
      "Invalid filter: Failed to create ipf filter..."
* [QD-379] RMI: Provide more details in exception messages
  - Failures of all kinds during server-side task processing (cannot find subject or operation) are logged
    with mode details (remote host address is included) and are delivered to the client side with a detailed
    message.
* [QD-381] QDS Tools: "tools" without arguments and "help tools" should give similarly formatted list of all tools.
* [QD-384] Provide helper method withContracts on QDEndpoint.Builder.
* [QD-392] Remove deprecated unused classes and members as of September 2013.
* [QD-396] dxFeed API: Support subscription to Candle by String (in addition to CandleSymbol).
* [QD-349] BUG FIX: dxFeed JS API: Does not work when bound to the root context.
* [QD-350] BUG FIX: dxFeed JS API: Sample uses symbols that are not available on demo feed.
* [QD-395] dxFeed JS API: Support TimeSeriesSubscription for Candle and TimeAndSale.
  - JS API subscription management is generally improved.
  - Debug console supports time series subscription and from time manipulation.
  - Very simple chart demo application based on flot.
* [QD-397] QDStats shall throw IllegalStateException when creating children for closed stats.
  - QDStats.toString() is also implemented for debugging purposes.
* [QD-398] dxFeed API: Document that message events are streamed (no conflation)
  - Unit test is also added
* [QD-399] dxFeed API: com.dxfeed.event.EventType shall become an interface that is implemented by all events.
* [QD-400] dxFeed JS API: Shall use compressed JSON representation of events.
  - Send data scheme description (list of event props) only once per session.
* [QD-415] Misc improvements and changes in file formats (protocol descriptor headers and footers)
  - Protocol descriptors that are send over the network now include type=qtp property and version format that
    is sent with protocol descriptor was shortened (no copyright string in version) and it is now space-free.
    Now it looks like "QDS-3.125". When various QDS jars versions mismatch, then it is included into version
    like this: "QDS-3.125+dxlib-3.100".
  - Binary files written by tape now include protocol descriptor header and a heartbeat footer. Protocol descriptor
    has type=tape property and version=QDS-xxx. This is fully backwards compatible both ways with older QD versions.
    To write tape file without header and footer (just in case) use the following system property:
      -Dcom.devexperts.qd.qtp.file.FileWriter.noHeaderAndFooter
  - Text files written by tape also include text version of protocol descriptor header like "==DXP3 type=tape version=..."
    and a heartbeat footer "==". All message type lines do not include "QD_" prefix anymore, so the STREAM_DATA
    message line looks like "==STREAM_DATA". Old text formats are still supported (parsed), but the new text format will
    not be parsed by pre-3.125 QD implementations. In order to create a text file that can be parsed by older QD
    versions use the following two system properties:
      -Dcom.devexperts.qd.qtp.file.FileWriter.noHeaderAndFooter
      -Dcom.devexperts.qd.qtp.text.TextByteArrayComposer.useLegacyQDPrefix
  - Text format is autodetected by the first two "==" bytes.
  - CSV files are now optimized for Excel and R consumption and are maximally bare-bones. There is no support for
    message type lines, heartbeats, and protocol descriptors in CSV files. The only system message in CSV file
    is a record descriptor that starts with "#=" and this record descriptor serves as a CSV header when file contains
    data for only one record. Unless readAs property is specified, when CSV file is parsed, it is assumed to have
    STREAM_DATA message type.
  - CSV format is autodetected by the first two "#=" bytes.
* [QD-372] Report version of all QD modules in QD version string
  - Is incorporated into QD-415.
* [QD-416] Use field "propertyName" in text formats and in xxxMapping classes
  - Each record now has a "propertyName". By default, each record's property name is composed from its local name
    (that is used in binary protocol) with dots ('.') removed. However, RecordMapping in dxFeedScheme defines
    custom property names for fields so that field property name corresponds to the name of the property of the
    corresponding event.
  - DataRecord class has findFieldByName method that finds field by any of its four names. For example:
      - "Quote.Bid.Exchange" -- full field name (getName() method on the field)
      - "Bid.Exchange" -- local field name (getLocalName() method on the field)
      - "BidExchange" -- default field property name (result of AbstractDataField.getDefaultPropertyName(f.getLocalName()))
      - "BidExchangeCode" -- actual field property name (getPropertyName() method on the field) and defined by mapping.
  - xxxMapping classes use field property names to name their setXXX and getXXX methods. If property name is different
    from default property name, the methods based on the default property name are also defined but deprecated for
    backwards compatibility.
  - QTP binary and text parsers understand any of the above four field names in record descriptors.
  - Binary composer continues to use local field name for outgoing record descriptors.
  - Text composer now used field property name for outgoing record descriptors. Symbol column is named "EventSymbol".
    In order to create a text file that can be parsed by older QD versions use the following system property:
      -Dcom.devexperts.qd.qtp.text.TextByteArrayComposer.useLocalNames
  - SchemeDump tool (and Post tool help) print both property name and binary local name (in parenthesis).
* [QD-307] Extract FileReader logic from threading and configuration
  - FileReader class is not a thread any more. It accepts FileReaderParams and parses a sequence of files in all
    supported formats when its read(...) method is called.
  - FileReaderHandler class is now used as a reader thread in FileConnector.
* [QD-401] DataExtractor servlet: Introduce REST servlet frontend to connect tool for file reading
  - "qd-dataextractor.war" contains a delivery for the data extractor servlet. It has build-in sample
    configuration file "data.properties" that can be redefined via "data.properties" JNDI key or via system property
      -Ddata.properties=<path-to-data-properties>
  - Configuration has "data.file" parameters that define the path to the file that data extractor reads. It can
    be directly overriden via system properties, too:
      -Ddata.file=<path-to-data-file>
  - "data.readAs" parameter can be specified, too. It defaults to stream_data.
  - Values of parameters are resolved in this order: defaults from resources, system properties, specified config file.
    More specific parameters take precedence. In particular, configuration file that is specified via JNDI for this
    particular deployment overrides all other parameters.
  - Servlet is bound in the context to the following URLs: "/data", "/data.binary", "/data.text", "/data.csv".
  - It accepts "?help" use and shows a simple text help.
  - It accepts "records", "symbols", "start", and "stop" properties (all required) to define which data to extract.
  - Wildcards and filters can be used both for records and for symbols.
  - "format" is optional. For "/data" it defaults to "text", while for others the format is fixed by extension.
  - Progress for long-running queries is reported by printing heartbeat message with a timestamp of a file that
    is about to be processed. Only for "binary" and "text" formats (not supported in "csv").
  - Classes StreamWriter and MessageReader are introduced in com.devexperts.qd.qtp.file package (qds-file module)
    so that the logic of filtering and writing to a stream in different formats can be reused elsewhere.
  - RecordOnlyFilter.valueOf method is introduced to facilitate parsing of "records" parameters in the same format as
    accepted by "connect" tool.
* [QD-421] Report and use timestamp format in file protocol descriptor
  - "time" property in file protocol descriptor with the same meaning as "time" property of
    FileConnector and FileWriter is defined.
  - FileReader uses this property (if specified) to detect time format and act accordingly
* [QD-422] Misc improvements in FileAnalysis tool
  - Limit overall number of analyzed compression cases to 8 with at most 3 used at the same time.
  - Use property name as field name.
  - Various bugs fixed, too.
* [QD-423] Stats: Gather read/write records per second stats
  - "rps" are gathered and reported
  - QDStats are internally upgraded to store long values
  - Bugs with double accounting for values in rid_count=0 QDStats fixed
* [QD-424] Stats: Report record-weighted connection round-trip time
* [QD-406] Expand QDFilters framework to support "symbol lists" as a special class of filters
  - "connect" tool now parses its list of symbols as a filter in in special "symbol list" mode. In this mode
    anything that contains ".ipf" string is recognized as an IPF url and is read like a list of symbol.
  - IPFs and lists of symbols can be combined using regular ',' and '&' composite operations, for example,
    IPFs can be efficiently joined and filtered using patterns.
  - You can quote special characters ',', '&', '!' with backslash '\' to remove their special meaning
    if you need to use them in IPF URL.
  - Note, that in regular filters IPFs denote more than a list of symbols, they denote symbols with all
    possible attributes in {...}, so the above only works in "symbol list" mode in "connect" tool and the like.
  - Even things like IB[A-Z] are now recognized as symbols sets (up to 10000 symbols are converted into a set).
  - Symbols with {...} attributes can now be used in filters without need for a separate quotation of curly braces
    and commas inside attributes.
  - All symbol set filters are now optimized into an hash-based implementation via com.devexperts.qd.kit.SymbolSetFilter
    class that is based on a new com.devexperts.qd.util.SymbolSet class.
  - QDFilters.getKind() method is introduced to facilitate this functionality.
* [QD-225] Tools: Improve record name parsing with eliminating need to escape special characters (similar to symbol parsing)
  - Is incorporated by QD-406.
* [QD-427] Accept ';' as a regular character in patterns
  - The established convention is to use ';' to separate part of a symbol when symbol is in fact a tuple.
    For example "20112013-3;IBM", etc.
* [QD-425] BUG FIX: Connect tool with tape does not work properly with multiple connections
  - Connect tool creates a separate thread to process all incoming data.
  - FileWriter and MessageOutputStreamWriter classes (both used by connect, compare, and dump tools) are made
    thread-safe, so that they can be safely used even from multiple threads.
* [QD-426] dxFeed JS API: Support TomCat deployment
  - Websocket transport will not work (only long-polling)
  - Additional dependencies are added (that are required under TomCat)
  - Migrated to cometd 2.7.0
* [QD-428] BUG FIX: dxFeed API: CandlePeriod with negative value fails to parse from string

QDS 3.124:

* [QD-338] dxFeed API: Option series and chains
  - Rename OptionSerie class to OptionSeries.
  - JavaDoc fixed to use ASCII quotation marks.
* [QD-341] dxlib: IndexedSet can raise ConcurrentModification alert when replacing existing value.
* [QD-342] dxFeed API: add book correction algorithm to OrderBookModel.

QDS 3.123:

* [QD-333] dxViewer: Display connection status in statusbar
* [QD-332] dxViewer: Display Open Interest in watchlist
* [QD-334] dxViewer: Multiply size by 100 in Level2 view for REGIONAL and AGGREGATE quotes when mixed with ORDER
* [QD-122] dxFeed API: Implement OrderBookModel
* [QD-317] dxViewer: Minor visual bugs
* [QD-316] dxViewer: Create standalone installers with built-in JRE for Win32/64, Linux and Mac platforms
    for dxFeedMarketDataViewer as a demo app downloaded from dxfeed.com website
* [QD-315] dxViewer: Provide dxMarketDataViewer application with new look and feel and extended visuals
    for book and TnS display
* [QD-312] dxViewer: dxFeed Market data viewer shall not have its own event queues
* [QD-311] dxFeed API: Provide Timer-Based Swing Executor Sample.
* [QD-319] dxlib: Add support of null keys to default Indexer.
* [QD-321] QDS: Support blocking mode in QDAgent that prevents buffer overflows by blocking distribution
  - QDAgent.setBufferOverflowStrategy with three arguments is deprecated
  - QDAgent.BufferOverflowStrategy enum is introduced.
  - QDAgent.setBufferOverflowStrategy(BufferOverflowStrategy) is introduced.
  - QDAgent.setMaxBufferSize(int) is introduced.
  - In QDAgent.BufferOverflowStrategy.BLOCKING mode QDDistributor.processData method is blocked when
    agent's buffer in stream or history is about to overflow. All attempt to distribute into this agent's buffer
    are blocked until QDAgent.retrieveData method empties this buffer, and which point all blocked processData
    method are unblocked.
* [QD-322] dxFeed API: Implement DXEndpoint.Role.STREAM_FEED for conflation-less file parsing
  - Time-series subscription in this role is not supported.
  - Unit test is included.
* [QD-324] dxFeed Samples: Update symbols.txt according to capabilities of demo.dxfeed.com data feed,
    make QuoteTable sample use it, provide sample data file
  - "symbols.txt" file contents fixed, "quotetable" sample is using it to initialize its table.
  - "demo-sample.data" and "demo-sample.time" are provided.
  - "connect_Quote_IBM_from_File(.sh|.bat)" scripts are provided to show how to read from files.
  - "qds-tools.jar" is included into "dxfeed-samples" module for the above showcase.
  - "demo.ipf.zip" is included with profiles for symbols that are available on "demo.dxfeed.com:7300".
* [QD-286] IPF: New transform language functions for date calculations
* [QD-325] BUG FIX: dxFeed API: Regional quotes are not available via Order events and are not shown market depth
  - Regional orders are now properly generated for regional quotes
  - Composite orders are now now properly generated, too (they were missing exchange)
  - Unit test was created to make sure it stays so.
* [QD-133] dxFeed API: Notification about changes in DXEndpoint connection state
  - DXEndpoint.(add|remove)StateChangeListener methods are introduced.
  - DXEndpoint.awaitNotConnected and DXEndpoint.closeAndAwaitTermination are introduced to facilitate file parsing.
  - DataProcessor.hasMoreToProcess and signalNoMoreToProcess helper method are introduces in "qd-core" module to
    facilitate implementation of closeAndAwaitTermination method.
  - Sample code for file parsing with the new methods is provided in samples.
  - Unit test for new methods was created.
* [QD-323] dxViewer: Move dxFeedMarketDataViewer into a separate "dxfeed-viewer" module
* [QD-328] BUG FIX: Filters in address string are not reflected in the name properly
  - Now filters in address both in the form "TEST@:1234" and ":1234[filter=TEST]" are equally well reflected
    in the default connector name that is chosen when name is not explicitly specified, like
    "ServerSocket-Distributor[TEST]"
* [QD-330] Move support for file reading/writing into a separate "qds-file.jar"
  - "qds-file" module is now publicly available in a separate jar file.
  - "qds-file.jar" is now a part of "dxfeed-bin" deliverable assembly.
  - "qds-tools" module depends on "qds-file".
  - "dxfeed-samples" now includes "qds-file" (no need to include "qds-tools").
* [QD-331] dxFeed API: Misc performance optimizations for file parsing throughput
  - TimeFormat.parse fast path for standard formats with timezone.
  - LineTokenizer is faster.
* [QD-336] qds-file: Support .gz archived files
  - Reading of GZIP files is supported with autodetection by the 2-byte header.
  - FileConnector and FileReader has "container" property (NONE or GZIP) with null default for autodetection by header.
  - Writing of GZIP files is supported with autodetection by ".gz" suffix in name.
  - FileWriter has "container" property (NONE or GZIP) with null default for autodetection by name suffix.
* [QD-337] dxFeed API: JavaDoc for InstrumentProfile methods.
* [QD-338] dxFeed API: Option series and chains
  - com.dxfeed.ipf.option package is introduced.
  - OptionSeries, OptionChain, and OptionChainsBuilder classes are define.
  - DXFeedOptionChain sample prints option chains for a specified symbol.
  - Samples are rearranged into com.dxfeed.sample package as their parent.
  - Samples no longer include a demo IPF file, but list an URL to get one in readme.txt.
* ShortString has method to encode/decode integer numbers.
* IndexedSet reads new serial format for dynamic set sizes (stub for upcoming write format change)

QDS 3.122:

* [QD-305] dxFeed API: Introduce interest and dividend in TheoPrice event and record.
* [QD-292] dxFeed API: Shall generate only symbolsAdded subscription events for subsequent addition of same symbol
  - DXFeedSubscription and ObservableSubscriptionChangeListener contracts are changed and javadoc for the corresponding
    classes was updated to clarify this change and to explain their expected behavior in the case of subscription to
    the same symbols but different instances of the object that represents the symbol.
  - It is no longer expected that ObservableSubscription calls symbolsRemoved for each object that was previously
    reported via symbolsAdded - subscription element instance is allowed to change as long as it is equal to previously
    reported one.
  - In case of multiple additions of equal subscription symbol while this symbol is subscribed ObservableSubscription
    only generates symbolsAdded calls. Those symbolsAdded calls are filtered out by the underlying QD Core and
    are not transmitted over the network to the upstream data provider.
  - If subscriber change time portion of active TimeSeries subscription element then ObservableSubscription generates
    only symbolsAdded event with new time, there are no symbolsRemoved events.
* [QD-304] BUG FIX: ServerSocketConnector start and immediate stop leaves socket listening
* [QD-297] BUG FIX: dxFeed API: Disconnected DXEndpoint cannot be reconnected again
* [QD-303] RMI: Support RMIEndpoint.Builder to specify custom attributes (like name) and close method
  - RMIEndpoint.newBuilder() method is introduced
  - RMIEndpoint.Builder class has withName, withScheme, withRole, withProperty(ies), and build methods.
  - RMIEndpoint.close() permanently cleans up all endpoint resources.
* [QD-296] RMI: Connector and stats for RMIEndpoint are kept in JMX after endpoint is disconnected.
  - Bug is fixed. Connector-specific JMX objects are released on disconnect, but endpoint JMX object remain
    registered (call RMIEndpoint.close to release them all).
* [QD-288] Tools: TDP tool shall understand thread state in thread dumps produced by ZingVM.
* [QD-289] Tools: DXFeedConnect tool shall understand parentheses in symbols and accept FromTime optional parameter for Candle subscription.
* [QD-290] Reduce garbage generation by ShortString class.
* [QD-281] Support user and password in all connectors.
  - All MessageConnector implementations (and MessageConnectorMBean interface) now have set/get method for
    User and Passport properties.
  - Values of those properties are masked in the log file.
  - QTP protocol uses HTTP-link basic authentication by transferring "authorization" property to the remote side in
    protocol description message. There is no ready-to-use server-side API yet for the actaull handing of those
    incoming values on the server side.
  - HttpConnector also transfers the same user and password in its HTTP headers, keeping its old behaviour in
    that respect.
  - Logs in various QDS tools like multiplex now log "Using xxx address" message just before invoking configuration
    code for the corresponding connectors, so that this log line is immediately followed by the log line that
    are output on the changes for connectors' properties.
* [QD-293] dxlib: StreamInput shall throw EOFException with full stacktrace.
* [QD-287] QDS: Improved subscription dump via JMX fails with NPE.
* [QD-294] Tools: Connect does not support using IPF instead of a list of symbols
* [QD-295] Build-in dxFeed filters 'prod' and 'fx' shall support optional namespaces
* [QD-291] Dynamic IPF filters: better logging
* [QD-298] QDS: Reduce amount of memory used by HistoryBuffer.
* [QD-299] Tools: Instruments tool shall be able to merge custom fields.
* [QD-301] IPF: Transform language shall use strict explicit type system.

QDS 3.121:

* [QD-285] BUG FIX: Tools: Multiple instances of MARSPlugin created
* [QD-284] Scheduling: Modify schedule defaults for NASDAQ

QDS 3.120:

* Technical build.

QDS 3.119:

* Copyright updated to year 2013.
* [QD-282] dxFeed API: Schedule does not understand seconds in definition.

QDS 3.118:

* [QD-279] dxlib: Add new methods to MathUtil: div and rem for mathematically correct division.
* [QD-218] Scheduling: schedule.properties: put defaults for Reuters and Russell indexes from ICE into schedule.properties
* [QD-278] Tools: Profile.Shares field cannot parse NaN value.
* [QD-126] dxFeed API: Greeks and other theoretical option values.
* [QD-200] dxFeed API: Add TheoPrice record and mapping.
* DXEndpoint: Don't log supported event types (there are now too many of them).
* [QD-277] dxfeed-codegen Maven plugin
  - Use "mvn dxfeed-codegen:generate" mojo in "dxfeed-impl" module to generate impl classes.
  - "verify" mojo is automatically executed on "deploy" phase of "dxfeed-impl" module and failes
    if any of the generated classes are not up-to-date.
* [QD-275] dxFeed API: Support Candle alignment attribute (on midnight or on session)
* Private constructors in private classes made package-private to eliminate extra class file.
* [QD-266] Add AggressorSide flag to TimeAndSale and BidVolume with AskVolume fields to Candle.
* [QD-273] MARS: Add property to control how often findMonitorDeadlockedThreads method is called.
  - New system property named "com.devexperts.mars.jvm.JVMSelfMonitoring.findDeadlockPeriod" is added.
    This property specifies period in seconds how often JVM is analyzed for deadlocks. Default period is 10 seconds.
    Period of 0 means "never". Note that analysis is performed only as often as MARS stats are gathered and updated.
* [QD-272] Tools: Connect: support using IPF in addition to list of symbols
  - Now tools "connect", "compare" and "schemedump" accept single word "all" as a record list indicating all records.
    This works in addition to accepting single asterisk "*" as a filter that matches all records.
  - Now tools "connect" and "compare" accept IPF URLs within their symbol lists.
    If a certain token within symbol list contains ".ipf" letters then tool tries to open that URL and read symbols from it.
    If tool fails to properly read IPF it prints error message and uses original token as a usual symbol.
    Note that HTTP URLs also work alhough they require full form due to ".ipf" requirement.
* [QD-244] Tools: qds instruments: add ability to remove all fields except defined
  New procedure "retainFields" was added. It uses list of fields as parameters and retain only those fields upon execution.
  Note that fields TYPE and SYMBOL shall be listed explicitly otherwise they will be cleared.
* [QD-271] QDS: Move method examineData to QDCollector and made public utility class to store collector snapshot.
* [QD-258] JMXStats: Improve naming
  - Use guaranteed-to-be unique indexing of children by incrementing counter in parent.
  - Don't use index for sum nodes, since they are unique per type.
  - Use '!' prefix for top-level ids, '#' prefix for sum id, and '+' prefix for first children, so that all Ticker
    internal stats are (including ticker itself) are sorted nicely.
  - Omit zero ids.
  - Don't register JMXStat that only aggregate children stats and don't have any data inside them (transitively close
    over them in children array and in parent link), but always register root to pick a unique name for it.
  - Sort children by name.
* [QD-248] Introduce dxFeed JavaScript/WebSockets API
  - dxfeed-webserivce.war artifact is included into release. It has sample debug console to showcase API features.
  - Use Jetty 7 or later for websocket support.
* [QD-252] Introduce dxFeed JavaScript UI API for quote tables
  - Sample demo page with different quote tables configuration is included into dxfeed-webservice.war
* [QD-249] Compile QD with any Java 1.6+ compiler while retaining 1.5 source, target and runtime library levels.
* [QD-246] Migrate to Jetty 7
* [QD-253] dxFeed API: Pluggable monitoring
  - DXEndpoint.Builder class is introduced as a way to specify custom properties when creating DXEndpoint.
  - When qds-monitoring module is in classpath (it is a part of qds-tools.jar), all created DXEndpoint instance
    automatically benefit from full QD monitoring capabilities in log, JMX and MARS.
  - When DXEndpoint is closed all its associated monitoring resources are released.
  - DXEndpoint.Builder implementation is based on QDEndpoint.Builder and supports all its monitoring options:
    + "monitoring.name" - a name that is used to identify this endpoint in monitoring
    + "monitoring.stat" - period of time to print stats to log and to report them
    + "jmx.html.port" - TCP/IP port for JMX HTML console (use HTTP browser to connect to this port)
                      (jmx.html.bind, jmx.html.ssl, and jmx.html.auth are supported, too)
    + "jmx.rmi.port" - TCP/IP port for JMX RMI management interface (use jconsole tool to connect to this port)
  - Integration between RMIEndpoint and DXEndpoint is now using QDEndpoint as is less kludgy.
  - QDCollector.close() method provides a way to release all monitoring-releated resources associated with collector.
  - Management.registerMBean(...) method returns a result that encapsulates "unregister" method.
  - MARS can be configured via DXEndpoint.Builder and properly releases resources on close.
  - JVMSelfMonitoring and TimeSyncTracker are now closeable "MARS plugins" instead of "Startup services"
    The later are completely deprecated.
* [QD-256] dxFeed API: Support dxfeed.threadPoolSize, dxfeed.aggregationPeriod, dxfeed.address properties via DXEndpoint.Builder
  + "dxfeed.threadPoolSize" - number of threads in a notification thread pool for endpoint with role FEED.
     (default is a thread pool shared among all DXEndpoint instances with number of threads equal to number of
      available processors)
  + "dxfeed.aggregationPeriod" - a notification rate (in milliseconds). Default is zero (no throttling)
  + "dxfeed.address" property defines a default connection address for DXFeed. Connection to this address is
     established as soon as DXEndpoint with Role.FEED is created. Default is none (wait for a call to connect method).
  + "dxpublisher.threadPoolSize" and "dxpublisher.address" work in a similar way.
  - Defaults for this properties, as well as all properties from QD-253 are taken from "dxfeed.properties" or
    "dxpublisher.properties" resource or file. Path to this file can be either specified using "withProperty" call
    or via system property with the corresponding name. When file is not provided, then classpath resource with a
    corresponding name is loaded. Last-resort defaults for individual properties can be specified using system properties.
* [QD-241] Tools: nettest: use DXFeed scheme
  - TimeAndSale event is generated and subscribed to by default
  - Use -Dcom.devexperts.qd.tools.NetTest.record=<name> to use another record.
* [QD-254] Architecture: Remove explicit dependency of qd-tools on qds-monitoring and turn qds-monitoring into a plugin.
  - Introduce com.devexperts.qd.qtd.QDEndpoint as a named collection of collectors and connectors
  - Rewrite all QD tools and dxFeed API implementation on top of QDEndpoint
  - Define a MonitoredQDEndpoint in qds-monitoring module as an extension that monitors all stats via log, MARS and JMX
  - Remove explicit dependency of qd-tools module on qds-monitoring module, but keep qds-monitoring in qds-tools.jar
  - Move JmxStats class into qds-monitoring module
  - Move qd-core-management module into qds-monitoring module and remove the former
  - MonitoredQDEndpoint properly cleans up all resources (registered JMX beans and threads) on close.
* [QD-259] dxFeed API: Provide a singleton DXFeed and DXPublisher instances with autoconfiguration and autoconnect
  - Introduce DXFeed.getInstance() and DXPubliser.getInstance() as ready-to-use singleton instances of the
    corresponding clases.
  - Both are provided via DXEndpoint.getInstance(Role) which creates a singleton instance for each role with automatic
    configuration.
  - Use getInstance() methods in samples.
  - Provide default "dxfeed.properties" with samples that contains demo feed address of "demo.dxfeed.com:7300".
* [QD-261] dxlib: TimeFormat utility class (former in qd.util) with better API.
  - TimeFormat, TimePeriod and InvalidFormatException classes are introduced in com.devexperts.util package with
    an improved API for TimeFormat. Old classes in com.devexperts.qd.util are rewritten with the help of new classes
    and are deprecated.
* [QD-267] dxlib: Introduce TimeUtil and DayUtil classes for a collection of static utility methods to work with
           "long" time and "int" day ids correspondingly
  - TimeUtil has getSecondsFromTime and getMillisFromTime to correctly break long time millis into its second and
    millisecond parts.
  - TimeUtil has convenient constants from SECOND, MINUTE, HOUR, DAY time intervals in long time milliseconds
    (TimeConstants interface from MARS is removed).
  - DayUtil has methods to convert from day id to year, month, day in GregorianCalendar without the usage of
    java.util.GregorianCalendar class.
* [QD-268] dxlib: Move CSVReader and CSVWriter classes from [qd] dxlib-sandbox to dxlib
* [QD-269] dxlib: Move MathUtil class from [qd] dxlib-sandbox to dxlib
* InstrumentProfileTransform: reduce garbage rate during compilation and memory footprint thereafter.
* [QD-239] TimeSyncTracker: Improve garbage rate
* [QD-240] MARS: Improve garbage rate
* [QD-245] Split qds.jar and qds-tool.jar into multiple jars
  - Binary and source package is called "dxfeed-bin-{version}.zip"
  - It includes readme, license, and release notes, jars are moved into "lib" directory.
  - qds.jar depends on dxlib.jar and dxfeed-api.jar
  - qds-tools.jar depends on qds.jar and qds-monitoring.jar
  - qds-monitoring.jar depends on qds.jar, mars.jar and jmxtools.jar
  - dxFeed sample package in file "dxfeed-samples-{version}.zip" includes readme and license.
  - qds.jar and qds-tools.jar manifests include separate sections with version for
    com.devexperts.qd and com.devexperts.qd.tools packages for a more reliable version display in log.
* [QD-263] QD shall limit number of historical data by default.
  - The names of the system properties and their default values are:
     + com.dxfeed.api.impl.HistorySubscriptionFilterImpl.candleMaxRecordCount=8000
     + com.dxfeed.api.impl.HistorySubscriptionFilterImpl.tradeMaxRecordCount=1000
  - The last one affects history subscription for TimeAndSales and TradeHistory, while the
    former for all the other candle records.
* [QD-238] dxlib: LockFreePool does not work correctly for capacities > 500K
  - Unit test is create to demonstrate this defect.
  - MAX_CAPACITY constant is introduced.
  - MAX_CAPACITY is now 2^24 items (~16M items)
* [QD-247] FIXED: HttpConnector does not wait before reconnecting on error
* [QD-242] FIXED: Javadoc link to IPF format documentation in InstrumentProfile class is broken
* [QD-243] FIXED: dxFeed API: InstrumentProfileReader failed to read ".zip" IPF file from gateways using gateway
           IP address as a source
* [QD-260] FIXED: dxlib: Duplicate classes shall be ignored when creating services
* [QD-264] FIXED: QDS Monitoring: ArithmeticException: / by zero
* [QD-262] FIXED: Cannot parse \NULL value for short string field from text data
* [QD-276] FIXED: NullPointerException when trying to use multiplexor with --write option without filter
* Branch creation procedure is documented in README.txt

QDS 3.117:

* Better help message when running "java -jar qds-tools.jar" without arguments.
* Default width for help articles is set to 120 characters.
* More consistent help and error message in tools.
* More consistent "Help connectors" texts.
* Tools are looked up via Services framework, which lays a groundwork for tools modularization.
* Better message about deprecated option that are replaced with "-D" options.
  They don't have to be JVM options. "-D<key>=<value>" can be used on the command line!
* Tweaked SystemProperties class from dxlib, so that -Dlog.file=xxx can be specified on the tools command line
  (make sure that logging framework is initialized only after all options are parsed).
  A better long-term solution is needed for -Dlog.file option, see [QD-237].
* [QD-236] Improved subscription dump format and tools.
  - New subscription dump format has its own 4 byte magic of QDSD (QD Subscription dump) and is versioned,
    extensible, detailed and compact. It supports multiple collectors in a single file and annotates
    collectors and agents (connection) with their key properties, so that different agents belonging to
    the same connections can be correlated with each other. History collector's subscription time is
    dumped, too.
  - Collector management MBean's "dumpSubscription" operation writes dump in the format to a single file
    which name is provide an operation's operation parameter.
  - SubscriptionDumpParser tool replaces "SubscriptionBinParser" tool. It reads new QDSD format and coverts into a
    text format. Choices for output columns are expanded, taking into account all features of the new format.
  - SubscriptionDumpParser tool support "group" option that counts the number of subscription items in
    the group. Thus, the quick overview of subscription counts per collector, per record, and/or per symbol
    can be produced.
  - SubscriptionDumpParser tool has an option to print just tbe first int of time ('t') or the second one ('T').
* IPFFilterFactory is ordered before all other filters with @ServiceProvider(order=-200).
  Note, that other built-in filters are annotated with @ServiceProvider(order=-100) and project-specific
  filters has order=0 by default, and so will be checked last.
* [QD-234] BUG FIX: Old way to create subscription filters does not support built-in filters.
  - This bug exposes a design problem with the new QDFilter infrastructure that was introduced in QD 3.112
    as a part of [QD-209] "Improve filters infrastructure and design for extensibility".
  - To fix this problem, new QDFilterFactory class is changed (incompatibly) so that its DataScheme becomes
    a part of the class state and is set via setScheme method when the instance of this class is created
    for a corresponding data scheme with DataScheme.getService method.
  - com.devexperts.qd.spi.DataSchemeService interface is introduced to be implemented by all service of this
    kind that need data service as a part of their state.
  - QDFilterFactory.createFilter method now takes only a single "String spec" argument. It does not need a
    second "DataScheme scheme" argument anymore.
  - com.devexperts.services infrastructure is extended. @Service annotation has additional [optional]
    attribute "upgradeMethod" to be used in legacy interfaces like SubscriptionFilterFactory (that is
    superseded by QDFilterFactory), so that their instance can be upgraded to a more recent implementation
    (that still implements older interface) before returning result. It is important, because the following
    [optional] step is to call "combineMethod" (was previously called "combiningMethod" in QD 3.112) which
    is easier to define in terms of modern interface instead of legacy ones.
  - Legacy com.devexperts.qd.SubscriptionFilterFactory interface and (even more legacy)
    com.devexperts.qd.qtp.SubscriptionFilterFactory interface are marked with an appropriate @Service
    annotation with both "upgradeMethod" and "combineMethod" attributes, so that a combination of all
    filter factories in the system (in the proper order) is returned whenever DataScheme.getService is
    used with them.
  - META-INF/services files for built-in filter factory implementations are changed to the name of the
    oldest interface (com.devexperts.qd.qtp.SubscriptionFilterFactory). It has to remain this way until
    this old and deprecated interface fully comes out of use in the client code. When this happens,
    the deprecated interface is removed, and the corresponding META-INF/services files are updated to
    mention a more recent interface name.
* [QD-233] dxlib: Introduce com.devexperts.management.Management utility class with annotation-based support for
    MBean descriptions.
  - The corresponding classes are added to qds-local "dxlib-sandbox" (their wider usefulness is TBD).
  - This class was formerly named com.devexperts.util.Monitoring and moves some of the relevant method from QDMonitoring
    + getMBeanNameForClass for standard naming convention for MBeans
    + registerMBean to register MBeans:
      When the interface name ends with "MXBean", and running on Java 1.6+ JVM, then the bean will be registered
      as an MXBean with open types (if all its operations and attributes are compatible with open types).
      Interface, its getter method and operations can be annotated with ManagementDescription
      annotation to provide description text and, for operation, parameter names and descriptions.
    + Management.wrapMBean method to convert MBean into DynamicMBean with support for annotation-based
      descriptions and for MXBeans.
    + This method retrieves each readable MBean attribute and if it throws UnsupportedOperationException, then
      the corresponding attribute is not included into meta-information of the resulting dynamic MBean.
      This produces a cleaner list of attributes for collector MBeans.
    + CollectorManagement, LatencyMonitor, and all MessageConnectorMBeans are annotated with descriptions.
    + They all have a common convention to work with Counters/Distribution/EndpointStats with "getXXX" method
      to retrieve stats since snapshot as a string, "retrieveCompleteXXX" method to retrieve data since start,
      and "resetXXX" method to make a snapshot, so that a value of "getXXX" appears to be reset.
    + CollectorManagement, LatencyMonitor, and IPFRegistry (for dynamic IPF filters) become MXBeans which
      gives a slight advantage for remote monitoring, while MessageConnectorMBeans stay as regular MBeans
      due to complex migration issues with FileConnectorMXBean that has a lot of non-opentype attributes.
* [QD-232] BUG FIX: RMI: OneWay Requests memory leak
  - Memory leak is fixed. OneWay requests are no longer added to the map of sent requests (requests that
    are waiting for response). This memory leak was also manifesting itself when request was cancelled before
    it was sent over a connection.
  - Also, the logic that starts "TimeoutMonitoringThread" is made more robust with the proper double-checked
    synchronization to remove the change that two threads are started concurrently. Additionally,
    uncaught exceptions that kill TimeoutMonitoringThread (and cause its subsequent restart) are logged.
* When we have no access to sun.misc.Unsafe class fallback to synchronized access mode and
  issue a clear warning about that into the log.
* [QD-231] QD Core: Analyze per-record statistics for data distribution
  - Collector management bean name now includes DataScheme, so that counters for different schemes in the
    same JVM are collected separately. For multiplexor tool, the MBean name is:
       com.devexperts.qd.impl.matrix:tool=multiplexor,scheme=<scheme>,c=<collector>
    where <scheme> is the short name of the scheme (like "DXFeed") and <collector> is Ticker, Stream, or History.
  - Operation names on Collector management are simplified. "Counters" attribute now contains a string
    representation of all collected since last snapshot or since start including top 5 records with
    maximum incoming RPS rate and top 5 record with maximum outgoing RPS rate.
  - "resetCounters" operation makes a snapshot, so that "Counters" resets zero.
  - Counters since the component start can be retrieved with a separate "retrieveCountersSinceStart" operation
    that follows OpenType conventions and be viewed as component data in a remote JMX tool
    like "jvisualvm" or "jconsole".
  - ConnectorsMonitoringTask (that is used by all tools) tracks and report per-record bytes read/written.
    Infrastructure to report per-record bytes read/written is integrated into QDStats. ByteArrayComposer and
    ByteArrayParser classes perform the corresponding reporting.
  - For each connection, the record that consumes the most bytes for read or write is reported and its
    contribution in the percentage of the total traffic is shown.
  - Per record I/O stats are shown via JMXStats. For example, for multiplexor the bean with name:
      "com.devexperts.qd.stats:tool=multiplexor,c=Any,id=5-ConnectionsStats"
    it has "IOReadBytes" and "IOWriteBytes" attributes that show total number of bytes read or written by all
    connections and "IOReadBytesTop*" and "IOWritesBytesTop*" attributes has a list of top 5 records that
    consumed the most number of bytes. View the value of its "+Children" attribute for a list of all connectors
    with their individual stats. Go further via "+Children" attribute to see individual connections and the
    stats for each connection.
  - Note, that I/O Stats are kept in 32 bits values and can overflow. ConnectorsMonitoringTask takes potential
    overflow into account for its periodic reporting.
* [QD-227] BUG FIX: high CPU consumption.
  - 100% CPU was consumed by DistributorAdapter in SocketWriter thread while waiting for
    DESCRIBE_PROTOCOL message from remote side.
* [QD-230] BUG FIX: LatencyMonitor reports wrong measurements.
  - Bits inside LatencyMonitor are reassigned. Now, the probability of seeing a collision and
    thus a wrong latency measurements is less that 10^-6. The maximal measured latency is
    limited at ~16 seconds (2^24us). Latency measurements will wrap around to zero after that.
  - Latency monitor is turned into a proper MXBean with description of its attributes and operations.
* [QD-228] dxFeed API: Expose implementation details of CandleSymbol via public constants.
* [QD-229] QD Tools: -Djmx.html.port and similar options shall work in tools command line
  - These option now work in the tools command line and can be used with "qds" script.
  - "-D" options in the command line override "-D" options passed to the JVM.
  - It means that "-Dscheme=xxx" also works in the command and overrides default in "qds" script.
* [QD-111] Support dynamic filters
  - Dynamic filters infrastructures is integrated into QDFilter class. This infrastructure
    if fully backwards-compatible. Any code that does not support dynamic filters works with
    a snapshot of dynamic filter. When filters update they send notification and a new instance
    of filter becomes available that only dynamic-filter-supporting code cares about.
  - CompositeFilters (and, or, not combinations) fully support dynamic filters.
  - Agent and Distributor adapters detect dynamic filter change and close connection
    (this gets immediately recreated with updated filter)
  - IPF filters can be made dynamic by setting "update=xxx" property, for example:
      ipf[test.ipf,update=10s]
    creates IPF filter from file named "test.ipf" and checks it every 10 seconds.
  - Update checks use last modified times for files and "Last-Modified" header for HTTP URLs.
    HTTP HEAD request is issued first for HTTP URLs.
  - If last modified time is not available, then contents of the file are downloaded, parsed,
    and compared on each check.
  - Update check can be avoided during trading hours with "schedule" property, for example:
      ipf[test.ipf,update=10s,schedule]
    takes trading hours for all symbols in IPF file and avoid update checks during trading hours
    of any instrument from the file.
  - Update check schedule can be manually specified with "schedule" property with a same syntax
    as "TRADING_HOURS" attribute in IPF files, for example:
      ipf[test.ipf,update=10s,schedule=XNYS()]
    does not perform update checks during New York Stock Exchange trading hours.
  - Management bean is available for a registry of all dynamic IPF filters in the system
    (e.g., filters with "update" property) with an MBean name
        "com.dxfeed.ipf.filter:type=IPFRegistry".
    It has properties that display a number of distinct dynamic IPF filters in the system,
    their full string name, and an operation to force an update regardless of any schedules
    (cut-and-paste a name from "RegisteredFilters" property into "forceUpdate" operation).
  - IPF filter code was moved into "dxfeed-ipf-filter" module and became a part of "qds-tools.jar".
    For a regular client-based code that uses only "qds.jar" IPF filters are not available at all.
  - Small API improvements down the road:
    + URLInputStream.getLastModified() method
    + InstrumentProfileReader.getLastModified() method
    + InstrumentProfileReader.resolveSourceURL() method
* [QD-221] QD Tools: Better configuration info in log files
  - Dot '.' characters in default connector names are replaced with '-', so that default names
    better suit for logging category which they are used name.
  - Connector "name" property is always changed first and logs this fact with a new logging
    category, so that a log of all configuration changes for connector looks nice.
  - Logs address in "Starting xxxConnector to <addr>" message. Together with the proper logging
    category with given a pretty easy-to-interpret information about what's going on.
* [QD-223] Finer-grained QD Collector management beans
  - Collector management beans in JMX domain "com.devexperts.qd.impl.matrix" now
    include key properties from QDStats that were used during their creation.
  - "resetToDefaults" operation now properly undoes all changes made via JMX to their
    build-in default values.
  - New QDStats constructor is introduced to create QDStats instance with key properties.
  - QDStats.getFullKeyProperties() method is introduced to get a full list of stats key properties
    inheriting keys from parent. It is now consistently used for all logging name management needs,
    so there is always a details information on what tool, connector, and connection the
    corresponding information relates to.
  - com.devexperts.util.JMXNameBuilder class in introduced in "dxlib-sandbox" module to manipulate
    JMX-style key property lists (with JMX-style quoting conventions).
  - JMXNameBuilder.validateKeyProperties method is used whenever QDStats instances with key
    properties are created to fail fast when key properties format if invalid.
  - QDManagement.createRootsStats that now includes the specified name as "tool=xxx" property
    and puts all management beans into a single "com.devexperts.qd.stats" domain.
    (different tools were previously put into different domains, now they are distinguished
    by "tool=xxx" key property that is always first by construction).
  - Stats that are relevant to a single connector and each single connection in "com.devexperts.qd.stats"
    domain are now grouped together. Use "jvisualvm" or "jconsole" to find a connection and see all
    relevant stats in one place.
  - Collector management and dumping classes moved into a new "qd-core-management" module that
    is included into "qds-tools.jar". Now, "qds.jar" does not include those classes, so there
    are no "com.devexperts.qd.impl.matrix" JMX beans on client side and "qds.jar" is smaller.
  - Time tracking of GlobalLock in QDS Collectors implementations is ENABLED back by default in server-side
    QD cores (that have qds-tool.jar in their classpath) using LOW precision mode of TimeDistribution utility
    class that does not consume a whole lot of memory (less than 400 bytes per instance).
  - A single management bean for all collectors that belong to a given scheme is introduced. It shows
    aggregated counters for all collectors and support all operations, performing them on all collectors.
    This way, "resetCounters" can be performed on all collectors in a single click, debug and subscription dumps
    of all collectors can be made, The MBean name is:
        com.devexperts.qd.impl.matrix:scheme=<scheme>,c=Any
* com.devexperts.qd.util.TimeDistribution utility class is changed to support different modes of precision
  via TimeDistribution.Precision enum. LOW and HIGH precisions are currently supported. HIGH precision is
  used by LatencyMonitor, LOW precision is used qd-core-management.
* Improved Maven build scripts:
  - Create javadocs for dxlib, qd-core, and dxfeed.
  - Automatically copy all relevant files to "\\QD\JAZZ\Release" on release and to "\\QD\JAZZ\Snapshot" on snapshot:
      dxfeed-api-${version}.zip
      dxfeed-javadoc-${version}.zip
      dxfeed-samples-${version}.zip
      dxlib-javadoc-${version}.zip
      qd-core-javadoc-${version}.zip
  - Previous versions from JAZZ are copied to the "old" subdirectory. Only one version of SNAPSHOT is kept in "old",
    but all releases are retained in "old".
  - The above files are copied during "deploy" phase. All file are staged before being copied to JAZZ in the
    "target/install" directory during "install" phase.
  - Build-Time attribute is added to manifest for "qds.jar" and "qds-tools.jar".
  - Build timestamp is added to the SNAPSHOT zip file names that are copied to "target/install" directory and
    to the \\QD\JAZZ\Snapshot.
  - Internal modules are not deployed into the Maven repo. Only "qds", "qds-tools", and "dxlib" artifacts are
    deployed to the Maven repo for use by other projects. "dxfeed" and "qd-core" modules are uploaded to retain
    their javadoc artifacts, and "dxfeed-api" module is uploaded because it contains the final assembly for
    delivery to the customers.
  - Produce javadoc only for "dxlib", "dxfeed", and "qd-core" modules (they contain public APIs)

QDS 3.116:

* Removed all system dependencies from Maven build (lib directory is removed).
* Fixed decencies for qds and qds-tools via shade plugin dependency-reduced-pom.

QDS 3.115:

* BIG FIX: schedule.properties were missing from dxfeed. Moved them to resources.
* Source archives in the final "api-dxfeed-qds-{version}.zip" file shall have .zip extension.
* Use enforcer plugin to force the use of Java 1.5.0_12 and to make sure all plugin versions are specified.

QDS 3.113:

* [QD-220] Add generic schedules to default schedule.properties
* FeedFileHandler uses less memory while reading snapshot file.
* [QD-219] Profile mapping shall divide shares outstanding by 1000 before putting it to data scheme.
* [QD-205] Modularize QDS
  - Source and test files are split into different modules
  - Maven project files are created for all modules
  - Modules build and pass all tests
  - qds.jar (designed for client-side use) includes the following modules:
                dxlib, dxlib-sandbox, proto, qd-core, qd-rmi, dxfeed
    FIXME: qds.jar now includes com.devexperts.qd.impl.matrix.tools (should be excluded), but
    + com.devexperts.qd.monitoring is mostly excluded (only one Monitored annotation is still there)
    + com.devexperts.qd.qts.{file,blob,text} are excluded (no support for file connectors)
    + com.dxfeed.ipf.{services,transform} are excluded
      exluded packages were moved to qds-tools.jar
  - qds-tools.jar (that is designed for server-side use) includes the following modules:
                mars, proto-ssl, qd-file, qd-logger, qds-monitoring, qd-nio, qd-servlet, qd-stripe,
                qd-tools, qd-samplecert, dxfeed-tools
  - api-dxfeed-qds.zip assembly is defined. It contains the binary and source distribution for the web site
    and for all legacy (non modularized) users of qds.
  - README.txt is updated to describe new release procedure.

QDS 3.112:

* BUGFIX: Fix incompatibility that was introduced by [QD-185] dxFeed Scheme: Add "Candle{=m,price=xxx}"
  records for xxx in bid, ask, mark. Here is a fix:
  [QD-217] Make Candle records with suffixes optional.
  - Suffixes for Candle records can be specified by the system property:
    -Dcom.dxfeed.event.candle.impl.Candle.suffixes=xxx
      The default value is empty. In order to get Candle records as per QD-185 set it to the following value:
        "|{=m,price=ask}|{=m,price=bid}|{=m,price=mark}" (without enclosing quotes)
      The only suffixes that are currently supported for Candle record combine 1min period with a price as above.
  - Suffixes for Trade records can also be specified by the system property:
    -Dcom.dxfeed.event.candle.impl.Trade.suffixes=xxx
      The default value is:
        "133ticks|144ticks|233ticks|333ticks|400ticks|512ticks|1600ticks|3200ticks|" +
        "1min|2min|3min|4min|5min|6min|10min|12min|15min|20min|30min|" +
        "1hour|2hour|3hour|4hour|6hour|8hour|12hour|Day|2Day|3Day|4Day|Week|Month|OptExp"
      The only suffixes that are currently supported for "Trade." record specify candle aggregation period.
      Other attributes are not supported.
* [QD-216] Remove implementation-specific dependencies from QDS to dxFeed (phase 1)
  - Default DXFeedScheme is looked up via Services instead of being hard-coded.
  - Don't reference DXFeedScheme in QD tests.
  - Move IPFSymbolFilter to dxFeed impl package.
* [QD-204] Scheduling: schedule.properties: Add EU schedule defaults
* [QD-214] Scheduling: Add easy way to configure periodic download of schedule defaults from internet.
* [QD-148] dxlib: Introduce Services priority
  - ServiceProvider annotation (optional) to mark classes that provide services via service providers framework.
  - Optional attribute ServiceProvider.order() defines the order (from lowest to highest) in which multiple services
    are loaded.
  - Service annotation (optional) to mark interface and abstract classes that serve as an extension points
    via service providers framework.
  - Optional attribute Service.combiningMethod() defines a name of the static method that is used by
    Services.createService to combine multiple available implementations into one.
  - Optional attribute SupersedesService.adapterMethod() defines a name of the static method that is used
    to convert a legacy interface implementation into a newer version.
  - Services utility class implementation is optimized. A sprawl of lazy-loading code is abolished.
* [QD-213] Add methods to Schedule which return schedule name and time zone.
* [QD-212] StreamInput can return 0 from read method.
* [QD-198] QDS Tools: "help filters" shall display a list of all build-in filters
* [QD-203] dxFeed API: invalid mapping for Book record
* More efficient instrument profile transformation.
* [QD-209] Improve filters infrastructure and design for extensibility
  - Abstract class QDFilter that implement SubscriptionFilter is introduced. It allows to implement advanced
    features like dynamic filters, filtering by contract, efficient intersection operation for striping support, etc.
  - SubscriptionFilter and StableSubscriptionFilter become legacy interfaces and all new code shall work with
    instance of QDFilter class getting immediate access to all its rich functionality.
  - QDFilter usage convention does not support null. QDFilter.ANYTHING constant shall be used in the code that
    is using QDFilter in all places where the code using SubscriptionFilter have been using null.
  - Use QDFilter.fromFilter to convert legacy SubscriptionFilter instances into QDFilter instances
    (null gets converted into QDFilter.ANYTHING)
  - All build-in filters extend QDFilter.
  - Static methods in CompositeFilters are overloaded to take QDFilter as an argument and to return QDFilter.
  - QDFilterFactory abstract class is introduced to replace SubscriptionFilterFactory.
* [QD-206] Move build-in dxFeed filters into dxFeed packages
* [QD-211] SubscriptionBuffer.visitRecord method should throw NullPointerException when record is null.

QDS 3.111:

* [QD-202] Tools: Dump tool does not send protocol descriptor.
* Build-in dxFeed filters (see [QD-112]) fixed: chartdata now includes all Candle{* records as well.
* [QD-117] QDS Tools: "help address" and related help articles are not usable
  - "help address" lists only connector name prefixes in its table to better direct to detailed help pages.
  - "help <connector-name>" displays a list of all connector-specific properties.
* [QD-190] QD Connectors: Support numeric IPv6 addresses
  - [addr1][addr2] syntax is not supported anymore to specify multiple connectors in the address line.
    Use (addr1)(addr2) as the only supported and recommended syntax
  - IPv6 address can specified in the address line when surrounded by square bracket like [::2]
  - Any host name or address can be surrounded by square brackets if needed for readability, for example:
    [host1],[host2]:port           -- establishes connection to host1:port or host2:port
    [host1]:port1,[host2]:port2    -- establishes connection to host1:port1 or host2:port2
    ([host1]:port1)([host2]:port2) -- establishes connection to host1:port1 and host2:port2
* [QD-197] BUG FIX: Post tool immediately quits on start
* [QD-115] Post tools shall deliver all data before exiting
  - The following command: "echo <record> <symbol> <fields> | qds post <address>:<port>"
    will connect to the specified address, deliver the specified record data (to ticker, stream, and history by default)
    and quit after that.
  - Note, that "qds post" accepts record text descriptors, so the following command can be used to send
    Trade.Last.Price of 100 for symbol TEST regardless of the actual list of fields in the Trade record of the scheme:
      "echo -e =Trade Symbol Last.Price \\n Trade TEST 100 | qds post <address>:<port>"
* [QD-196] Tools: add new option to tools connect and dump to print timestamp of all events - either from tape file or local time.
* [QD-195] RMI: TimeoutMonitoringThread is not stopped upon endpoint disconnect/shutdown.
* [QD-193] Expose record attributes in xxxMapping classes
  - MarketEventMapping class is introduced as a base class for all com.dxfeed.event.market.impl.xxxMapping
    It contains getRecordExchange() method.
  - CandleEventMapping class is introduced as a base class for all com.dxfeed.event.candle.impl.xxxMapping
    It contains getRecordPeriod() and getRecordPrice() methods.
    CandleRecords utility class with the corresponding static methods is no longer available.
  - RecordMapping class contains methods to coverts qd symbol into event symbol object and back with the
    support for record-specific attributes: getEventSymbolByQDSymbol and getQDSymbolByEventSymbol.
    In CandleEventMapping class getEventSymbolByQDSymbol is defined to return CandleSymbol object.
  - Fixed support for schemes that don't have Candle{=m,price=xxx} records.
* [QD-187] Zero-overhead latency monitoring to measure processing delay
  - com.devexperts.util.Monitoring helper class introduced. Convenience methods to register MBeans are
    moved there from QDMonitoring class (they are deprecated in the former location).
  - com.devexperts.qd.metrics.LatencyMonitor class is introduced and is integrated into all connectors
    that receive and send data over the network and into DXFeed API publishing and data processing paths.
  - Use the following JVM property to enable tracking:
    -Dcom.devexperts.qd.metrics.LatencyMonitor.track=<contract>:<record>:<symbol>
    The <contract> is typically "ticker" or "stream". The <record> is typically "TradeHistory" or
    "TimeAndSales" and should have a unique event identifier in its first two integer fields
    (should be a record that can be used with history, that is "hasTime").
    The <symbol> should be a popular symbol that periodically generates the corresponding event.
  - When tracking is enabled, there will be a periodic report to the log with latency statistics for
    the last time interval. Reporting period can be configured with the following JVM property:
    -Dcom.devexperts.qd.metrics.LatencyMonitor.period=10s
    (10 seconds is the default)
  - When tracking the JMX bean named "com.devexperts.qd.metrics:type=LatencyMonitor" is registered.
    It can be used to watch latency statics. Monitored symbol can be changed via JMX console.
  - Monitoring of multiplexor tool is available out-of-the-box, because it just receives QDS data from the
    networks and sends it over the network. When latency tracking is enabled, the  processing latency in
    multiplexor for the corresponding contract, record, symbol will be tracked.
  - Monitoring of any code that uses DXFeed API is available out-of-the-box. For data consumers, it measures
    QDS processing latency between the time when event is received by JVM to the time when it is about to
    be reported to DXFeed API user code.
  - There is no performance penalty when latency monitoring is disabled.
  - com.devexperts.qd.ng.RecordReader.readRecord method now returns RecordCursor (was void) to ease
    integration of reading code with latency monitoring framework.
* com.devexperts.qd.util.TimeDistribution utility class is introduced. It is a class that
  record time distribution and reports its various statistics (number of events, average, minimum,
  10th percentile, median, 90th percentile, maximum).
* Time tracking of GlobalLock in QDS Collectors implementations is now DISABLED by default, due to its
  high memory overhead and availability of LatencyMonitor where it is needed. Time tracking of GlobalLock
  can be still enabled via JMX console via "com.devexperts.qd.impl.matrix:type=XXX" beans using "useLockCounters"
  property that should be set to a regexp that matches all operations whose global lock times shall be
  measured. The list of all supported operations is reported via "allLockOperations" property.
  It can be also enabled on startup with the following system properties:
  -Dcom.devexperts.qd.impl.matrix.XXX.useLockCounters=YYY
  where XXX is "Collector" to affect all collectors or "Ticker", "Stream", or "History" for a specific
  type of collector.
* New utility methods are introduced in com.devexperts.qd.monitoring.QDMonitoring:
  - getMBeanNameForClass returns the default MBean name for a singleton class.
  - registerMBean has 3-argument version to explicitly specify bean management interface.
* InstrumentProfileTransform does not waste time on statistics reset.

QDS 3.110:

* [QD-192] dxFeed API: Introduce CandlePrice.SETTLEMENT
* [QD-189] Misc improvements for xxxMapping classes and link records with mappings
  - Provide DataRecord.getMapping() method that returns the mapping for the corresponding record instead of
    xxxMapping.getInstance().
  - Introduce com.devexperts.qd.ng.RecordMapping as a base class for all xxxMapping classes.
  - Provide xxxMapping.getRecord() method for all mappings.
  - Provide xxxMapping.getRecordExchange() methods for market event mappings.
  - Provide xxxMapping.getRecordPeriod() and getRecordPrice() for candle mappings.
* Better handling of decimal fields in mapping classes.
* Add composite and regional Book records and mappings without event class.
* Sort records in the scheme so that all regional records go after all composite records.
* Add method MarketEventSymbols.buildSpreadSymbol() for building canonical spread symbols.

QDS 3.109:

* [QD-188] dxFeed API: Shorten toString representation of market events to make logs more compact and easy to read.
* [QD-186] dxFeed API: add isSpreadLeg and isExtendedTradingHours flags to TimeAndSale event.
* [QD-185] dxFeed Scheme: Add "Candle{=m,price=xxx}" records for xxx in bid, ask, mark
* [QD-183] dxlib: More util classes (QuickSort and LongHashXXX classes)
* [QD-182] Schedule shall provide more details when it fails to parse schedule definition.
* [QD-152] dxlib: Logging needs to implement company-standard log layout
* [QD-129] dxFeed API: Wildcard subscription to events
  - com.dxfeed.api.osub.WildcardSymbol class is introduced to represent "wildcard" subscription symbol.
  - All event types support wildcard subscription with a limitation that lasting events events are not
    conflated when subscribed to via wildcard and wildcard subscription should not be mixed with regular
    by-symbol subscription in a single instance of DXFeedSubscription.
* [QD-98] Drop support for legacy (pre QDS 3.69) implementations of QTP protocol that work in data-provider role
  - QDS distributor adapter waits for PROTOCOL_DESCRIPTOR message.
  - Subscription will be sent to remote host only when the appropriate protocol descriptor is received.
* [QD-112] Build-in dxFeed filters
* Add QuickSort class.
* [QD-140] dxFeed API: Misc performance optimizations
  - List of event and subscription listeners in DXFeedSubscription class is optimized for a common case of
    a single listener.
* [QD-130] dxFeed API: Ability to publish events via stream
  - All events are published to stream in addition to their regular contracts.
  - Autogenerated xxxEventDelegateFactory classes now clearly show what contracts are used for each record.
* [QD-76] Extend default dxFeed scheme to eliminate the need to use external scheme
* Add missing fields in Trade and Profile records.
* Add math methods to Decimal, improve performance.
* [QD-167] dxFeed API: Provide **Mapping classes for all records in impl package to be used by exchange gateways
  - Mapping API is semi-public (to be used only by exchange gateways and similar utilities).
  - Mapping classes are located in com.dxfeed.event.<group>.impl package.
  - The general name of the mapping class is <record>Mapping.
  - Each mapping class has getInstance method to get a mapping for a DataRecord.
  - Each mapping class has getter and setter methods for all its record field.
  - Some fields have multiple getter and setter types distinguished by suffixes. For example,
    time fields have "getXXXSeconds" and "getXXXMillis" methods as well as the corresponding setters.
  - dxFeed event delegate classes use mapping classes in their implementations.
  - Main entry point for code generation tool is now "com.dxfeed.api.codegen.ImplCodeGen"
  - To define mappings and delegates for new event types just edit the source of ImplCodeGen.
    It creates all the corresponding files on the first invocation using its build-in templates.
  - Source files that don't need any changes are not touched by ImplCodeGen.
    ImplCodeGen can be invoked at any time to verify that all auto-generated sources are up-to-date.
  - Single CandleMapping class is used for all Trade.<agg> records as well as for Candle record.
* [QD-81] QDS Tools: Ability to shield comma in qds connect symbol list
  - Comma in a symbol can be now shielded with back-slash.
  - Literal back-shall in the symbol has to use double back-slash.
  - Comma inside any kind of parentheses (straight, brace, or curly) is automatically shielded to account for a
    common use case of addition attributes that follow symbol in parentheses. Parenthesis themselves can be
    shielded with back-slash to avoid such effect.
* [QD-178] QDS splitted tapes may start with payload data written prior to DESCRIBE RECORD data.
  - ByteArrayParser requires DESCRIBE_RECORD messages if instructed to use DESCRIBE_RECORD.
    Messages are considered corrupted if they refer to undescribed records.
  - MessageAdapter can skip corrupted and unknown messages if the following system properties are set:
    -Dcom.devexperts.qd.qtp.MessageAdapter.skipCorruptedMessages
    -Dcom.devexperts.qd.qtp.MessageAdapter.skipUnknownMessages
* [QD-177] dxFeed API: toString() method of Summary event prints DayClosePriceType instead of PrevDayClosePriceType.

QDS 3.108:

* [QD-174] Instruments: Add ability to compare IPF date-based fields to current date
* [QD-171] QDS Tools: Kill JVM when attempt to initialize any tool fails
* [QD-175] Make IndexedSet and IndexedMap cloneable.
* QD RMI: Fix data race that was found by data race detector and a potential bug with detection of
  least-loaded connection that could materialize if >4GB buffered to send (bytes were counted in int).

QDS 3.107:

* [QD-160] QD Core: Discrepancy between QDDistributor.close java doc and actual behavior
  - Documentation of QDDistributor.close is updated. The behaviour of various method after
    the distributor is closed is unspecified and is left up to implementation.
* [QD-164] Remove QDStats from Connectors JMX nodes
  - MessageConnectorMBean interface is extracted from MessageConnector interface. It defines
    only properties and operations that every message connector exposes via JMX.
  - Stats attribute is no longer exposed.
* [QD-165] QTP Protocol documentation has wrong information about time and date serial types
  - DESCRIBE_RECORDS documentation fixed.
* [QD-172] dxFeed API: incorrect sign extension in created TimeAndSale events
* [QD-170] IPF: Improve 'instruments' tool to be able to subtract one ipf from another
  - New option "exclude" was added. It can be specified several times to exclude profiles from several sources.
    Option "exclude" reads IPF files similar to "read" option using same parameters specified via "bizdate" and "osi" options.
    Option "exclude" is executed after "merge" option and before "check" option.
  - New option "script" was added. It can be specified several times to execute several scripts.
    Option "script" executes commands from specified script file one-by-one.
    Specified script file shall contain commands, empty lines and comments marked with hash symbol at the start of the line.
    Each command occupies single line in the script, starts with command name and ends with command arguments.
    Available commands include all available options (full names only) plus command "clear" which clears working list of profiles.
    Command "script" allows recursive execution of other scripts.
    Commands "read" and "exclude" use "bizdate" and "osi" parameters specified as command-line options - there is no way to change their value from within the script.
    Option "script" is executed after "write" option.
  - The order of option execution is same as before, it can be checked from built-in help,
    it does not depend on the order in which options are specified, and all multi-specified options are executed together in their due order.
    The order of script command execution is according to their order in the script, they are executed strictly one-by-one.
    All scripts specified by option "script" are executed after all other options, they inherit and share same list of profiles.
    However it is recommended to avoid mixing old-style options with "script" option to avoid confusion.
  - Sample script:
    # Extract options into separate IPF
    read all.ipf
    transform if (TYPE != 'OPTION') delete();
    sort
    write options.ipf
    clear
    # Write other instruments into other.ipf
    read all.ipf
    exclude option.ipf
    sort
    write other.ipf
* [QD-120] dxFeed API: Message and Configuration events (subscription and publishing)
  - com.dxfeed.event.misc.Message event added; it uses stream contract
  - com.dxfeed.event.misc.Configuration event added; uses ticker contract and supports version for ordered updates
* [QD-173] RMI: Ability to share socket between RMI and dxFeed API
  - RMIEndpoint.create(DXEndpoint.Role) method added; it supports FEED or PUBLISHER roles
  - RMIEndpoint.getDXEndpoint() method added; it returns associated DXEndpoint which shares socket with RMI

QDS 3.106:

* [QD-161] dxFeed API: Candles are published to wrong (all) periods
  - Bug fixed, unit-test added.
* [QD-166] Add price type flags to Summary record
* [QD-158] dxlib: Optimize the size of com.devexperts.logging
* [QD-149] dxlib: Introduce SynchronizedIndexedSet
  - [Synchronized]IndexedSet.putIfAbsentAndGet method is introduced.
* DXFeed API: JavaDoc for Order is clarified with respect to SIDE_BUY and SIDE_SELL.
* [QD-156] FileConnector: "delayed=xxx" or "start=-xxx" starts only at the beginning of a new file
  - File reader now correctly identifies the first file that contains requested start time. It initially
    creates a list of all files and looks at the first one whose timestamp does not exceed start time.
* [QD-155] FileConnector: Invalid delay is reported to MARS and delay creep when using "start" attribute
  - "delay" node in mars is renamed to "delayed" to match the name of configuration property
    "delayed" whose value it reflects.
  - "delayed" node in mars is "null" when "delayed" is not explicitly set and is formatted as time period
    (like PT20M) to avoid confusion with "delay_actual".
  - When using "start=xxx", the effective delay is computed immediately at the start of the file reader
    (using system current time) and is only recomputed in "cycle" mode on each subsequent cycle.
  - When neither "start=xxx" nor "delayed=xxx" is specified, then effective delay is computed based on
    the actual time of the first record in the first file. Before this file appears, "delay_actual"
    is reported to MARS as "0".

QDS 3.105:

* [QD-145] FileAnalysis: Analyze frequency distribution of ascii chars in symbols and build huffman prefix code
  - "-s|--symbols" options in FileAnalysis tool turns on character frequency stats gathering.
  - For each individual symbol category (futopt, option, futures, other -- is determined by the symbol prefix)
    stats are gathered separately, as well as total stats for all ASCII symbols.
  - Hypothetical number of bytes that an optimal code will consume is shown in comparison to the original code,
    assuming that a 3-bit sequence is used to signal new code type
    (analysis of complete code replacement approach without extra bits is also shown for comparison).
  - Length of encoding is limited to 10 bits by default. The limit can be changed with system property:
    -Dcom.devexperts.qd.tool.analysis.Symbols.L=xxx
* [QD-144] Util: A separate build file to create .jar and javadoc for non-QD-specific utility classes (dxlib)
  - Top-level javadocs (package and class) for com.devexperts.{io|services|logging|util} are cleaned up.
  - A list of source files that will be tentatively included into dxlib is created with a separate build file.
  - Removed dependency on com.devexperts.qd.util.TimeFormat.
* [QD-143] Tools: Don't create mars nodes if "-s xxx" was not set
  - The "-s" ("--stat") option specifies an interval to report statistic to the console and to MARS.
    MARS should not be initialized (and MARS nodes should not be created) in Tools if "-s" option
    is not specified.
* [QD-142] FileReader: Support CSV (comma separated values) text format
  - CSV format can be specified in file reader with "format=cvs" property.
  - CSV format can be specified in tape file writer (dump & connect tools) with "format=csv" property.
  - CSV format is auto-detected by "##QD_" prefix of the file if not explicitly set.
  - Tab-separated ("text") format is auto-detected by "==QD__" prefix of the file if not explicitly set.
  - Default CSV format of onDemand data extractor servlet can be parsed automatically
    (file reader code is aligned with it).
* [QD-141] HTTP Connector: Support reading of files, including onDemand service results
  - HTTP connector supports "file" property to read a specified http URL with FileReader using GET method.
  - HTTP connector falls back to file reader automatically if POST method is not supported by the server.
    So, for example, onDemand data can be read using the following address:
    http://demo.dxfeed.com:7070/onDemand/data?categories=E-Q&symbols=ACN&start=20100506-1447&end=20100506-1449[user=demo,password=demo,file]
  - HTTP handler thread now has the same name as the name of its connector.
  - FileConnector also correctly opens http urls. To explicitly invoke file connector for HTTP
    use "file:http://..." address. However, user and password cannot be specified with FileConnector.
  - Note, that file reader does not attempt to read time file if the specified URL has query parameters
    (like onDemand HTTP in given above). However, without query parameters it works just like with
    a regular file and tries to read a corresponding ".time" file.
* [QD-72] Tape file reader shall be more robust and retry attempts to open files
  - Automatically detect time file presence on the first file in sequence and require presence
    of time file (or ignore it) for all subsequent files.
  - Correctly handle the sudden disappearance (inability to open) either data or time file.
    Rescan directory and wait while directory is non-empty.
  - File reader supports "time" parameter to explicitly turn on/off time reading.
  - "time=none" has the same behavior as "ignoreTime".
  - "time=text" explicitly turns on timestamp file reading. Data files with missing time will
    not be read by accident. File reader will only read data files when the corresponding ".time"
    file is present.
  - Unspecified "time" parameter is auto-detected based on the first file.
  - File connector reports its CONNECTING/CONNECTED/DISCONNECTED status properly.
  - File connector can be stopped/restarted while reading or waiting.
  - File reader thread now has the same name as the name of its connector.
  - File connector code is included into "qds.jar" delivery (it was in "qds-tools.jar" only).
  - File connector reports its configured "delay" in MARS node and the "delay_actual" that
    show the actual delay. It can be tracked by monitoring tools to detect the case where
    it cannot keep up with reading files fast enough.
  - Micro-framework for monitoring of connector-specific attributes via MARS is introduced.
    com.devexperts.qd.monitoring.Monitored annotation marks connector getXXX methods whose values
    are reported to MARS by ConnectorsMonitoringTask. Note, that address, connection count and
    number of bytes read/written per second are always reported for each connector.
* [QD-34] Cleanup of written tapes does not delete old files as expected.
  - Take into account both data and time files when computing consumed disk space.
  - Time files are taken into account only when time files are being written.
  - Correctly delete files when file name contains directory name.
  - Require that "split=xxx" is specified when file name contains '~' character.
  - Create files only when data is actually needs to be written (do not create empty files).
  - Support timestamp format (10m, 30s, etc) in "storageTime=xxx".
  - Automatically create a directly for the tape file
  - Correctly handle a case when the directory if empty or absent
* [QD-118] QDS Tools: --tape has misc problems with timestamps that are written to .time files
  - Write milliseconds to text timestamp files.
  - Timestamp files should not be created in split mode if "time=none" is explicitly set.
  - Timestamp files should be written only if "time=text" or "time=long" is explicitly or implicitly set.
    "time=text" is set implicitly if file name ends with ".data" or if "split=xxx" mode is used.
  - Timestamps and data are now written to the correct file during file rollover. Both data and timestamp
    (with zero position) are written to the freshly opened file.
  - Freshly opened file is correctly named with current time when there was no data for a while.
* Zero date-time is parsed from "0" string by com.devexperts.qd.util.TimeFormat.

QDS 3.104:

* [QD-119] AbstractDataXXXField classes should be public.
* [QD-92] Support cycle playback and stop time in FileConnector.
  Misc bugs related to reading of timestaped files are also fixed.
  FileConnector reconfigures and restarts itself on any property change via JMX.
* [QD-78] FileReader misbehaves when reading timestamped files in case no data is received
  It also fixed. Even when there is no data, the configured delay is correctly observed
  when "delay=xxx" option is used.
* [QD-116] Mics TimeFormat bugs and limitations fixed:
  - TimeFormat fails to correctly parse date-time without explicit time-zone specific in day-light savings.
  - TimeFormat fails to parse date-time with milliseconds (but supports formatting of such values).
  - TimeFormat does not support formatting with milliseconds and timezone.
  - TimeFormat internally throws exceptions during parsing of valid strings.
* Timesync publishes more data to MARS.
* More detailed javadoc on DXEndpoint.connect method.
* DXFeed API: Fix handling of negative times (incorrect sign extension).

QDS 3.103:

* Stop using negative index in Order event.
* Make nice report for cmeproduct transform error for bad data
* [QD-96] Support custom fields in InstrumentProfile
* Add SPREAD type to InstrumentProfile
* ByteArrayParser minor improvements:
  - Magic constant 10000 is now configurable via system property com.devexperts.qd.qtp.processThreshold
  - IndexedSet of partitioned messages is allocated only when needed.
* [QD-110] QDS Tools: Support --tape option in dump tool. With this option, dump tool becomes a
  universal file-conversion tool. It can take file in one format and convert it to anther one. Just use:
      qds dump <source-file> -t <dest-file>[format=xxx]
  --tape option implies --quiet and suppresses output to the console.
* [QD-109] QDS FileConnector shall become "disconnected" when file is over. Tools quit on it.
  The following tools can read data from the files via FileConnector: compare, connect, dump, feed, multiplexor.
  When taking data from a file they should quit when file is over.
* [QD-108] QDS Tools shall use default data scheme. Scheme can be overridden by -Dscheme=xxx system
  property and this code is integrated into QDFactory.getDefaultScheme() now. Scheme can also be
  overridden by -Dcom.devexperts.qd.DataScheme=xxx system property where xxx supports the same syntax
  as -Dscheme=xxx. That is, xxx can be of the form <jar-file-or-url>!<class-name> where both jar file
  and class name are optional. Support for this syntax is added to com.devexperts.services.Services class.
* QDS version checks and reports mismatch between QDS and QDS Tools. Mismatch between
  versions is included into QDS version string.
* Data scheme class name is logged on the first invocation of QDFactory.getDefaultScheme()
* Complete dxFeed API JavaDoc.
* DefaultScheme and DefaultRecord now explicitly work only with fields that are derived from
  AbstractDataIntField and AbstractDataObjField classes. DefaultScheme now explicitly works only
  with records that are derived from DefaultRecord.
* DefaultScheme.setParentReferences, DefaultScheme.verifyScheme, and DefaultRecord.setParentReferences static
  methods are deprecated. Just remove their usage. All the work the were doing is now performed in the corresponding
  constructors.
* Deprecated methods DataScheme.writeRecordIdentity and readRecordIdentity are removed.
* Methods in DefaultScheme and DefaultRecord that are not designed to be overrideable are marked as final.
* Introduced FileAnalysis tool to analyze file contents and compression algos
* FileReader now supports "readAs" property for all formats including text and blob
  (use it with "qds connect file:<name>"). Note that binary, binary_delta, and binary_plain
  are all supported as "format" attribute values for file reader, but they do not
  produce any difference in behaviour. The actual use of delta compression during reading
  is detected by bits in DESCRIBE_RECORD messages.
* TimeField, SequenceField and DateField classes in com.devexperts.qd.kit are introduced.
  Presentation flag is SerialFieldType marks the time, sequence, and date fields.
* [QD-106] Introduced SerialFieldType.withName and SerialFieldType.forNamedField to define more specific named types
  for specific fields (like BID_PRICE) that will be associated with advanced compressed methods in the future.
* Pretty formatting of Time, Sequence, and Date field values in dxFeed data scheme.
* RecordBuffer.replaceRecordAt and replaceSymbolAt methods are introduced to perform in-place
  modification of record and symbol information in the buffer.
* Do not print exception stack trace if remote filter name cannot be parsed (just log a warning).

QDS 3.102:

* [QD-103] Add timestamp into MarketMaker record
* Added bid and ask times to MarketMaker record.
* ThreadSafeDateFormat removed (no replacement)
* Zero times are formatted as "0"
* QDS tool "Instruments" supports "products" option to create products for existing futures.

QDS 3.101:

* Update license to MPL 2.0.
* [QD-101] QD History: Suboptimal performance under large subscription and updates.
  When subscription was very large (N>>10k items) and all items are updated, history could have experienced O(N*N)
  performance for data processing and retrieval. This was fixed (now data processing and retrieval is always O(N)
  amortized) and unit test added with N=30k that effectively hangs old implementation of History.
* A number of constants in QTP can be overridden via system properties (defaults are specified in the first line):
  -Dcom.devexperts.qd.qtp.reconnectDelay=10s
     Default reconnection delay in QTP. Note, that this default affects all connectors and it
     can be set on per-connector basis (JMX or config line) with "reconnectDelay" property in connector.
  -Dcom.devexperts.qd.qtp.readAggregationSize=8000
     Maximum number of bytes to aggregate before processing when reading data from socket. If fewer number of bytes
     received and no more are available in socket then parsing starts immediately (no additional delay),
     but when data is coming into a socket continuously, then it is read from socket in chunks
     (chunk size can be configured via -Dcom.devexperts.io.chunkLength=xxx with a default of 4096), and parsing
     starts as soon as total number of bytes read exceeds this aggregation size. Note, that a parser has its own
     buffer (configured via -Dcom.devexperts.qd.qtp.parserBufferSize=xxx with a default of 20000) and if this
     aggregation size is too large, then parser will have to reallocate its buffer and produce a lot of garbage.
     For good performance, ensure that {@code readAggregationSize + chunkLength <= parserBufferSize}.
  -Dcom.devexperts.qd.qtp.parserBufferSize=20000
     Defines default size of the parser buffer that is kept in each parser instance. If received packet exceeds the
     size of the buffer, then larger buffer is allocated and becomes garbage when the message is processed.
  -Dcom.devexperts.qd.qtp.composerThreshold=8000
     Defines default threshold for the size of the composed packet. When packet size exceeds this threshold, then
     the packet is finished and becomes available for sending. Thus, actual packets can exceed this threshold up to
     the size of one record, which can be quite big if symbols are long or record data contains large object values.
  -Dcom.devexperts.qd.qtp.composerBufferSize=composerThreshold*1.5 // 12000
     Defines default size of the composer buffer that is kept in each composer instance. Its default value is 50%
     larger than the threshold. If composed packet exceeds the size of the buffer, then larger buffer is allocated
     and becomes garbage when the message is sent.
  -Dcom.devexperts.qd.qtp.composerDescriptionBufferSize=4096
     The size of the additional buffer to compose DESCRIBE_RECORDS messages that is kept in each composer instance.
     If the actual DESCRIBE_RECORDS packet exceeds the size of this buffer, then larger buffer is allocated
     and becomes a garbage when the message is sent.

QDS 3.100:

* [QD-93] Holidays for 2012-2014
* [QD-94] DXFeed API: Update to version 3.1xx with support for Candles and time series
  INCOMPATIBLE CHANGES:
  - DXFeed.createConnectedFeed method is removed. Use DXEndpoint to create connection.
    See DXFeed class javadoc for details.
  - "com.dxfeed.api.event" package is renamed to "com.dxfeed.event.market"
    Package contents did not change (the same Quote, Trade, TimeAndSale, etc classes are there)
  - DXFeedSubscriptionChangeListener is moved to another package and renamed to ObservableSubscriptionChangeListener.
    This change should not affect feed consumers.
  NEW FEATURES:
  - "com.dxfeed.event.candle" package is introduced with a set of CandleXXX classes to receive chart candles.
    Candle class represents one Open-High-Low-Close-Volume candle with auxiliary information.
    Use instances of CandleSymbol class to specify which Candles to subscribe to.
  - "DXFeedTimeSeriesSubscription" class is introduced to subscribe to time series (history) of past events in
    addition to all new/current events. It is designed to be used with TimeAndSale and Candle events.
  - "DXFeed.createTimeSeriesSubscription" method is introduced.
* [QD-77] Report QD version in MARS
* [QD-90] IPFSymbolFilter shall accept wildcard symbol.

QDS 3.85:

* [QD-80] Add PermGen monitoring to MARS
* Add monitoring of non-heap memory via MARS and JMX similarly to heap memory.
* ShortString.decode and encode methods have better JavaDoc explaining their behavior.
  decode(0) now returns null, and encode(null) now returns 0. Unit test introduced.
* PatternFilter.quote method is introduced. It quotes all special characters in a string with
  opening and closing braces [ and ], so that it can be used as a pattern.
* CompositeFilters.forRecords is introduced. It returns a filter that accepts a given set of records.
* Better error message when IPF filter cannot connect to IPF file.
* [QD-75] Fix filters handling in channeled agent adapter.
* [QD-87] Agent subscription filter shall be used to filter data sent to wildcard subscription.
* com.devexperts.util.UnsafeHolder is introduced as a common place to get pointer to the instance of
  sun.misc.Unsafe class when needed.
* [QD-67] Dump internal state to file when violation of internal invariants is detected.
  Internal state of QDCollector will be dumped to a file when violation of internal invariants is detected.
  Handling of invariant violation is controlled by several properties (default value is specified)
  - com.devexperts.qd.impl.matrix.FatalError.survive (not set by default)
    If this property is set to true, then invariant violation will lead to thrown exception. Typically, this
    exception will get logged on some top level and execution will continue (the following dumping properties
    are ignored if survive property is set). If this property is false or not set (by default), then dumps will
    be made (see below) and System.exit(1) will be called to terminate JVM.
  - com.devexperts.qd.impl.matrix.FatalError.dump=QDFatalError.dump
    Dumps internal state of the collector to the specified file on invariant violation. If the property is set to
    empty value, no dump will be saved.
  - com.devexperts.qd.impl.matrix.FatalError.hprof (not set by default)
    Forces dump of all JVM memory in HPROF format (Sun JVM 1.6+ only) to the specified file (set this property to a
    file name in order to activate this feature)
  "QDFatalError.dump" file can be analyzed with com.devexperts.qd.impl.matrix.tools.DebugDumpReader class. Run it
  with the file name as a sole argument. It reads the dump, verifies all data structures and prints detailed report.
  Verification and dumping to a file can be also invoked for all collectors via JMX console ("verifyCollectors" and
  "dumpCollectors" actions respectively). However, when invoked via JMX, verification and dumping is performed
  asynchronously and if the subscription is changing, then problems with the data structures can be falsely
  identified during verification.
* [QD-70] BUG FIX: DXFeed API: Potential reordering of events when multi-threaded executor is used
* [QD-71] DXFeed API: Introduce DXEndpoint class for managing of DXFeed (connect/disconnect/close)
  DXFeed.createConnectedFeed(...) is now deprecated. Use DXEndpoint.create().connect(...).getFeed() instead.
* [QD-89] DXFeed API: Introduce DXPublisher to publish events.
* New fields added into Profile event: "StatusReason", "HaltStartTime", "HaltEndTime".
* DXFeedQuoteBoard extended into dxMarketDataViewer.
* Schedule API: add more methods for searching.
* Schedule API: add reset time property.
* BUG FIX: QDS tool "connect" was not working properly in "subscription cloning mode" - it was working as multiplexor instead.
* [QD-32] Change TimeAndSale.isTrade() behaviour: set to false for out-of-sequence trades, deprecate isTrade(), introduce better-named isWellFormedTrade()
* TimeAndSale.isTrade() property was renamed into isValidTick().
  (Old getter & setter were deprecated and will be removed in future.)

QDS 3.84:

* THTSTool removed.
* Schedule API works via InstrumentProfile.

QDS 3.83:

* [QD-73] RMI: Threat StackOverflowError as demarshalling problem and add more debug info.
  Now if the "com.devexperts.io.ObjectDeserializer.dumpErrors" system property is set,
  all deserialization problems are dumped into log together with the bytes that couldn't be
  deserialized. If the length of the corresponding byte array is too big (greater than
  "com.devexperts.io.ObjectDeserializer.maxBytesToLog" system property value or 1K if not specified),
  then these bytes are dumped into "deserialization-<yyyyMMdd-HHmmss>.dump" file instead.

QDS 3.82:

* [QD-46] Add trading halt events:
  - "Flags" field was added into Profile record in DXFeed scheme;
  - "isTradingHalted" field was added into Profile DXFeed event.

QDS 3.81:

* DXFeed Summary event switched from Fundamental into Summary record, in order dayIds to come into effect.
* [QD-74] DXFeed API scheme now includes regional records.
* [QD-48] Add timestamps into Summary DXFeed event: DayId & PrevDayId fields added into DXFeed Summary event.
* DXFeedConnect now supports comma-separated symbol list.
* [QD-63] Improve stacktrace for RMI errors. All RMIExceptions at the client side now have client thread stack trace.
  Application errors now have transparent stack trace that includes both client and server side application code.

QDS 3.80:

* [MDD-42] Develop MDD (dxFeed) Scheduling API
  CME futures added.
* [QD-61] JMX memory leak
* TradeHistory record added to DXFeedScheme.
* [QD-69] Refactoring: Potential NullPointerException in classes derived from DataProcessor and SubscriptionProcessor.
  startProcessing methods are introduced, old constructors are deprecated. New CompositeDataProvider class is
  introduced to support multiple data providers.

QDS 3.79:

* [QD-65] Agent.close should be the highest-priority subscription-modifying operation to avoid OOM under load.
  addSubscription and removeSubscription now help process pending close operations as their first action
  after they acquire global lock.
* [QD-66] Agent.setSubscription should modify global subscription in a batches of at most 10000 items like other
  subscription-modifying methods. Moreover, setSubscription is now substantially faster and does not
  allocate any temporary buffer memory. It is almost as fast as addSubscription on empty agent now.
* Collector.createDistributor does not require global lock at all. Global lock is only acquired for a short time
  during "initialization", which happens when subscription is retrieved for a first time from added or removed
  subscription provider.
* [QD-64] Non-blocking initialization of Distributor. Now, operation to create and close distributor
  happens completely without the global lock. It means that Post tool connecting to multiplexor does not
  create any additional load on the global lock. Global lock is taken only for a short time when
  added or removed subscription provider is requested. Dumping of the current subscription snapshot to the
  remote subscription provider happens in a lock-free manner.
* BUG FIX: State of subscription that is visible to the remote data provider can be inconsistent if
  subscription is changed between getAddedSubscriptionProvider and getRemoteSubscriptionProvider.
  The corresponding unit-test is introduced.
* DataListener.VOID and SubscriptionListener.VOID constants are introduced.
* BUG FIX: Filter that is passed to DistributorAdapter is rewritten by null if unparseable filter
  is received in the protocol description over network.
* Consistently use SystemProperties.getProperty utility method to get system properties and "eat"
  SecurityException that might be thrown.
* ArrayUtil class is introduced with utility methods to implement O(1) operations on arrays.
  QDStats children arrays, collector agents, and distributors arrays all now use ArrayUtil for
  O(1) amortized creation operations.
* BUG FIX: logging prints wrong time during summer-to-winter time switch hour.
* MessageConnectorState has only 3 values for public API: CONNECTING, CONNECTED and DISCONNECTED.
* IndexedSet stats tracking optimized.
* DXFeedScheme is now default scheme unless other data scheme is specified.
* BUG FIX: "java.lang.IllegalArgumentException: Unknown key" in Ticker that is working in
  "store everything" mode.
* Any invariant violations (like counter underflow or unknown key) in the internal symbol mappings in
  QDS core are now considered to be a fatal and unrecoverable error. JVM is terminated by default with
  System.exit if such problem is encountered. The default behaviour can be overridden with the following
  JVM argument: -Dcom.devexperts.qd.impl.matrix.FatalError.survive
  In this case, exception will be thrown and JVM will continue to run. However, this is not recommended,
  since recovery from such broken invariants is highly unlikely.
* Post tool is rewritten, so that it does not request subscription from the remote side anymore.
  Also, Post can now be used from command line like this: "echo ... | qds post ...".
  Post waits until connections are established and messages are sent into each connector specified on
  the command line and then quits.
* In raw (default) mode Post tool sends the actual RAW_DATA message over the network to the remote
  side which triggers its placement into ticker, stream, and history.
* BUGFIX: [QD-60] Strange reconnects. The heartbeats messages were not sent under certain circumstances.
  The bug was originally introduced in QDS 3.70.
* BUGFIX: [QD-62] HttpConnector may fail with NullPointer exception.
* Configurable SO_TIMEOUT on read operations via system property:
  -Dcom.devexperts.qd.qtp.socket.soTimeout=5m // 5m is a default value
  Setting this property to 0 completely turns off SO_TIMEOUT (not recommended!)
* All MessageConnectors now log (with info level) all configuration actions that are applied to them, such
  as changing any parameters, starting or stopping. Logging is done via a logger that has connector's name
  as its last component, so connector's name appear in the log regardless of which thread calls those methods.
* MessageAdapterConnection now logs (with info level) that fact that it had detected heartbeat timeout and is
  disconnecting.
* SocketReader and SocketWriter threads now detect and log (with warn level) occurrences of very log data
  retrieval or processing operations. The timeouts can be configured with the following system properties:
  -Dcom.devexperts.qd.qtp.socket.readerWarnTimeout=15s // default value
  -Dcom.devexperts.qd.qtp.socket.writerWarnTimeout=15s // default value
* Disconnection reason is now printed even if IOException has null message (exception.toString is printed).
* When server closes connection with the remote client, the client now treats it as a problem and logs it as error.
* Verbose mode in SocketReader and SocketWriter. In verbose mode, a detailed debug info is logged, including
  the number of bytes sent/received, hex of the first 16 bytes in each packet, notifications that threads are about to
  park and when they unpark. Verbose logging can be turned on for all socket connectors with this system property:
  -Dcom.devexperts.qd.qtp.socket.verbose
  If only a subset of connectors needs to have verbose logging, then set the above property to a string. If this
  string is contained in a connector's name, then its reads and writes will be logged verbosely.
* BUG FIX: DXFeed.detachSubscription now closes event listeners for corresponding subscription.
* Too large ObjectSerializers are not reused anymore.
* MessageVisitor has 2 new methods "visitData" and "visitSubscription" while old corresponding methods are deprecated.
* Two more tools :
  * SubscriptionBinParser - parses binary files with qd subscription and outputs it as a text file.
  * GCTimeTransformer - takes text file with GC verbose output and converts gc timestamps from "seconds since start"
    to absolute time.

QDS 3.76:

* Remove needless auto-generated classes.
* [QD-57] Option -T (--top) added for connect tool; it counts and lists top N frequent symbols in a feed.
* TDP refactored - more convenient output, also output shows depth data.
  By default TDP prints 50 level deep stacks as long as they are unambiguous.
  To reduce depth use options "-t 0 -m 1" for classic view. Also depth of existing
  profile data can be reduced with command like this (output written to files with "~" suffix):
    tdp -t 0 -m 1 profile.txt
* DXFeed samples are removed from qds.jar.
* DXFeed Demo GUI Quote Board added.
* More lock tracking for local and global locks in Collectors:
  - Detailed warning when lock is taking too long includes stack trace of the last owner and last operation.
* DEFENSIVE PROGRAMMING:
  - Make code more resilient to OutOfMemoryError (avoid internal data corruption due to OOM) that may happen
    when large subscription arrives to Collector.
  - Try not to rehash data structures when agent is closed, to avoid getting OOM while trying to close
    agent with lots of subscriptions. Will also make closing agents somewhat faster.

QDS 3.75:

* [QD-56] IPF filter can cause undesired effects if transferred between JVMs in protocol description header
  StableSubscriptionFilter is introduced.
* [QD-55] RMIException: Unknown subject identifier in request.
  + BUG FIXED: (it was one-line error in the logic of the client side)
  + Massive refactoring of ClientSide class -- splitting into smaller, encapsulated entities.
  + Refactoring of ServerSide class -- splitting into smaller, encapsulated entities.
  + Wait for DESCRIBE_PROTOCOL from remote side before attempting any RMI operations, with autodetection
    of "legacy" RMI implementations that do not sent describe in 3 seconds.
  + Don't sent requests to connections that declare they don't support RMI.
  + Limit max number of concurrently sent RMI requests or response per connection (to 6 by default) to get
    better performance when the server system is overloaded.
* [QD-14] Multiplexor: Buffer size in MARS and on console in invalid
* BUG FIX: SocketHandler was missing MessageConnector notification when it is entering CONNECTING state.
* MessageConnector.getState now returns enum MessageConnectorState.
* Pretty names for RMI connector threads.
* [QD-54] Duplicated data in stream when wildcard subscription and filters in agent address are present
* [QD-52] IndexedSet randomly experiences slow performance
          Track only average distance to elements in the set.
          Minor improvement to initial parameters.
* TDP tool now dumps top methods statistics first (before total statistics).

QDS 3.74:

* [QD-52] IndexedSet randomly experiences slow performance
* [QD-53] IndexedSet should detect unsynchronized concurrent modification when it has opportunity to do so

QDS 3.73:

* [QD-51] Totally consistent connector naming between log, JMX, and MARS
* [QD-50] Include address in all connection-related thread names, improve naming & logging

QDS 3.72:

* [QD-49] NullPointerException while registering with JXMStats MBean

QDS 3.71:

* Improved performance of QDStats create/close methods.
* [QD-47] Improve state and stats handling in QTP and RMI connectors.
  Warning: non-compatible changes due to removed deprecated classes, interfaces and method parameter.
* [QD-45] Create trading schedule API.
* [QD-44] QD over RMI does not work.
* Added StreamInput/Output - BufferedInput/Output wrappers around Input/OutputStream.

QDS 3.70:

* Added shaper codec that artificially constrains connection throughput as a sample and for testing purposes.
* BufferedInput: added totalPosition and seek API, improved mark API.
* Transform compiler: improve performance of relational operators "in" and "notin" for set of constant values.
* [QD-43] Generify QD classes.
* [QD-42] Add utility classes.
* [QD-41] Implement multiplexing of RMI messages among themselves and with QD messages.
* BUG FIX: HTTPS proxy support failed in certain scenarios and wrong address was reported in certain places.
* Class DXFeedDataFieldAggregator moved to better place (correction for QD-7 bug).
* [QD-40] Add GC.average_5min value reporting to built-in MARS agent.
* [QD-37] CPU usage is reported higher than 100%
* [QD-36] Add candle records to DXFeedScheme.
* [QD-35] Services are incorrectly distributed over QDS jars
* [QD-33] Timeout monitoring mechanism breaks after endpoint.disconnect()
* [QD-31] RMI hangs up when used with ssl codec
* [QD-29] Add ability to provide custom TrustManager for SSL codec.
* [QD-28] Change type for Trade.dayVolume to remove Integer.MAX_VALUE limitation
* [QD-26] Make AgentAdapter handle several collectors in a configurable way

QDS 3.69:

* [QD-27] Add ability to view via JMX any record for specified record name and symbol in the text format used by QDS tools.
* [QD-25] OCC parser loses options with OSI symbols when accelerated expiration occurs.
* [QD-24] Make ipf filter understand simplified URL format
* [QD-22] DXFeed's toString() should show Time in human-readable format
* [QD-20] Replace tool IPFMultiplexor with standard IPF filter.
* [QD-19] TimeAndSaleDelegate incorrectly computes event time, event id and exchange sale conditions.
* [QD-18] Make "multiplexor" tool that merges old TradeHistory and new TimeAndSale streams.
* [QD-17] Add TimeAndSale record into DXFeed
* [QD-16] DXFeed API samples should not use hard-coded IP address
* [QD-15] Provide secure connection to JMX console.
  The following system properties were introduced:
  jmx.html.auth -- if this property is set to a comma-separated list of <login>:<password> pairs, then HTTP(S) JMX
     console will require authentication with one of those logins and passwords.
  jmx.html.ssl -- if this property is set, then HTML console that is created on jmx.html.port will use SSL (HTTPS).
    In order for SSL connection to work, additional system properties need to be specified:
      javax.net.ssl.keyStore -- should specify path to java keystore with a certificate for SSL
      javax.net.ssl.keyStorePassword -- should specify password for the above store
* [QD-13] Post tool does not send data to stream by default
* [QD-12] Make DXFeed Quote Table sample
* [QD-11] Temporary implement TimeAndSale event over TradeHistory record
* [QD-10] DXFeed API: Improve Samples
* All BufferedInput implementations support mark/reset/rewind
* BufferedInputPart class is introduced to facilitate parsing on TLV or LTV binary protocols.
* BusinessSchedule generates fewer garbage and has smaller memory footprint.
* BUG FIX: ByteArrayParser incorrectly determined whether records are compatible or adaptation is needed.
* FileConnector now supports "readAs" option for binary tape files (it's quite similar to Connect --tape "saveAs" option).
* [QD-9] Introduce Timing and BusinessSchedule classes
* [QD-8] Memory garbage is generated in IO/network code
* [QD-7] DXFeed API: Dynamic DataScheme Generation
* Memory leak in compression util fixed.
* DESCRIBE_PROTOCOL message in QTP (message_id = 1) is introduced. Each side of QTP connection describes
  which messages it can send and which messages in can receive. Additional key-value attributes can
  accompany message descriptions and protocol itself.
* Agent and distributor adapters send user-specified filter to the remote side, which has the
  following benefits:
  - Distributor adapter will send only subscription that is matching remote filter to the remote side.
  - Agent adapter with wildcard subscription will only send data that is matching remote filter
    to the remote side.
* Distributor adapter does not send subscription unless remote side explicitly requests it with
  DESCRIBE_PROTOCOL message. For compatibility with legacy QD implementations subscription will
  be send anyway if DESCRIBE_PROTOCOL message is not received in 3 seconds.
* build.xml fixed to put common application/transport framework entities into qds.jar
  while putting specific implementations into qds-tools.jar
* Connectors naming improved:
  - MARS nodes naming for connectors became more human-friendly;
  - now user can specify custom name for a connector
    to be used in logging and monitoring.
* Logging messages improved in socket connectors.
* MessageConnectorAuditor and all methods that use it are now deprecated.
* HTTPS proxy support added in client socket connector.
* HTTP proxy support added in HTTP connector.
* Simplified DXFeed API is introduced.
* PERFORMANCE: Implementation of "striped" collectors is introduced. This is implementation
  is available in "qds-tools.jar" and is turned on by one of the following system options:
    * com.devexperts.qd.impl.stripe=<n> // for all collectors
    * com.devexperts.qd.impl.stripe.Ticker=<n>
    * com.devexperts.qd.impl.stripe.Stream=<n>
    * com.devexperts.qd.impl.stripe.History=<n>
  Where <n> must be a power of two (2, 4, 8, etc). Activation of the above options is
  confirmed in the log by the following message: "Creating striped Ticker/Stream/History".
* Striped collectors are covered by a subset of unit tests via a special "StripedTest"
  suit of tests that reconfigures a set of test to work with striped implementation.
  Testing of a sample "HashTicker" implementation is also refactored in the same way,
  via "HashTest" suit of tests.
* BUG FIX: ApplicationConnection.examine() is now regularly invoked by socket connectors.
* NIO server connector address format changed from "nio:<port>" to "nio::<port>".
  "nio:<port>" address is now considered ambiguous and must be replaced either by
  "nio::<port>" or by "socket:nio:<port>" depending on user's intention.
* Per-transport-connection variables introduced as a replacement for some configuration parameters.
* Per-transport-connection variables are available in MessageAdapter and RMIExecutionTask via
  new getConnectionVariables() method in these classes.
* TransportConnection.REMOTE_HOST_ADDRESS_KEY per-transport-connection variable keeps an address of
  the remote host for all types of connections (including QDServlet) for audit purposes.
* BUG FIX: concurrent configuration modification bug fixed in SocketHandler.
* BUG FIX: Help tool now works properly without the scheme.
* QDAgent.setDataListener and QDDistributor subscription provider's setSubscriptionListener methods
  do nothing when the same listener is set again. Old behavior was to issue notification again.
* QDDistributor.hasAdded/RemovedSubscription provider methods are introduced to aid in implementation of
  the code (e.g. DistributorAdapter) that uses the feature of lazy-initialization of subscription providers.
* QDFactory.getVersion has nicer string "QDS UNKNOWN" when running under IDE.
* com.devexperts.qd.sample.TestThroughput now generates more even data stream in terms of bytes it occupies on
  the wire (for network-testing) and produces data that can be used to test History without OutOfMemory errors.
  (new options: -timemask, -ivalmask, -ovalmask to mask generated values)
* TestThroughput can now closer mimic behavior of chartserver with -symbatch option that causes it to
  produce data in batches with each batch containing date just for one record.
* TestThroughput better documents its usage on command line.
* TestThroughput has new options to imitate splitting of data between multiple data providers and/or splitting
  subscription between multiple data receivers:
 -distsplit  splits symbols between distributors, so that each symbol is distributed by the
             specified number of distributors; zero means that all symbols are distributed by
             all distributors (same as setting it to the value of "dists"), default is 0
 -subsplit   splits symbols between agents, so that each symbol is subscribed to by the
             specified number of agents; zero means that all symbols are subscribed to by
             all agents (same as setting it to the value of "agents"), default is 0
  So, "-distsplit 1" causes all symbols to be evenly split between all distributors;
      "-subsplit 1" causes all symbols to be evently split between all agents.
* TestThroughputReportExplorer class is introduced (in qds-sample.jar) to analyze "throughput.report"
  file that is produced by TestThroughput. It is a GUI tool that parses report, provides UI to apply
  filters to select just the subset of tests, and produces WIKI or CSV formatted files based on user-specified
  filter for further analysis and charting in Confluence or in Excel.

QDS 3.68:

* USABILITY: Local and global locks are made non-reentrant. Invalid reentry into QD from
  inside of DataVisitor or SubscriptionVisitor is detected early and IllegalStateException
  is thrown. Potential deadlock-prone attempts to modify subscription from inside of DataVisitor
  (where global lock is acquired from inside of local lock) are also detected.
* REFACTORING: All QD Core implementation methods that acquire "local lock" now
  immediately call method named xxxLLocked as soon as local lock is acquired.
  For example, retrieveData calls retrieveDataLLocked under local lock.
  Thus, stack trace of each thread that holds local lock will contain a method
  which name ends with "LLocked". If such method is also called under global lock, then its
  name ends with "GLLocked". Since global lock cannot be acquired under local lock there is
  no such thing as "LGLocked".
* USABILITY: If global or local lock takes too long to acquire then warning is written to the log.
  Wait interval is 10s by default. It can be changed via JMX console or system properties.
  Any time period can be specified (like "1m4.5s") with "seconds" being a default unit.
    * com.devexperts.qd.impl.matrix.Collector.LockWaitLogInterval (10s default)
    * com.devexperts.qd.impl.matrix.XXX.LockWaitLogInterval
        ... for specific collector (takes precedence over generic configuration)
            where XXX is Ticker, Stream, or History
* Buffer overflow strategy log time can now be configure in any units (time period string is specified)
  and the corresponding property has no "Sec" ending anymore. Any time period can be specified
  (like "1m4.5s") with "seconds" being a default unit.
    * com.devexperts.qd.impl.matrix.Collector.BufferOverflowLogInterval (10s default)
        ... to control how often overflow events are logged
    * com.devexperts.qd.impl.matrix.Stream.BufferOverflowLogInterval
      com.devexperts.qd.impl.matrix.History.BufferOverflowLogInterval
        ... for specific collector (takes precedence over generic configuration)

QDS 3.67:

* BUG FIX: Memory leak fixed in MessageAdapterConnection.
* Read aggregation limit added in all socket connectors (32kb).
* ChunkedInput API improved: it now supports mark(int) and does recycle
  all processed data by default if not marked.
* PERFORMANCE: QDDistributor.getAddedSubscriptionProvider and getRemovedSubscriptionProvider
  now lazily initialize the corresponding data structures. The initialization is performed
  on the first invocation of the corresponding method. So, if you don't need
  added and/or removed subscription information then you should not call the
  corresponding method at all. There is no need to install listener and retrieve
  the subscription to SubscriptionBuffer.VOID anymore.
* REFACTORING: All QD Core implementation methods that acquire "global lock" now
  immediately call method named xxxGLocked as soon as global lock is acquired.
  For example, addSubscription calls addSubscriptionGLocked under global lock.
  Thus, stack trace of each thread that holds global lock will contain a method
  which name ends with "GLocked".

QDS 3.66:

* BUG FIX: qds.jar now includes com.devexperts.connectors.proto and
  com.devexperts.connectors.codec that are now needed for correct functioning of QD connectors.
* PERFORMANCE: History could send the same record twice when the data is buffered
  in outgoing buffer and the new subscription request is received. Even though this
  data should get filtered out on the next hop it nonetheless needlessly consumed extra
  buffer space. This behaviour is fixed and comprehensive unit test to reproduce the
  problem is created.
* Time distribution in QD JMX console is updated:
  - average lock/wait times are rounded to milliseconds.
  - distribution for 1 to 5 seconds lock/wait times is collected.

QDS 3.65:

* BUG FIX: Data was not copied properly when subscription was reduced and buffer
  was compacted, filtering out data from the buffer. It lead to data corruption.
  This problem affected both Stream and History.
  (comprehensive unit test to reproduce the problem is created)
* RecordCursor.writeCurrent and writeNext methods are introduced.
  (they are now used in some unit-tests)
* QDAgent javadoc is updated to reflect new 1M default for setBufferOverflowStrategy
* All memory tracking is removed from QDStats (garbage and allocated bytes, references, and ints).
  It was never fully implemented and is not used anywhere. Now only record-related stats and IO
  stats are gathered (number of subscribed records, data records, stored records, number of
  bytes sent and received by different connectors).
* JMXStats representation of data array attributes is changed. For example, when "RecordsSize" contains
  the total number of records in an object, "RecordSizeArray*" contains an array with record-by-record
  breakdown of this information.
* JMXStats is now aware of the data scheme and annotates top 5 values for each record counter. For example,
  when "RecordsSize" contains the total number of records in an object, "RecordSizeTop*" contains
  a string description of records with top 5 sizes.
* QDStats.createNamedVoid is introduced, so that agents can be given a name which will be shown in buffer
  overflow messages that are related to them.
* com.devexperts.qd.stats.QDStatsContainer is introduced (has a single getStats methods).
* QDErrorHandler now annotates error messages with getStats().getKeyProperties() of the corresponding object
  (if the object is QDStatsContainer). So, now a failure to process subscription or data will be logged
  with the information about the corresponding distributor or agent (its IP address, for example, if it
  is related to network connection).
* Object names for JMX stats now include collector name (Ticker, Stream, History, or Any) as a prefix.

QDS 3.64:

* BUG FIX: Parsing address bug with 'tls+' and 'filter@' fixed (unit test created).
* BUG FIX: NullPointerException in History is fixed
  (comprehensive unit test to reproduce the problem is created).
* Filtering of data when subscription is changing is optimized.
  Internal queue structures are rebuild only when some records were indeed removed
  from the buffer and the rebuild operation itself is faster.

QDS 3.63:

* BufferedInput and BufferedOutput refactored for simpler extensibility
  (extension API changed).
* BufferedOutput methods that write compact numbers and UTF chars now request
  exact amount of space needed.
* RMIEndpoint changed in order to support external message adapters for non-RMI
  messages (temporary solution).
* EXPERIMENTAL: Chunks API for I/O added with the following entities:
  - Chunk - reusable piece of data, wrapper over fixed-size byte array
  - ChunkList - reusable chunk list
  - ChunkPool - pool for Chunks and ChunkLists
  - ChunkedInput and ChunkedOutput - BufferedInput and BufferedOutput
    implementations over chunks
* EXPERIMENTAL: Application and transport protocol layers were separated
  in connectors framework:
  - ApplicationConnection abstract base class was introduced for implementing
    various user application protocols (to be used with existing MessageConnectors)
  - Special codec layer between transport connectors and application protocols
    defined with sample codecs provided (Xor, ZLib, SSL).
    *** WARNING ***: SSL codec implementation uses javax.net.SSLEngine which has a concurrency
    bug that may cause a dead-lock in jre 1.5 and former.
* NIO connector rewritten, throughput increased greatly.

QDS 3.62:

* QDAgent.setStreamOverflowStrategy is deprecated.
  QDAgent.setBufferOverflowStrategy is introduced instead.
* BUG FIX: Implementation of isSubscribed on QDAgent and QDCollector implementations
  are fixed (they could have returned true on stale subscriptions -- that were subscribed
  recently, but not anymore).
* New methods in RecordBuffer are introduced:
  compact -- to move data to the beginning of buffer
  appendAndCompactIfNeeded -- combined append and compact on demand (to prevent buffer growth)
  retrieveDataAndCount -- to retrieve data and count retrieved records, with optional cleanup
  cleanup -- to cleanup the data from the buffer record-by-record
* RecordCursor.getPosition is introduced to conveniently retrieve position for cursors which
  were acquired from RecordBuffer.
* Stream and History implementations now use RecordBuffer instead of DataBuffer to keep internal
  queue of records that should be delivered to the agent.
* Stream and History implementations now remove queued records from their internal buffer when
  agents unsubscribe from them.
* DataBuffer is deprecated. It is not used in QD core anymore. Use RecordBuffer instead.
* Default maximal buffer size for Stream is increased to 1000000 (1M records).
* History now limits the size of its buffer outgoing buffer similar to Stream.
  The buffer overflow strategy is configured programmatically via QDAgent.setBufferOverflowStrategy.
  The following system properties control default behavior:
    * com.devexperts.qd.impl.matrix.Agent.MaxBufferSize
        ... deprecated property, use the next one instead
    * com.devexperts.qd.impl.matrix.Collector.AgentBufferSizeDefault (1000000 default)
        ... to control max buffer size for all collectors or
    * com.devexperts.qd.impl.matrix.Stream.AgentBufferSizeDefault
      com.devexperts.qd.impl.matrix.History.AgentBufferSizeDefault
        ... for specific collector (takes precedence over generic configuration)
    * com.devexperts.qd.impl.matrix.Collector.BufferOverflowLogIntervalSecs (10 default)
        ... to control how often overflow events are logged
    * com.devexperts.qd.impl.matrix.Stream.BufferOverflowLogIntervalSecs
      com.devexperts.qd.impl.matrix.History.BufferOverflowLogIntervalSecs
        ... for specific collector (takes precedence over generic configuration)
* Total size of outgoing buffers (both for stream and history) is now logged by tools ("Buffer: xxx")
  and is published to MARS in "buffer" node.
* JMX HTML adapter can be bound to specified IP address.
  This feature works only if JMX HTML adapter is configured via system properties and requires use of 2 properties:
    -Djmx.html.port=<port>        - port number, creates new adapter if specified (same as before)
    -Djmx.html.bind=<bindAddress> - bind address, can be omitted (no binding in this case)
* MARS server-side connector (server socket) can be bound to specified IP address.
  The bind address shall be specified after server port number, separated with colon.
  Independent connectors can have different bind addresses or remain unbound. Example:
    -Dmars.address=:10042/:11042:privateIP/:12042:publicIP
* OCC FIXML parser will generate proper OSI symbol after official OSI conversion occurs
  (conversion event is detected based on content of OCC FIXML file).
  Use of OSI symbology can be turned on (forced) at any time with "--osi" command-line option.
* IPF transform "osi" added. It converts option symbol from OPRA symbology to OSI symbology.
  This transform does nothing for non-options, for futures options, and for options with OSI symbol.
  Example:
    osi();                           // Converts all options.
    if (UNDERLYING == 'IBM') osi();  // Converts only IBM options.
* SymbolObjectMap: add methods that work with char array instead of String object.
* Short non-encodable symbols (up to 64 characters) are read in a garbage-free way.

QDS 3.61:

* BUG FIX: "connect --tape" bug with infinite resulting file expansion was fixed.
* Minor memory leak fixed.
* Connect tool: "saveas" parameter in "--tape" option is explained in "Help tape" article.
* LockFreePool class added.
* CPU monitor performs retries to get readings more synchronously to protect from bad prints.
* StringCache extracted from CSVReader into separate class.
* URLInputStream class added, QDS tool "Instruments" uses it to download files from any URL.
* Compression API added and used transparently by object serialization API.
  Currently compression is disabled by default, can be turned on with system property:
  -Dcom.devexperts.io.compressionEnabled=true

QDS 3.60:

* BUG FIX: NullPointerException when stream buffer overflow happens.
  Error occurs only on overflow events, but very rarely (not on each event).
  In multiplexors error leads to disconnect of uplink connection.

QDS 3.59:

* Help tool can work without scheme again (but still works with scheme if it is specified
  via -Dscheme=... system property)
* New feature: subscription matrix dump via JMX console.
* History collector creates less lock contention.
* TDP better diagnose location of lock contention via new concurrent locks.
* Connector call locality: ClientSocketConnector tries to establish connection to local host first if
  domain name contains one of the local address of the host.

QDS 3.58:

* JVMSelfMonitoring refactored to clean old mess, add GC reporting, and expose management interface.
* MARSScheduler upgraded to provide more convenient API.
* Time synchronization tracker generates well-formed UUID now.
* CPU usage monitor shall ignore abnormal jumps of process CPU time.
* Error messages about stream buffer overflow are printed once per 10 seconds per agent.
* Help tool now requires scheme to use (which is typically set in "qds" tool) and loads
  information on additional services (like project-specific filters) from scheme's
  class-loader.

QDS 3.57:

* Specific service implementations may now be disabled by setting
  "<implementation-class-name>.disable" JVM property.
* Decimal class now support extra precision values with divisors of 10^7, 10^8 and 128.
  All methods of the Decimal class support extra precision and use it only when number
  cannot be exactly represented with standard precision.
* Decimal.composeDecimal(long mantissa, int precision) is introduced as a faster way to
  compose decimal number when its integer mantissa and precision are known.
* Decimal.getDecimalMantissa and Decimal.getDecimalPrecision can be used to split
  decimal number into its decimal mantissa and precision (composeDecimal does reverse).
* Temporary workaround for non-working -Dcom.devexperts.qd.logger option when default
  java.util.logging package is used for logging (JRE's default minimum log level is
  set to INFO).
* Post tool creates ticker in "store everything" mode by default, so that data posted
  before subscription was received does not get lost. -c|--collector option for all
  tools now has additional 'ticker-se' and 'all-se' choice for "store everything" mode.

QDS 3.56:

* MathUtil class is introduced with roundDecimal utility method to round results of
  decimal computations in double variables.
* PriceIncrements uses roundDecimal to produce precise decimal results.
* License boilterplate is added to the top of all files. Use etc/boilerplate for all new files.
* BufferedInput and BufferedOutput better handle extremely large buffers and block lengths (around Integer.MAX_VALUE).

QDS 3.55:

* BugFix: NullPointerException during large object deserialization.

QDS 3.54:

* Magic signature added for serialized stream with declared types.
* RMI: Security-related classes are moved com.devexperts.rmi.security.
  Old classes are deprecated, but are still functional.
* RMI: SecurityContext.setSubject intended usage is explained in JavaDocs and
  this method logs warning on improper use.
* Performance and internal invariants of RecordBuffer improved.
* Bugs fixed in RecordCursor and RecordBuffer, range checks made more strict.
* DataIntField declares two new methods for convenience: toDouble(int) and toInt(double).
  The additional goal is to later eliminate ThinkorswimIntField interface.
* Data parsing performance improved - fast parsing path is added.
  Warning: RecordReader.readRecord (and DataRecord.readRecord) method signature changed in non-compatible way.
* PentaCodec specification changed to reduce maximum penta length to 35 bits, free up serial bit prefixes, and support UTF String encoding.
  All changes are compatible with actual usages of PentaCodec as no one have used it to full 60-bit capacity.
  Freed serial bit prefixes are reserved for future extensions.
* Messages with type "COMMENT" and "SPECIAL" are silently ignored by ByteArrayParser.
  This is done for better compatibility during future rollout of extensible protocol.
* DESCRIBE_RECORDS messages use UTF String serial type for record names and field names.
  Schemes that use non-ASCII characters in names won't be serial compatible with previous versions of QDS.
* Support of UTF String serial type is added. The default serial type is still UTF char array.
  In the future default serial type will be switched to UTF String with little effect to end users.
* QDS tool "post" now accept input in native encoding by using default encoding.
  In order to specify correct default encoding run JVM with option "-Dfile.encoding=<encoding>".
* Fixed bugs in TextCoding: incorrect escaping during encoding and incorrect unescaping during decoding.
* CompactInt, CompactChar and ObjectUtil in "io" package removed, those in "qd.util" package
  now delegate directly to IOUtil class and are deprecated. Related JavaDoc and code cleaned.

QDS 3.53:

* MarshalledObj renamed to Marshalled.
* SocketReader makes up to 4 times fewer I/O calls and up to 2 times fewer QTP API calls.
* CompactChar, CompactInt, ObjectUtil, MarshalledObj are moved to com.devexperts.io package.
  They are deprecated in com.devexperts.qd.util.
* Classes for efficient input/output streams are moved to com.devexperts.io package.
* RMI: Introduced setSecurityController on RMIEndpoint.
* RMI: Public SecurityContext is provided as a recommended default security controller.
  Please love and use this class.
* ConnectorsMonitoringTask is now truly thread-safe (synchronized), so that its single
  instance can be safely used in a big application where connections are initialized
  from multiple threads.

QDS 3.52:

* RMI: New "invoke" tool that can be used to invoke simple services for test purposes.
  It can only invoke services that do not require authentication (available to "guest").
* RMI: Make sure that RMIEndpoint.getProxy always returns singleton proxy object for
  each service.
* RMI: Some corner cases in request state-machine are fixed.
* BUG FIX: RMI: Timeout MonitoringThread hangs in infinite loop on request timeout.
* Removed outdated libraries (those API is now part of Java API).
* IPF transform "fixopol" added. It reads external CSV file with official list of symbols
  (NASDAQ and OTC formats are supported) and updates OPOL and EXCHANGES fields accordingly.
  Syntax:
    fixopol("listing-file-URL", "correct-OPOL-expression");
  Example:
    fixopol("http://www.nasdaqtrader.com/dynamic/SymDir/nasdaqlisted.txt", "XNAS");
    fixopol("http://www.otcbb.com/dynamic/tradingdata/download/allotcbb.txt", "XOTC");
    fixopol("http://www.otcbb.com/dynamic/tradingdata/download/otherotc.txt", "OOTC");
  Note: the transform supports HTTP URLs and local files (e.g. simply "otherotc.txt").
* CMEParser fills all possible fields for constructed products.
* Help tool prints tool summary if no specific help article is found.
* TDP (ThreadDumpParser) tool added.
* MessageConnectors: Experimental support of configuration files. Configuration file
  suffix must be ".config" and file property to read shall be specified via URL "part",
  for example: "multiplexor.config#agent" will read "agent" key from "multiplexor.config"
  properties file and will configure using the value of this key. Additional properties
  can be specified via dot-notation in properties file. For example if "agent.bindAddr"
  is set, then "bindAddr" property will be assigned for all connectors created with
  the value of "agent" string.
* BUG FIX: MessageConnectors class does not treat addresses starting with '/' as a
  legacy '/' separated list. The address like this '/*&feed@multiplexor.lo' is now
  correctly parsed.
* QDConfig.setDefaultProperties is introduced to set defaults via system properties.
* All message connectors now load system properties "com.devexperts.qd.qtp.MessageConnector.<prop>"
  as their defaults, as well as properties for their actual class name.
* NioServerConnector supports bindAddr property.
* ServerSocketConnector supports bindAddr property.
* ByteArrayDataOutput provides direct methods to write compact char and int values.
  Standard kit fields and DefaultRecord now use these methods for faster serialization.
* Experimental: DataRecord.writeFields is introduced as a hook for high-performance
  serialization of data. "ng.RecordSink" interface is introduced as a fast replacement of
  RecordVisitor interface (without per-field interface calls). Micro-tests (see TestWriteSpeed)
  show up to 40% potential improvement in a number of records serialized per second.
  RecordBuffer implements RecordSink, Ticker supports data retrieval into RecordSink
  (should speedup applications that retrieve ticker data into RecordBuffer).
* com.devexperts.qd.sample.TestThroughput has faster record generator, customizable
  scheme (number of integer and object fields can be specified), so there is less
  overhead for framework itself, differences in core speed are more relevant.
  Some usability improvements are included, too.
* RecordBuffer now implements SubscriptionIterator and SubscriptionVisitor,
  so it can be used in place of SubscriptionBuffer.
* "+" syntax for tools can be used to run multiple tools of the same kind simultaneously
  like "multiplexor ... + multiplexor ..." and multiple "+"ed tools are run in the same
  order as they are specified in the command line.
* "Connect" and "Compare" tools use the same ConnectorsMonitoringTask as "Multiplexor"
  and other tools. One total line is printed when multiple tools are run in the same JVM
  using "+" syntax.
* Fixed bug with negative connectors stats due to int overflow.
* Connectors monitoring reports CPU usage.
* com.devexperts.mars.jvm.CpuUsage class is introduced.
* OverrideURLClassLoader is introduced. User-specified jar file with scheme takes precedence over
  scheme in the class-path (in the current/parent class loader).
* FileWriter default time format is changed to TEXT (human-readable ISO time).
* FileWriter is now Java Bean that is configured via QDConfig class by the same code which
  is used by MessageConnectors (QDConfig.setProperties). "SaveAs" option is introduced --
  it forces messages type for all data/subscription that is being written. For example,
  "qds connect ... --tape file.data[saveas=raw_data]" will force all data to be written
  with RAW_DATA messages to a file.
* QDS tool "dump" can read and use ticker subscription from file.
* FileReader does not "eat" OutOfMemoryError which can be caused by very large subscription.
* FileReader reports read bytes and IO calls into QDStats.
* QDContract enum is introduced, QDCollector.getContract method.
* New management interface CollectorMXBean is introduced to monitor and tweak
  implementation-specific parameters for ticker, stream, and history.
* Performance: GlobalLock is now implemented via AbstractQueuedSynchronizer and gives
  some priority to processData over all other tasks that require global lock (e.g.
  everybody acquire global lock in a fair way, while processData takes unfair advantage).
  GlobalLock also collects performance counters to identify its bottlenecks.
* Performance: Fast pooling of per-record RecordCursor instances for distribution and retrieval
  of records to/from Ticker using "ng" APIs (RecordSource/RecordSink).
* Performance: Agent.addSubscription, removeSubscription, and close() make multiple passes
  releasing all locks between passes. Lock starvation for distribution purposes is less
  likely to occur when big subscriber closes.
* Performance: Data distribution tries to acquire available agent locks non-blocking
  before reverting to blocking lock acquisition.
* Performance: Ticker storage does not keep a separate array of payload bits, so memory
  locality in ticker access is improved.
* Performance: Up to six (four by default) list iterations over ticker subscription are
  interleaved with each other to work-around memory latency. Utilization of memory bus
  becomes better with up to 25% improvement in a number of distributed records.
* Performance: "distribution lock" is removed from all collectors' implementations
  (ticker, stream, history), so incoming data processing is now more concurrent and is
  not limited by just one effective thread anymore. There are still "global lock" and
  "agent locks" taken one-by-one which might limit concurrency.
* "Stream buffer overflow" log message now includes the description of agent key properties
  (whenever available) where buffer had overflowed and last dropped symbol and record,
  so that a cause of overflow can be better tracked down.
* MarshalledObj and MarshalledObjField are introduced as an efficient way to work
  with serializable object fields and to prevent their [slow] deserialization in
  multiplexor nodes. PlainObjField class is deprecated.
* ByteArrayField supports hook methods for convenient custom conversion of arbitrary
  objects to/from array of bytes.
* qtp: ByteArrayParser combines back-to-back messages of the same type into a single
  "processXXX" call, thus saving CPU cycles in case when a lot of small messages are
  arriving to a consumer/multiplexor that is short of CPU cycles.
* Notification for regular thread-based connectors is rewritten. It is now lock-free.
  Should scale better with 1000+ threads. Other connectors (http, nio) should also
  see some improvement due to lock-free mask manipulation in MessageAdapter.
* RMI: Parameters on the server-side are deserialized with service implementation's classloader;
  if not successful then with thread context classloader; then fallback to default behavior.
* RMI: BUG FIX: Does not fail when default QDScheme is not defined (uses empty scheme inside).
* Composite filters support keywords that may replace special characters. Keywords must
  be separated with spaces or other special characters from the rest of the filter.
  Character:  !    &   ,     :      *
    Keyword: not  and  or  record  any
* Logging.configureLogFile method is introduced for programmatic configuration
* --log option for QDS tools now  works correctly again after being broken in 3.51
  (even though this option is deprecated).
* ConnectorsMonitoringTask.addConnector method is introduced, so that extra connectors
  can be added to a single monitoring task that prints statistics to log file.
* Tools: All JMX MBeans now use standard MBean naming conventions -- domain names start with
  "com.devexperts.qd" to avoid conflicts with other MBeans. Note, that all connector MBeans
  now reside in "com.devexperts.qd.qtp" domain.

QDS 3.51:

* qd-core: QDTicker.remove method to remove data from ticker.
* qd-core: ng.RecordFilter interface and RecordBuffer.visitor methods provide ability
  to add only matching record to the RecordBuffer.
* IPF transform "cmeproduct" now uses MMY field to update futures description.
  It falls back to expiration date if MMY field is empty or longer than expected.
* RMI framework introduced (com.devexperts.rmi).
* qd-tools: -l|--log options is deprecated for all tools (use -Dlog.file instead)
* qd-tools: JVM system options can be specified with -D<key>=<value>
* qd-core: DataIterator is undeprecated (since you cannot avoid now anyway)
* qd-core: QDLog.log static final constant is introduced as a recommended way to log
  all QD-related messages (unless class needs to use its own logging).
* qd-core: INCOMPATIBLE CHANGE: MessageConsumerAdapter class is moved to qtp-core
  (com.devexperts.qd.qtp package) to avoid cyclic dependencies between modules.
* qd-core: SubscriptionFilterFactory interface is moved to com.devexperts.qd package,
  old interface (from com.devexperts.qd.qtp) is deprecated and for now extends new one.
* qd-core: SpecificFilter annotation is moved to com.devexperts.qd along with SubscriptionFilter
  and renamed to SpecificSubscriptionFilter for clarity.
* QDServices class is deprecated and changed to extend com.devexperts.services.Services.
* devexperts-services: Added com.devexperts.services.Services, StartupService with all
  the utility methods for service-loading.
* devexperts-services: SupersedesService annotation type is introduced to facilitate migration
  of service interfaces (moving to difference package, etc)
* devexperts-logging: Added com.devexperts.logging.Logging and all the support classes
  along with their tests.
* devexperts-util: Added IndexedSet, IndexedMap, Indexer, NumberKeyIndexer, IdentityIndexer,
  AbstractConcurrentSet into com.devexperts.util package along with their tests.
* STREAM, TICKER, and HISTORY data and subscription are now processed round-robin
  by all message adapters. There is no longer any strict prioritization between them.
  If everything is available at the same time, then network bandwidth will be equally
  distributed among them.
* AgentAdapter and DistributorAdapter methods createXXXFilter
  (for Ticker, Stream, History) are removed. Fine-grained control over filtering is
  now available via createAgent and createDistributor methods respectively.
* AgentAdapter now creates the corresponding ticker, stream, or history agents only on
  the arrival of the corresponding subscription.
* MessageConsumerAdapter.processData and processSubscription methods are introduced to enable
  handling of ticker, stream, history in a single method. Sample and tools are updated
  whenever appropriate to override single method where they were forced to override
  3 individual processXXX methods
* AbstractMessageVisitor class with methods visitData and visitSubscription is introduced for
  a similar reason.
* Bug fix: NullPointerException in LoggedSubscriptionProvider and LoggedDataProvider.

QDS 3.50:

* Bug fix: OCC parser incorrectly processes corporate actions thus listing options with wrong data.
  Now processing uses option attributes to identify option as recommended by ENCORE DDS Guide.
  Also fixed inactivation date check to remove options on a proper date.
* Added LRU cache to CME MO.dat parser - smaller memory footprint.
* Transform compiler: improve expression type determination, enable more conversions from strings to numbers and booleans.
* Transform language: add relational operators "notin" (aka "!(in)") and "notlike" (aka "!(like)");
  add statements "return;" (terminates entire transform execution) and "break;" (terminates "switch" statement execution).
* QDS tool "Instruments" supports several inputs, several transforms, can download transform from URL,
  and can merge duplicate instruments using symbol as unique identifier.

QDS 3.49:

* Bug with determination of option product in CMEParser fixed.

QDS 3.48:

* tools.filteredStream package renamed to tools.fs to match java naming
  conventions.
* Reading and writing of CSV streams added.
* Instrument Profile Format basic API added.
* Instrument Profile Format reader and writer support compressed formats.
* OCC FIXML and CME MO.dat parsers added.
* Instrument Profile Transform package added.
* Instrument Profile Service supports in-place transform and works via HTTP protocol.
* QDS tool "Instruments" added to process Instrument Profile Format files.

QDS 3.47:

* Comparing functionality was moved from Connect tool into separate
  Compare tool.
* Compare tool provides comparison information via MARS system (besides
  logging it to a screen).

QDS 3.46:

* Starting several tools in a batch inside one JVM opportunity introduced:
  one can pass multiple tools initialization strings separated by '+' sign
  when running qds-tools.jar (see "help batch" for details).
* --tape option of connect tool now supports two additional parameters:
  "storagesize" and "storagetime" which are used to drop out-of-date taped
  files. (see "help tape" for details).
* FilteredStream collector introduced. It filters incoming stream data by
  specified time interval (i.e. it doesn't give out same pair of (record, symbol)
  more often, than once per specified interval). It can be used in various tools
  by setting --collector option to value "filtered-stream(<time-interval>)".
* Several collectors can be defined using --collector option. Their names
  should be separated by a comma, and at most one collector of specific type
  can be created.
* Help tool introduced. It can show detailed help on different topics including
  all QDS tools, MessageConnectors, subscription filters and some other common
  things. Help articles are stored in file qdshelp.txt which is available in
  META-INF folder of qds-tools.jar.
* Special annotations added in order to be able to generate some help pieces
  automatically: ToolSummary, MessageConnectorSummary and SpecificFilter.
* QDS Tools framework was refactored. Base class AbstractTool was extracted.
  Exception handling was improved.
* Connect tool now accepts "all" as a wildcard symbol (as well as "*").
  It's made due to difficulties in passing * as an argument when starting
  tools from console under different systems.
* BUG FIX: Multiplexor and Feed tools fixed to work with different collectors.
* BUG FIX: TextCoding fixed to encode/decode null values correctly (instead
  of throwing NullPointerException). They are represented as "\NULL".
* BUG FIX: LineTokenizer in com.devexperts.qd.qtp.text fixed to work correctly
  with different line-end character sequences.

QDS 3.45:

* BUG FIX: Tools fixed to work again.

QDS 3.44:

* QDServices are more robust now. They now correctly load services under buggy
  WebLogic classloaders.
* NetTest tool is introduced. It can be used to test performance
  of different network connectors in different conditions.
  It is quite similar to TestThroughput tool from qd.sample, but
  it provides larger functionality in network testing and is integrated
  into Tools framework.
  The NetTest tool can be run in one of two modes: producer-side and
  consumer-side. In each mode it creates one or several collectors and
  connects them to specified address via MessageConnector.
  When using NetTest as producer-side special generator thread is created
  for every collector and it feeds the collector with randomly-generated
  records (and collector then gives them outside via connector).
  When using as consumer-side each collector receives records from connector.
  In both cases the number of generated/received records is counted
  and throughput in records per second is logged to a console.
  See NetTest help for more details and special options.

QDS 3.43:

* "aggregation" property for client and server socket connectors. You
  can specify connection address as :1234[aggregation=0.2s] and data
  will be sent on this socket at most 5 times per second (every 200ms).
* "MonitoringScheduler" thread is daemon, so its existence does not
  prevent JVM shutdown (useful in QD tools).
* Log all errors that happen in periodic QD tasks (--stat tasks).
* TimeFormat.formatDateTimeWithMillisWithoutTimeZone
* Additional options for connect tool:
  -O|--other-collector <s> to compare different collectors
  (e.g. ticker vs stream or history)
  -R|--other-record <rec> to compare different records
  (e.g. incoming feed data vs resulting charting data).
* Connect tool in "compare" mode (turned on by an of the following
  options: -C|--compare, -O|--other-collector, -R|--other-record)
  time-stamps, filters, and annotates data that is printed to console
  (unless -q|--quiet option is set) for easy visual confirmation of
  time and/or data difference.

QDS 3.42:

* TimeFormat supported DateTime parsing format improved (see
  TimeFormat.parseDateTime() javadoc). In particular, now it can
  parse DateTime as a single long value in milliseconds.
* "--tape" option of "connect" tool now have parameter "time" in order
  to manage creation of ".time" files. It's value can be one of "none",
  "long" or "text". If the value is "none" then no ".time" files are
  created. Otherwise they are always created (not depending on the
  extension of a data file). If the value is "long" then timestamps
  in ".time" files are written as numbers of milliseconds (classic way).
  If the value is "text" then timestamps are written in text form using
  TimeFormat.
  If "time" parameter is not defined it is considered to have value "long"
  if the file have ".data" extension and "none" otherwise.
* When reading from a file "connect" tool always tries to read ".time"
  files (not depending on the extension of a data file). It can parse
  timestamps in both "text" and "long" format. FileConnector have
  boolean parameter "ignoretime". If it is set to "true" then ".time"
  files are ignored even if they exist.
* Added scalable server socket connector
  (com.devexperts.qd.qtp.nio.NioServerConnector) based on java.nio
  library. It uses one thread that accepts client connections and
  fixed size threadpool to process reading and writing to/from sockets
  (unlike classic ServerSocketConnector which creates individual
  SocketReader and SocketWriter threads for every client connection).
  Nio server connector can be created by any tool by specifying
  connection address as "nio+:<port>".
  Package com.devexperts.qd.qtp.nio is available in qds-tools.jar.
* RecordBuffer.clear() also clears all int fields values, so now you
  do not need to call RecordCursor.clearFields after adding new records
  if you plan to fill in only some fields.
* BUG FIX: NullPointerException in RecordCursor.copyFrom(RecordCursor)

QDS 3.41:

* Added functionality to parse and compose messages data in
  text format (com.devexperts.qd.qtp.text package).
  Tools "connect", "dump", and "post" now use it to write and
  read data to/from console.
* Post tool logic was improved and now it can switch between posting
  only ticker, stream or history data, or all types of data at once
  (RAW_DATA mode which is default). It can also post
  record descriptions. But now it DOESN'T recognize '-' symbol
  as default field value.
* Connect tool --tape option can now tape data in text format.
  It supports parameter "format" which can be "text" or
  "binary" (binary by defaul). FileReader also supports text
  format and can automatically determine file format and read
  both text and binary files correctly without any additional
  control.
* FileConnector (handler for "file:xxx" addresses) supports explicit
  specification of file format via "format" property.
* FileConnector and tape support "BLOB" data format that is used for
  compact store of a single-record, single-symbol data stream. So
  supported formats are: "binary", "text", "blob:<record>:<symbol>".
* Connectors are now pluggable via MessageConnectorFactory interface.
  FileConnector implementation (with support for binary, blob and
  text) is now available only in qds-tool.jar.
* "file:" specification is now optional for reading from files. If
  address does not contain ':' character, then it is assumed to be a
  file.
* Addition properties to connectors and to --tape option in "connect"
  tool can be now enclosed in [...] as well as in (...), so that they
  can be used without additional escaping in UNIX shell. Multiple
  properties can be separated with comma. For example:
    qds connect https://myhost.com/QDS[user=xx,password=xx]
    --tape myfile.qd[split=1m,format=text]
* Default QDLog implementation (for all tools) writes all log messages
  to stderr, so that stdout of "dump" and "connect" tools can be
  directly sent to a text file to get plain data in a text format.
* MessageConstants interface is deprecated, is not implemented in most
  classes anymore. MessageType enum is introduced as a replacement.
* BUG FIX: FileReader (file:xxx address) is fixed to correctly support
  reading of split files (with '~' in their name) from non-current
  directory.
* QDConfig is introduced as a future place for all universal
  configuration utilities (parsing and setting key/value attributes for
  tools and connectors)
* INCOMPATIBLE CHANGE: Deprecated implementation of DataIterator
  interface by RecordCursor class is removed.
* RecordCursor's API is considerably updated:
  - Several old methods and constructors deprecated.
  - A set of static allocate() and allocateOwner() methods introduced.
  - Updated and expanded documentation.
* RecordBuffer.add(RecordCursor) is introduced for convenience.
* QDS delivery unit now includes qds-src.zip
* QDErrorHandler interface to handle all errors that happen during
  calls to data/subscription listeners with default implementation that
  logs the corresponding error.
* TimeSyncTracker writes current time delta (in seconds) to MARS node
  "timesync.delta".

QDS 3.40:

* Connect tool with --tape option can write files automatically
  spitted at a specified time interval into multiple files. When
  writing into .data file, parameter "split" can be used and a
  special marker "~" in a file name in order to tape data into
  multiple timestamped files with defined splitting interval. For
  example "--tape log_~.data(split=1m)" will tape data into files like
  log_20071114-154300+0300.data, log_20071114-154400+0300.data etc.,
  creating new file every minute.
* File connector supports "~" marker and additional parameters
  "start" (to start reading from a specified date and time) and
  "delayed" (to start reading with a specified delay from the current
  moment). For example "file:log_~.data(delayed=20m)" will read taped
  data with 20 minutes delay in any QD Tool where connection address
  is specified.
* TimeFormat and TimePeriod classes are introduced to support ISO
  formatted time instances and time periods.
* All time periods in QD Tools option can be specified in ISO time
  period format. For example, multiplexor --write 1m to write
  multiplexor data to a file every minute. Number denotes seconds by
  default.
* Connect tool supports patterns to specify a list of records.
* QDServices.createService and DataScheme.getServices are generified.

QDS 3.39:

* QDS is build with 1.5.0_12 (source=1.5, target=1.5)
  Generics and stuff are now allowed in QDS sources.
* MARS common modules are integrated into qds-tools.jar,
  so you should remove mars.jar from your project when you
  universally use "qds-tools.jar" in your server-side modules.
* MARS auto-configures itself when it detects "mars.root" and
  "mars.address" properties. It also launches basic JVM self-
  monitoring task that reports vital JVM stats every 10 secs.
* NOTE: MARS common modules are now a part of QDS source-base
  and all the changes in MARS common will result in the new
  QDS version.

QDS 3.38:

* QDS is build with 1.5.0_12 (source=1.4, target=1.4)
* RecordBuffer.newSource methods are introduced.
* RecordSource is an abstract class instead of interface and it
  cannot be extended by the classes outside of "ng" package for
  performance reasons.
* Old QDTicker.getData is deprecated and new one is defined that takes
  RecordCursor.Owner instead, so that future implementations can avoid
  usage of deprecated RecordCursor.setAs method. It also makes sure, by
  its signature, that the caller has a proof that it "owns" the
  corresponding cursor.
* Loading of "logger" factory that is delivered inside qds-tools.jar
  is reimplemented so that it does not have to catch
  NoClassDefFoundError and thus is compatible with ProGuard.

QDS 3.37:

* Tools support "stream-nwc" and "all-nwc" values for --collector
  option, so that you can run stream without wildcards enabled. This
  way, for example, you can "filter out" wildcard subscription via
  multiplexor if you don't want to propagate it upstream.
* RecordCursor.Owner and RecordCursor.allocate introduced.
* RecordCursor.setAs and similar methods deprecated.
* RecordSource interface expanded to support more of RecordCursor's
  methods (getPosition, cursorAt) to allow to revisit records that
  were already processed.
* Stream performance is improved:
  - Intermediate buffer is not used at all when data input implements
  RecordSrouce, intermediate buffer is RecordBuffer otherwise.
* com.devexperts.qd.sample.TestThroughput supports new "-wildcard"
  option to test wildcard subscription with stream.

QDS 3.36:

* BUG FIX: History agent that thrown IllegalStateException when
  attempt to subscribe to non-historical record was encountered now
  closes normally. Thus, for example, and attempt to subscribe to
  non-historical record in multiplexor kills connection, but does not
  lead to corruption of internal data structure.
* BUG FIX: Tools cannot use singleton scheme (that has getInstance
  method) if scheme class name is explicitly specified on a command
  line.
* BUG FIX: Cyclic dependency in initialization of QDMonitoring and
  TimeSyncTracker classes is fixed.
* Ticker.setStoreEverythingFilter method is introduced so that ticker
  can be configured to store forever only records matching a specified
  filter.
* In "store everything" mode both Ticker and History distributors
  additionally check all incoming data against their subscription
  filter. If it does not create any performance problems in practice,
  this check might be always performed on all incoming data in the
  future to protect against potentially misbehaving data sources.
* Feed tool accepts filter for its file option to persistently store
  only records that match the filter.
  -f|--file [<filter>@]<name>  File and filter to read storage on startup
* Multiplexor tool supports two new options:
  -f|--file [<filter>@]<name>  File and filter to read storage on startup
  -w|--write <n>               Write storage to file every <n> seconds
  With -f option it turns into "store everything" mode with a
  specified filter and populates its storage from a file. With -w
  option it dumps storage to a file periodically.
* QDLogImpl is moved to "impl" package.
* "logger" package is not a part of "qds.jar" anymore. It is packaged
  into "qds-tools.jar". "qds.jar" size was reduced by ~20Kb.
  You can still get a verbose log of all QD operations with
  -Dcom.devexperts.qd.logger JVM option, but you have to make
  sure that "qds-tools.jar" is in your classpath.
* QDMonitoring recognizes the following system properties:
  jmx.html.port - to automatically configure HTML management console
  jmx.rmi.port - to automatically configure RMI management connector
  The corresponding command lines options in tools are now deprecated.
  Use new system properties instead.
* Samples use QDMonitoring.

QDS 3.35:

* RecordBuffer.getInstance() removes returned instance from the local
  thread pool, so that it can be used in combination with
  RecordBuffer.release() without the need to wrap it into try-finally.
* QDServices can get instances of singleton classes by calling their
  getInstance() method if it is defined on the corresponding class.

QDS 3.34:

* QDS tool "time" is more precise and supports request-response service.
* BUG FIX: ServerSocketConnector did not try to listen again when port
  was already bound. Bug was introduced in QDS 3.20. Unit test created
  to isolate this problem and better error-handling implemented
  in QTP worker threads to log unchecked exceptions that might have
  been happening unnoticed.
* PatternFilter.getInstance(...) methods deprecated.
* PatternFilter.valueOf() introduced.
* PatternFilter.getFactory() introduced.
* PatternFilter allows any reserved characters to be used inside
  [...] character class with exception of '[' ']' (braces),
  '^' (cap), and '-' (dash).
* PatternFilter supports fixed-size patterns (like "G[B-K]"),
  trailing '*' (star) is no longer required.
* Patterns with the first lower-case letter are reserved for
  application-specific extensions.
* Renamed PatternFilterSyntaxException to FilterSyntaxException.
* CompositeFilters class introduced with support for ',' (or),
  '&' (and), and '!' operations on filters.
* CompositeFilters are used by default in
  MessageAdapter.AbstractFactory
* RecordOnlyFilter is introduced as a special implementation of
  SubscriptionFilter that filters only based on record name.
* Concrete implementations of RecordOnlyFilter are optimized
  by CompositeFilters class for fast computation, even when
  used as a part of complex logic.
* PatternFilter supports ":" prefix to designate filters that
  are based on record name instead of symbol.
* DataScheme.getService is introduced as an extension point.
* QDFactory creates QDHistory with a default HistorySubscriptionFilter
  for a given scheme (via getService call) if none is specified.
* QDLogImpl constructors deprecated. Project-specific logging
  frameworks shall be used instead of a simple QDLogImpl class.
* com.devexperts.qd.monitoring package is introduced as a part of
  qds-tools.jar module. It contains a number of public utility classes
  for server-side monitoring and management of QD activities:
+ QDMonitoring is an utility with a set of convenience static methods
+ ConnectorsMonitoringTask reports I/O statistics for a given set
  of MessageConnectors.
* TimeSyncTracker is started in every JVM that uses QDMonitoring.

QDS 3.33:

* QDS tool "feed" has an option to delay incoming records by specified amount of time.
* Decimal.toString() made faster.
* Decimal.compose() made faster.

QDS 3.32:

* DataIterator interface deprecated with explanation that it should
  not be implemented in the new code, and its direct usage should be generally
  avoided (unless for legacy APIs).
* RecordBuffer.addAll methods (with and without filter) now accept
  only RecordSource. To add data from DataIterator processData methods
  (with and without filter) are introduced.
* RecordBuffer implements DataConsumer interface for better interop
  with legacy APIs.
* RecordCursor introduces methods copyFrom, updateFrom, and readFrom
  (renamed method readFields).
* ByteArrayField.equals is consistent in its implementation with other
  equals methods on object fields.
* SampleClient is updated to demo more features (esp. object fields in
  Ticker contract), so that more code is covered during sample run.
* DataRecord.update method is introduced. This method is used in
  Ticker implementation so that record-specific update algorithm can
  be implemented for each arriving record. Note, that update method
  works only when QDDistributor.processData is invoked with an object
  that implements ng.RecordSource interface.
* DefaultRecord implements update method with RecordCursor.updateFrom
  which yields the same behavior as in previous QD versions.
* Matrix Ticker implementation uses DataRecord.update to update its
  ticker storage, so that record-specific update logic can now be
  defined.
* QDS is now build with JDK 1.5.0_05 (source and target are still 1.4)

QDS 3.31:

* BUG FIX: Connect tool with --tape option hangs when attempting to
  write large amounts of data to tape. This bug was introduced in QDS
  3.28 with --tape option. DataBuffer.examiningProvider fixed: fixed
  name and behavior.
* BUG FIX: Error reporting for corrupted data message is throwing
  NullPointerException when corrupted packet contained more than 10
  successfully parsed records. This bug was introduced in QDS 3.22.
* Support new MESSAGE_RAW_DATA (5) in ByteArrayParser for potential
  future extensions. This message is never sent right now, but when
  received it is treated as ticker, stream, and history data altogether.
* ByteArrayField supports various "String" representations (String and
  char[]) in its writeObj and other methods for two-way compatibility
  between ByteArray and String fields.
* ByteArrayField.toString is changed to hexadecimal sequence.
* ByteArrayField.parseString is implemented to parse hexadecimal
  sequence if possible or just convert string to bytes if not.
* SerialFieldType introduces DECIMAL and SERIAL_OBJECT types and
  framework for representation conversion (nested interfaces
  IntConverter and ObjConverter). DECIMAL type is compatible with
  COMPACT_INT, while SERIAL_OBJECT is compatible with BYTE_ARRAY.
* DecimalField and PlainObjField use new types as their serial type to
  be distinguished from CompactInt and ByteArray on receiving side.
  Received data is converted on-the-fly from/to decimal or serialized
  object as needed, thus giving two-way compatibility between those
  field types via QTP protocol.

QDS 3.30:

* ByteArrayComposer has critical bug which aborts message composing
  and terminates ongoing QTP connection for certain message lengths.

QDS 3.29:

* DataIntField.parseString and DataObjField.parseString methods are
  introduced. Concrete and abstract implementations of those
  interfaces from kit package implement those methods in an
  appropriate way.
* Post tool is introduced to provide simple console interface to post
  arbitrary information into arbitrary QDS system.
  Usage: Post <scheme> [<options>] <address>
  Command line interface has the following commands:
  ?               - Print this help message
  ? *             - List all record names in data scheme
  ? <record> ...  - List fields for specified record(s)
  # <comment>     - Ignore this command
  .               - Quit
  <record> <symbol> [<fields>...] - Post specified record
                    Use '-' to specify default value for any field type
                    Omitted fields at the end are filled with default values

QDS 3.28:

* FileConnector now understands tape files. If file name ends with
  .data, then it tries to read .time text file with <time>:<ofs>
  lines, and times his read of data file to match recorded tape file.
  File connector can be used in various tools like dump, multiplexor,
  connect, etc by specifying file:<filename> as the connection
  address.
* Connect tool can write received data to a file with the new option:
  -t|--tape <file> Tape incoming data into the specified file, when
  name ends with .data, then .time file is also created.
* ng.RecordBuffer has a separate read and write cursors and introduces
  new methods: setLimit, cursorAt, removeAt.
* ng.RecordReader interface is introduced with the following
  implementations:
  - DataRecord (DefaultRecord provides implementation)
  - kit.RecordReaderAdapter
  - kit.RecordReaderSkipper
* Fields are now required to be named with the record name and dot
  as prefix. DefaultScheme checks this constraint during
  initialization.
* DataScheme methods writeRecordIdentity and readRecordIdentity are
  deprecated. Record identity is always represented as compact int
  in QTP protocol.
* DataField interface is introduced as a common super-interface for int
  and obj fields together with a common kit.AbstractDataField
  implementation.
* DataField includes getLocalName() method that return field name
  without its record and dot prefix (just a name inside the record).
* SerialFieldType interface is introduced to denote serialized type of
  fields in QTP protocol. DataField includes getSerialType() method
  that returns serial type of the field.
* All field implementations is kit package define writeInt, readInt,
  writeObj, readObj, and getSerialType methods as final, to guarantee
  their declared and intended serialization means match. In the
  future, field classes that do not extend any of the kit-provided
  classes might become prohibited.
* kit.StringField is more consistent in the way it handles various
  data types in its toString, writeObj, and equals methods.
* kit.ByteArrayField handles arbitrary objects in its toString,
  writeObj, and equals methods by serializing any non byte[] ones.
* kit.CharArrayField class is similar to StringField and has the same
  serialized form, but returns char[] in readObj instead, so it might
  be slightly more efficient in handling strings in multiplexor.
* DataBuffer.examiningProvider is introduced for convenience.
* ByteArrayParser and ByteArrayComposer have constructors with a second
  boolean argument. When true, it makes then compose and parse,
  respectively, DESCRIBE_RECORDS messages (message #2) and engage in
  record adaptation procedure -- parser will find matching records
  and adapt them to its own scheme via RecordReaderAdapter.
* ByteArrayParser and ByteArrayComposer also declare resetSession()
  method to clean their record describing state, so that their
  instances can be used for a new communication session.
* All standard connectors and tools compose and parse DESCRIBE_RECORDS
  messages as needed -- they all use new constructors for
  ByteArrayParser and ByteArrayComposer.
* CompactInt.getIntLength method is introduced to find out compact int
  serialized length without actually writing it.
* Samples are modified to show some usage of object fields and
  SampleScheme2 is included into samples to play with scheme
  adaptation mechanisms.
* Unit tests for new methods and classes.

QDS 3.27:

* Support stream buffer overflow handling strategies on a per-agent basis.

QDS 3.26:

* Support filters in feed tool. All incoming data is now filtered
  against a filter of the corresponding connection.
* New option in feed tool:
  -S|--subscribe Subscribe in uplink stream for everything subscribed in downlink.
  Use it on raw port ONLY (subscription will grow indefinitely)
* ng.RecordCursor.addAll(DataIterator, SubscriptionFilter) method is
  introduced for better interoperability between old and new
  generation (ng) data structures and interfaces.
* FeedAdapter in feed tool now uses RecordCursor to process incoming
  data for better performance.

QDS 3.25:

* StringField now supports three string representations: byte[],
  char[] and String in all its methods. Missing support of byte[] in
  toString(Object o) method was added.
* BUG FIX: "Disconnected" message is not shown in the log/console
  under Solaris OS due to thread interrupted flag.

QDS 3.24:

* QDServletConnection is now serializable with transient state. The
  result is that QDServlet usage will not prevent HttpSession
  replication in a cluster of HTTP servers. However, when connection is
  switched to replica, then client HttpConnection will get an error
  message from QDServlet and will reestablish connection to QD subsystem.

QDS 3.23:

* QTPWorkerThreadGroup removed, so that applets can load/reload
  normally.

QDS 3.22:

* Resurrect QTPWorkerThread group when it becomes "destroyed", so that
  applets using QTP can be reloaded in the same JVM.
* For better backwards compatibility StringField.writeObj supports
  byte[] in addition to char[] and String.
* Feed tool has additional option:
  -R|--raw  Use raw feed connection (do not subscribe to stream '*')
  It is needed for backwards compatibility with old HFGate code that
  did not support any subscription messages on its RAW port.
* Max buffer size for stream agents in increased to 100k records to
  better handle large data surges of real-time quotes. This value can
  be changed via "com.devexperts.qd.impl.matrix.Agent.MaxBufferSize"
  system property.
* sample.TestThoughput is improved with better SSL/TLS support and
  with ability to be run from script in a time-limited fashion and
  write report about maximum reached throughput.
* EXPERIMENTAL: The following changes are made in "ng" package:
  DataCursor renamed to RecordCursor. RecordBuffer and RecordSource
  are introduced. ByteArrayParser and Ticker classes internally use
  RecordBuffer to increase processing throughput. Classes in "ng"
  package are still experimental, are subject to change, and should
  not be used outside QD implementation.
* QDServlet tracks closed connection using its own dedicated thread.
  It does not rely on container's session expiration anymore, because
  connections may come and go in the same session.
* QDServlet audits established and closed connections.

QDS 3.21:

* qtp.SubscriptionFilterFactory is introduced.
  MessageAdapter.AbstractFactory and all standard MessageAdapters now
  find SubscriptionFilterFactory instance via QDServices framework and
  use it to create subscription filters based on specification. This
  gives ability for projects that use QDS to define their
  application-specific SubscriptionFilterFactory that will be
  automatically used by all QDS tools like multiplexor and feed.
* AgentAdapter and DistributorAdapter have createXXXFilter methods
  (for Ticker, Stream, History) that can be overridden in applications
  for a fine-grained control on filtering (different filtering for
  different collectors).
* Non-functional bug is fixed in TimeSyncTracker (incoming JvmId was
  not correctly recorded) and some other cosmetic updates to
  TimeSyncTracker.
* qtp.file.FileConnector is introduced to read data from file.
* MessageConnectors understands "file:" prefix and uses FileConnector.
* FileDump tool is replaced with Dump tool that can be used to dump
  information incoming on any connection (including a plain file).
* QDLogImpl correctly supports multi-line log messages. It uses
  PrintWriter.println on each line separately, so that a correct
  platform-dependent line separator will be used.
* Improved "corrupted message" error report in ByteArrayParser --
  report is logged as a single multi-line log message.

QDS 3.20:

* QDS data scheme API is made backward-compatible to
  pre QDS 3.19 releases, so that all new QDS tools work
  with old data schemes. Changes include:
  - DataIntField and DataObjField are interfaces again.
  - writeInt/writeObj methods are no longer final.
* MessageConnectors.configurable is no longer deprecated and it has
  somewhat enhanced functionality (instanceof check).
* MessageConnectors shall treat "external" Thread interrupt or stop as
  a signal to stop a corresponding connector completely (it is needed to
  gracefully shutdown when applet is somehow unloaded).
* All QDS tools now understand -Dscheme=<scheme> JVM option as an
  alternative way to specify data scheme (instead of first arg).
* util.DataIterators helper class is introduced with method to
  skip record and to filter DataIterator.
* tools.TimeSyncTracker is introduced. It tracks time in various
  JVMs via periodic multicasts in local network and shows error if
  this JVM's time has drifted too far away (> 3 sec) from median
  time in this local network.
* Time tool is added to QDTools. It just runs TimeSyncTracker.
* All long-running tools (connect, feed, multiplexor) automatically
  run TimeSyncTracker.
* BUG FIX: QDTools did not work on 1.4 JVM without JMX libraries.

QDS 3.19:

* Ergonomics: Default scheme can be specified as a plain jar-file name
  in all tools without '!' suffix. Like this: connect qdext.jar ...
* Ergonomics: Incompatible API change: AddressParseException is
  renamed to AddressSyntaxException and has become unchecked exception
  (extends IllegalArgumentException).
* Ergonomics: http:... and https:... connections are recognized
  directly without '(...)' syntax.
* Old style addr1/addr2/... is no longer deprecated in
  MessageConnectors.
* Now QDS can be used from Applet.
* SymbolCodec.decodeCharAt is introduced to efficiently decode ciphers
  if only few (one or two) characters are needed.
* kit.PatternFilter is introduced. It implements SubscriptionFilter
  interface and understands a simple GLOB-like grammar to specify
  matching symbols.
* PatternFilter always accepts wildcard subscription (so it always
  goes upstream), but incoming data on the stream with enabled
  wildcard subscription is always tested against installed
  subscription filter.
* Subscription filter documentation mentions that as a general rule
  wildcard subscription should always be accepted (when the
  corresponding record is allowed at all).
* AbstractMessageAdapter.AbstractFactory (extended by
  AgentAdapter.Factory and DistributorAdapter.Factory) supports
  PatternFilter by default when spec if used.
* qds-src.zip target is added to build file.
* DataCursor class is moved to "ng" package. Other high-performance
  classes and interfaces that are designed to interact with
  DataCursor will be added there in the future as needed for
  performance optimizations.
* QDTicker.examineData is introduced.
* QDHistory.examineData is introduced.
* BUG FIX: QDAgent.examineSubscription throws IllegalArgumentException
  "Unknown key" if not-coded symbols are concurrently removed from
  subscription. Unit-test isolates this bug.
* More robust code in SymbolObjectMap.examineEntries in a presence of
  concurrent modifications.
* Refactoring: Some common classes and methods are extracted from
  different matrix implementations (SubMatrix, TickerMatrix,
  MatrixSymbolObjectMap) to reduce cut-and-paste. Classes do not fully
  encapsulate their internal structures yet.
* QDStats.quoteKeyPropertyValue is introduced to faithfully support
  JMX name key=value notation in a presence of "bad" values.
* MessageConnectors.createMessageConnectors includes 'spec' string
  into key_properties so that different connectors (for example,
  stocks and options) can be distinguished in JMX console.
* HistorySubscriptionFilter.UNLIMITED is deprecated for performance
  reasons.
* JMXStats naming convention is updated so that 'id' attribute is used
  instead of 'loc' and ids are assigned in such a way that they always
  correctly arrange alphabetically - 0,1,..,9,A10,...,A99,B100,...
* Ergonomics: toString() method is implemented in
  AbstractMessageConnector, MessageAdapter and
  MessageAdapter.AbstractFactory to return human-readable description of
  the corresponding object for logging and management purposes.
* New methods are introduced in MessageConnector interface:
  getFactory, getStats, getAuditor, getConnectionCount.
  SocketHandler class was refactored (simplified) to work
  via new MessageConnector interface methods.
* QDS is packaged into separate jar files:
  qds.jar        -- Core QDS classes
  qds-sample.jar -- Sample classes (run with java -jar qds-sample.jar)
  qds-test.jar   -- Test classes (run with java -jar qds-test.jar)
  qds-tools.jar  -- Tools classes (run with java -jar qds-tools.jar)
* Default scheme is defined for qds-sample.jar.
* impl.hash package is no longer part of qds.jar. It was moved into
  qds-test.jar (it is used for testing purposes only).
* Ticker and History QDStats correctly count number of records added,
  changed, and removed from their corresponding storage structures.
* QDStats.SType.SOCKET_CONNECTION and QDStats.SType.HTTP_CONNECTION
  are deprecated. QDStats.SType.CONNECTION should be used instead.
* Two new convenience methods are introduced on QDStats:
  getOrCreate and getOrVoid
* First-class "collection" concept is introduced in QDStats. New
  QDStats.SType instances are defined: AGENTS, DISTRIBUTORS, CONNECTIONS
  to represent collections of the corresponding types.
* JMXStats.toString() is implemented to return object name of
  registered JMX stats.
* 'connect' and 'multiplexor' tools support JMX management using options:
   -h|--html-management <port>   Install JMX HTML management console at a specified port
   -r|--rmi-management <port>    Install JMX RMI management connector at a specified port
* Multiplexor management console has two domains:
  QDMultiplexor -- for quick management of connectors.
  QDMultiplexorStats -- for detailed statistical information.
* 'connect' and 'multiplexor' can redirect log to a file using option:
   -l|--log <file>               Redirect log to a file
* 'multiplexor' tool can print statistics using option:
   -s|--stat <n>                 Log stats every <n> seconds
* "setStoreEverything" method is introduced in QDTicker and QDHistory
  to store all incoming data regardless of subscription. The
  corresponding functionality is now implemented only in matrix
  implementation of Ticker (it does not work in History yet).
* Sample application now sends all its sample records (Quote, Trade,
  Candle) on all contracts -- ticker, stream, history.
* 'feed' tool is introduced. Unlike 'multiplexor' it does not forward
  incoming subscription to its data provider (or "feed"). It subscribes
  to feed with wildcard subscription on stream, receives everything,
  and stores everything in memory. It can optionally periodically dump
  its storage to a file and restore it from file on startup.
* All relevant QD tools (connect, feed, multiplexor) use default
  HistorySubscriptionFilter (via QDServices framework) if it is
  available in the same class-loader as data scheme.
* DataIntField and DataObjField are now abstract classes (instead of
  interfaces) with abstract writeInt/Obj, readInt/Obj methods.
* readByteArray and writeByteArray are introduced in util.ObjectUtil
* StringField supports char arrays in its writeObj and toString
  methods, performing appropriate conversions on-the-fly.
* VoidIntField and VoidObjField are introduced.
* writeInt/Obj, readInt/Obj are now final in all concrete
  implementations of DataIntField and DataObjField.
* New QTP message types are defined:
  MESSAGE_DESCRIBE_PROTOCOL = 1
  MESSAGE_DESCRIBE_DATA = 2
  MESSAGE_DESCRIBE_SUBSCRIPTION = 3
  For now they are not sent yet, but are silently ignored by message
  parser class. They will be implemented in the future.

QDS 3.18:

* BUG FIX: Connect tool in 'compare' mode shows incorrect "Unmatched
  buf" numbers and generally does not work correctly if you subscribe to
  multiple records. Affected version: QDS 3.17
* Changed delay averaging algorithm for 'compare' mode. It now takes
  an average of 'delta delay' (which might be positive and negative).
  As a result one stream is reported as having "0 ms" delay and the
  other (that is slower on average) has a number.
* QDStats now inherits rid_count as a maximum of its two "parents"
  counts (in case it is a special QDStats that gathers subsums).
* util.QDServices helper class is introduced that contains common
  services-loading method that is now used in different places
  throughout QD.
* New style of specifying multiple connectors is introduced. Instead
  of addr1/addr2/... write (addr1)(addr2)... See qtp.MessageConnectors
  for full documentation.
* MessageConnectors now throw qtp.AddressParseException instead of
  ParseException. Later one is deprecated in other methods.
* qtp.http.HttpConnector is introduced that supports QTP-over-HTTP
  connection on a specified http:// or https:// url.
* qtp.http.QDServlet is introduced -- ready to use Servlet class that
  can be deployed in any Web container to provider QTP-over-HTTP
  service.
* Connectors from qtp packages were refactored to abstract common
  functionality. Several helper classes like AbstractMessageConnector
  were introduced in process.
* Sample classes are refactored. They now include SampleHttpServer
  that provides sample QD data over HTTP using built-in Jetty HTTP
  server (the corresponding jars are added to repository for sample
  users convenience).

QDS 3.17:

* BUG FIX: QDStats failed with ArrayIndexOutOfBoundsException when it
  tried to store per-record information into QDStats that were created
  with rid_count=0. Affected versions: QDS 3.16
* Convenience constructors introduced in QDStat to crate root stats.
* Connect tool command line changed. Collector name should no longer
  be specified in the command line. It is 'ticker' by default.
* New options introduced for Connect tool:
   -c|--collector <name>    One of 'ticker' (default), 'stream', 'history', or 'all'
   -C|--compare <address>   Compare incoming data with the second connection
   -f|--fields <fields>     Process only fields that end with a string from a given comma-separated list
* New options introduced for Multiplexor tool:
   -c|--collector <name>   One of 'ticker', 'stream', 'history', or 'all' (default)
   -d|--delay <n>          Delay data for <n> seconds
   -D|--drop <n>           Drop <n> % of data
* Changed formatting of Connect tool records dump (which is shown
  unless suppressed with -q|--quite option). Instead of tab-delimited
  values, all values are padded to 10 characters.
* Connect tool prints field names the first time in dumps a record.

QDS 3.16:

* QDStats.SType.ANY is now a "magic" type. It gathers sub-stats
  summary for any type of its children stats.
* QDStats.SType.valueOf(String) is introduced.
* QDStats.getValue(QDStats.SType) is added for convenience.
* JMXStats uses special naming convention for summary sub-stats, so
  that they are shown before all other children in HTML console.
* JMXStats no longer use private JXMAttr class, so that JMXStats can
  now be managed remotely via Java 1.5+ jconsole tool.
* JMXStats bean naming convention is changed so that is looks prettier
  when managed remotely via Java 1.5+ jconsole tool.
* Additional customizable service is introduced:
  com.devexperts.qd.stats.QDStats - can be used to change default
  QDStats (QDStats.VOID instance is used by default).
* Sample now demonstrates best practices for JMX-enabled management.
  It uses PlatformMBeanServer when invoked under Java 1.5+, but still
  works under previous versions.
* Implementation now correctly reports into QDStats the number of
  subscriptions in every agent and in the total unique subscription.
* All QD tools print their command-line help to stderr (instead of stdout).
* Connect tool has several enhancements:
  + Ability to take subscription from a remote subscription source.
  + "-q|--quiet" option to be quiet (do not dump every incoming data record)
  + "-s|--stat <n>" option to log stats every <n> seconds

QDS 3.15:

* Services loading logic (for QDFactory.getDefault) is changed so that
  it correctly works under non-obvious class-loader scenarios. In
  particular it now works when used under JUnit.
* qd.logger, qd.stats, and qd.tools packages are now included into the
  generated JavaDoc documentation delivery unit.


QDS 3.14:

* DataBuffer.examiningIterator now supports iteration in reverse
  order (it is useful for history manipulation).
* Log QD version on creation of QDFactory for easier trouble-shooting.
  QDFactory.getVersion() is also publicly available just in case.
* Fixed bug in QDLogger (-Dcom.devexperts.qd.logger) -- time
  information was incorrectly logged. Now logger makes no assumptions
  about time format, but uses record.getField(0).toString(...) to
  print information about subscriptions and records.
* Better support for multiple IP addresses in ClientSocketConnector --
  when one IP connection fails, then alternative IPs are immediately
  tried out (without 10 sec delay). Reconnection delay only works on
  per-IP basis. ClientSocketConnector makes sure that it does not
  connect to a single IP address too often.
* More unit-tests for History contracts.
* Added qds.freeze+release and api.freeze+release tasks into build
  file. Plus, more detailed version info into manifest.
* Some more unit-tests for History.
* Decimal.parseDouble(char[],int,int) is introduced.
* All default MessageAdapter.Factory implementation are now
  'configurable' by default. No need to use
  MessageConnectors.configurable method anymore.
* SymbolObjectVisitor interface is introduced.
  SymbolObjectMap.examineEntries(visitor) is introduced.
* Removed 'com.devexperts.qd.sample' package from qds.jar (it is now
  compiled only with test classes).
* QDFactory.getDefaultScheme() is introduced.
* Services concept is consistently applied throughout QDS. There
  are the following services that are now defined in QDS:
  com.devexperts.qd.QDLog
  com.devexperts.qd.QDFactory
  com.devexperts.qd.DataScheme
  When each service is loaded with a corresponding method, then the of
  the actual class to load is determined in the following order:
  - First, system property with a corresponding name is checked.
  - Second, a file META-INF/service/<service-name> is checked.
  Otherwise, default implementation is used (in case of QDLog and
  QDFactory) or exception is thrown (in case DataScheme).
* Package 'com.devexperts.qd.tools' is introduced. It now contains
  the following useful tools:
  FileDump    -- Dumps QTP file (tape) in a human-readable form.
  Connect     -- Establishes QTP connection and dumps incoming data.
  Multiplexor -- Multiplexes QTP connections.
  SchemeDump  -- Dump scheme contents in a human-readable form.
  Tools       -- Invokes any tool from the above list.
* Tools can be invoked directly via -jar qds.jar, for example:
  java -jar qds.jar multiplexor ....
* com.devexperts.qd.qtp.Multiplexor is no longer present (it was moved
  to tools)

QDS 3.13:

* HISTORY BUG FIXED: When agent with larger subscription time closes
  reduction of subscription was not notified upstream.
+ Unit test that isolates this problem.

QDS 3.12:

* HISTORY BUG FIXED: The history was loosing all the data when
  unsubscribe/subscribe message came back-to-back, because data buffer
  was lost and only subscribe message was sent upstream. As a temporary
  solution on any subscribe message History will completely resend all
  data it knows (just like Ticker does). Better solution (that avoids
  network data transfers) should be implemented in the future.
+ Unit test that isolates this problem.
* TICKER INEFFICIENCY FIXED: Ticker was sending data to the client
  again when "setSubscription" was used even if this subscription
  previously existed. Using "QDAgent.setSubscription" is a common
  pattern of QD usage. This inefficiency was creating extra needless
  network overhead that is visibly observable in thinkorswim app.
+ Unit test that isolates this problem.

NOTE: Because of those changes, some integration code with QD might
need a review to make sure that data is retrieved from QD when needed.

* HistorySubscriptionFilter is now specified per History (and not per
  Agent/Distributor and it was introduced in QD 3.11). You should
  specify filter when you create History instance. Additional feature of
  history filter is introduced -- ability to limit number of records
  that are kept in the historical buffer via getMaxRecordCount method.


QDS 3.11:

* MessageConsumerAdapter class is introduced as a starting point for
  implementation of MessageConsumer implementation. It does nothing, but
  ignores messages and writes error messages to the log.
* DistributorAdapter class is changed to silently ignore subscription
  messages for contracts (stream, history, ticker) it is not
  configured to provide. You do not have to extend this class to
  correctly ignore those messages anymore. For example, now it correct
  to have new DistributorAdapter(stream) and connect to the source that
  subscribes to ticker and history, too (stream and history
  subscription will get ignored).
* HistorySubscriptionFilter interface is introduced as an optional way
  to limit minimal time for history subscription in application-specific
  way to avoid memory overflow due to misbehaving clients (that try to
  subscribe for too large amounts of data).

QDS 3.10:

* Decimal.parseDecimal is introduced as a high-performance way to convert
  string into a packed decimal integer.
* ObjectUtil class is introduced to convert object to/from byte arrays
  and write/read then to/from DataOutput/DataInput via standard Java
  object serialization mechanisms.
* PlainObjField uses ObjectUtil for serialization and deserialization.
* ObjectUtil.writeObject and ObjectUtil.objectToBytes use ThreadLocal
  ObjectOutputStream to perform serialization, thus increasing
  serialization performance and reducing garbage.


QDS 3.9:

* Logging was considerably improved:
- QDLog class was introduced as a common entry-point for logging of
  all information and error messages inside QD system.
- Default implementation of QDLog beautifully formats messages with
  time and thread information.
- QDLog can be replaced programmatically (QDLog.setInstance)
  and via "META-INF/services/com.devexperts.qd.QDLog" file in
  classpath, so that a project-specific logging destination can be
  defined.
- All QD errors and messages go to QDLog (including all exceptions that
  are caught anywhere throughout QD and QTP implementations).
- Default ConnectionAuditor writes to QDLog.
* BUG FIX: MessageAdapter.handleUnknownMessage now writes message to
  the log before closing connection (so that a reason of the close can
  be seen).
* com.devexperts.qd.logger package is introduced. It contains logging
  wrappers for all QD interfaces. If the corresponding property is set
  in JVM (-Dcom.devexperts.qd.logger) then default QD factory logs
  all operations. This feature shall be used for debugging purposes
  only, because it greatly reduces QD throughput and can create huge
  amounts of logs on production systems.
* All QTP socket threads are grouped into a separate thread group that
  logs all uncaught exceptions.
* Decimal.toDouble now guarantees that the resulting double is the value
  closest to the corresponding true decimal number (so that error is at
  most half ULP, and Double.toString for this value shows a pretty
  representation of this number without any garbage at the end).
* MessageAdapter.handleUnknownMessage can now ignore the problem if it
  wishes, without causing disturbances to the data/subscription feeds
  (previously, data or subscription was not ignored, but remained in the
  buffer for the next incoming message). Parser prints error to log if
  any MessageConsumer implementation does not process its data or
  subscription fully.
* BUG FIX: Race condition in socket opening process is fixed.
  Previously, message processing could be started before
  MessageAdapter was started, so that some initial messages in
  socket connection were actually ignored by the system.
* Complete paranoia in socket opening process. All possible exceptions
  are caught, logged, and resources are cleaned up to prevent potential
  resource leak.
* Additional warning is issued by MessageAdapter if messages are
  coming into adapter that is closed or not started yet.

QDS 3.8:

* DataBuffer.examiningIterator(int index, int last_index) is
  introduced.
* Support secure connections with SSL/TLS in Java 1.4+
* Authorization/Authentication hook-ups are supported via
  SocketMessageAdapterFactory interface.
* QD "Sample" application uses both secure connection (TLS) and
  simple authentication with token.
* ServerSocketConnector now retries failed attempts to listen and
  correctly reports failure to listen.
* Fixed bug in CompactInt.writeLong
* SymbolCodec.getWildcardSymbol() is introduced and wildcard symbol
  support is integrated into Stream Matrix QD implementation.
  You must invoke QDStream.setEnableWildcards(true) in order to
  be able to use wildcard subscription.
* TestThroughput application created for simple evaluation of QD
  throughput in various settings and environments.
* DataCursor is introduced. QDTicker has getData method to get all
  data fields in one invocation via DataCursor.
* Ability to generate EMMA coverage report for all unit tests.
* Ability to fine-tune priorities of reader/writer threads in
  MessageConnectors.
* Unit-test for PentaCodec, additional consistency check for
  CompactIntTest.
* Improved logging of default connection auditor (show date and
  thread).
* QTPFileDump utility to analyze captured QTP data bytes.
* SubMatrix pointer was made "volatile" in an attempt to be 100%
  compatible with Java 1.5 memory model and get rid of mysterious
  subscription problems once and for all.
* Detailed error report (to stderr) if broken QTP message is received.

QDS 3.7:

* MessageConnectorAuditor contracts changes ("message" string instead
  of "address" string is now passed into the methods).
* MessageConnectorAuditor.DEFAULT is introduced.
* MessageConnector interface introduced.
* MessageConnectors class for utility methods introduced with full
  support for multiple-connection naming convention (using "/" to
  separate specification for multiple connectors).
* ConfigurableMessageAdapterFactory is introduced, so that additional
  specifications can be supplied for each connector that is listed in
  the connection string of addresses. For example:
  equities@quote01:5001/options@quote02:5001/messages@m1,m2:5002/:5003
* ClientSocket and ServerSocket classes are deprecated (use
  ClientSocketConnector and ServerSocketConnector classes instead).
* Both message connectors have start/stop/restart methods (as a part
  of MessageConnector interface implementation) and restart
  automatically when their connection properties (host/port) change.
* JMXStats updates so that all components are registered in
  MBeanServer with "xxxStats" type. For example, "type=TickerStats"
* Internals of connectors are refactored. ClientSocketConnector host
  addresses are now resolved in a dedicated socket read/write threads.
* Thread names and logging messages updated.
* Address shuffling (for load balancing/failover) is changed, so that
  servers always attempted in a round-robin fashion. If one sever fails,
  then connected attempt is guaranteed to go to the different server.
* SubscriptionContainer interface that is implemented by QDAgent and
  QDCollector and contains methods to analyze agent's or total
  subscription respectively:
    + boolean isSubscribed(record, cipher, symbol, time);
    + boolean examineSubscription(visitor);
    + int getSubscriptionSize();

QDS 3.5:

* ClientSocket.setHost/setPort immediately reconnects if host/port changes.
* ClientSocket does no longer logs "disconnected" twice when stopped
  via management interface.

QDS 3.4:

* ClientSocket: Do not delay in normal fail-over scenario: When
  connection was successfully maintained for more than delay time
  (default is 10 sec), then there is no delay before attempt to
  reconnect.

QDS 3.0:

* DataIntField and DataObjField contain getRecord() and getIndex() methods.
* DataRecord contains getScheme() and hasTime() method.
* If data_record.hasTime() is true, then 0th and 1st int fields of the record are "time" and define time
  axis of data records for history api.
* All field classes in com.devexperts.qd.kit requireindex in constructor.
* DefaultRecord requires has_time in constructor.
* DefaultScheme requires setParentReferences() before use, and verifyScheme() is highly advised. See SampleScheme.
* QDFactory changed from factory methods to abstract factory.
* QDHistory added.
* QDSystem removed.
* XXXAccessor classes removed from ticker (use access methods).
* DataBuffer and SubscriptionBuffer contain VOID instances.
* SubscriptionIterator contains getTime() method.
* SubscriptionVisitor method contains new parameter "time".
* com.devexperts.qd.qtp classes changed to accomodate changes in API and introduction of history.

2003-03-03:

Release: Architecture baseline
Version: 200303
Tag: arch_baseline_200303
Assembled: Igor Sereda
Reason: End of Requirements & Architecture phase
Notes: Released files are only com.deware.qd interfaces. They are considered the
       baseline of QDS java API. All other classes are provided as reference and
       shall be actively developed further. API shall not actively change, if only expand.
       The released files are also available as a separate files in VM [Quote: 19].
